/**
 * jQuery Validation Plugin 1.9.0
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright (c) 2006 - 2011 JÃ¶rn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

(function () {

    function stripHtml(value) {
        // remove html tags and space chars
        return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')
            // remove numbers and punctuation
            .replace(/[0-9.(),;:!?%#$'"_+=\/-]*/g, '');
    }

    jQuery.validator.addMethod("maxWords", function (value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length < params;
    }, jQuery.validator.format("Please enter {0} words or less."));

    jQuery.validator.addMethod("minWords", function (value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;
    }, jQuery.validator.format("Please enter at least {0} words."));

    jQuery.validator.addMethod("rangeWords", function (value, element, params) {
        return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params[0] && value.match(/bw+b/g).length < params[1];
    }, jQuery.validator.format("Please enter between {0} and {1} words."));

})();

jQuery.validator.addMethod("letterswithbasicpunc", function (value, element) {
    return this.optional(element) || /^[a-z-.,()'\"\s]+$/i.test(value);
}, "Letters or punctuation only please");

jQuery.validator.addMethod("alphanumeric", function (value, element) {
    return this.optional(element) || /^\w+$/i.test(value);
}, "Letters, numbers, spaces or underscores only please");

jQuery.validator.addMethod("lettersonly", function (value, element) {
    return this.optional(element) || /^[a-z]+$/i.test(value);
}, "Letters only please");

jQuery.validator.addMethod("nowhitespace", function (value, element) {
    return this.optional(element) || /^\S+$/i.test(value);
}, "No white space please");

jQuery.validator.addMethod("ziprange", function (value, element) {
    return this.optional(element) || /^90[2-5]\d\{2}-\d{4}$/.test(value);
}, "Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx");

jQuery.validator.addMethod("integer", function (value, element) {
    return this.optional(element) || /^-?\d+$/.test(value);
}, "A positive or negative non-decimal number please");

/**
 * Return true, if the value is a valid vehicle identification number (VIN).
 *
 * Works with all kind of text inputs.
 *
 * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />
 * @desc Declares a required input element whose value must be a valid vehicle identification number.
 *
 * @name jQuery.validator.methods.vinUS
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod(
    "vinUS",
    function (v) {
        if (v.length != 17)
            return false;
        var i, n, d, f, cd, cdv;
        var LL = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
        var VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];
        var FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];
        var rs = 0;
        for (i = 0; i < 17; i++) {
            f = FL[i];
            d = v.slice(i, i + 1);
            if (i == 8) {
                cdv = d;
            }
            if (!isNaN(d)) {
                d *= f;
            }
            else {
                for (n = 0; n < LL.length; n++) {
                    if (d.toUpperCase() === LL[n]) {
                        d = VL[n];
                        d *= f;
                        if (isNaN(cdv) && n == 8) {
                            cdv = LL[n];
                        }
                        break;
                    }
                }
            }
            rs += d;
        }
        cd = rs % 11;
        if (cd == 10) {
            cd = "X";
        }
        if (cd == cdv) {
            return true;
        }
        return false;
    },
    "The specified vehicle identification number (VIN) is invalid."
);

/**
 * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.
 *
 * @example jQuery.validator.methods.date("01/01/1900")
 * @result true
 *
 * @example jQuery.validator.methods.date("01/13/1990")
 * @result false
 *
 * @example jQuery.validator.methods.date("01.01.1900")
 * @result false
 *
 * @example <input name="pippo" class="{dateITA:true}" />
 * @desc Declares an optional input element whose value must be a valid date.
 *
 * @name jQuery.validator.methods.dateITA
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod(
    "dateITA",
    function (value, element) {
        var check = false;
        var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
        if (re.test(value)) {
            var adata = value.split('/');
            var gg = parseInt(adata[0], 10);
            var mm = parseInt(adata[1], 10);
            var aaaa = parseInt(adata[2], 10);
            var xdata = new Date(aaaa, mm - 1, gg);
            if (( xdata.getFullYear() == aaaa ) && ( xdata.getMonth() == mm - 1 ) && ( xdata.getDate() == gg ))
                check = true;
            else
                check = false;
        } else
            check = false;
        return this.optional(element) || check;
    },
    "Please enter a correct date"
);

jQuery.validator.addMethod("dateNL", function (value, element) {
        return this.optional(element) || /^\d\d?[\.\/-]\d\d?[\.\/-]\d\d\d?\d?$/.test(value);
    }, "Vul hier een geldige datum in."
);

jQuery.validator.addMethod("time", function (value, element) {
    return this.optional(element) || /^([01]\d|2[0-3])(:[0-5]\d){0,2}$/.test(value);
}, "Please enter a valid time, between 00:00 and 23:59");
jQuery.validator.addMethod("time12h", function (value, element) {
    return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$/i.test(value);
}, "Please enter a valid time, between 00:00 am and 12:00 pm");

/**
 * matches US phone number format
 *
 * where the area code may not start with 1 and the prefix may not start with 1
 * allows '-' or ' ' as a separator and allows parens around area code
 * some people may want to put a '1' in front of their number
 *
 * 1(212)-999-2345
 * or
 * 212 999 2344
 * or
 * 212-999-0983
 *
 * but not
 * 111-123-5434
 * and not
 * 212 123 4567
 */
jQuery.validator.addMethod("phoneUS", function (phone_number, element) {
    phone_number = phone_number.replace(/\s+/g, "");
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);
}, "Please specify a valid phone number");

jQuery.validator.addMethod('phoneUK', function (phone_number, element) {
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^(\(?(0|\+44)[1-9]{1}\d{1,4}?\)?\s?\d{3,4}\s?\d{3,4})$/);
}, 'Please specify a valid phone number');

jQuery.validator.addMethod('mobileUK', function (phone_number, element) {
    return this.optional(element) || phone_number.length > 9 &&
        phone_number.match(/^((0|\+44)7(5|6|7|8|9){1}\d{2}\s?\d{6})$/);
}, 'Please specify a valid mobile number');

// TODO check if value starts with <, otherwise don't try stripping anything
jQuery.validator.addMethod("strippedminlength", function (value, element, param) {
    return jQuery(value).text().length >= param;
}, jQuery.validator.format("Please enter at least {0} characters"));

// same as email, but TLD is optional
jQuery.validator.addMethod("email2", function (value, element, param) {
    return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
}, jQuery.validator.messages.email);

// same as url, but TLD is optional
jQuery.validator.addMethod("url2", function (value, element, param) {
    return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
}, jQuery.validator.messages.url);

// NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator
// Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0
// Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
jQuery.validator.addMethod("creditcardtypes", function (value, element, param) {

    if (/[^0-9-]+/.test(value))
        return false;

    value = value.replace(/\D/g, "");

    var validTypes = 0x0000;

    if (param.mastercard)
        validTypes |= 0x0001;
    if (param.visa)
        validTypes |= 0x0002;
    if (param.amex)
        validTypes |= 0x0004;
    if (param.dinersclub)
        validTypes |= 0x0008;
    if (param.enroute)
        validTypes |= 0x0010;
    if (param.discover)
        validTypes |= 0x0020;
    if (param.jcb)
        validTypes |= 0x0040;
    if (param.unknown)
        validTypes |= 0x0080;
    if (param.all)
        validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;

    if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard
        return value.length == 16;
    }
    if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa
        return value.length == 16;
    }
    if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex
        return value.length == 15;
    }
    if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub
        return value.length == 14;
    }
    if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute
        return value.length == 15;
    }
    if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover
        return value.length == 16;
    }
    if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb
        return value.length == 16;
    }
    if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb
        return value.length == 15;
    }
    if (validTypes & 0x0080) { //unknown
        return true;
    }
    return false;
}, "Please enter a valid credit card number.");

jQuery.validator.addMethod("ipv4", function (value, element, param) {
    return this.optional(element) || /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i.test(value);
}, "Please enter a valid IP v4 address.");

jQuery.validator.addMethod("ipv6", function (value, element, param) {
    return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
}, "Please enter a valid IP v6 address.");

/**
 * Return true if the field value matches the given format RegExp
 *
 * @example jQuery.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)
 * @result true
 *
 * @example jQuery.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)
 * @result false
 *
 * @name jQuery.validator.methods.pattern
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
jQuery.validator.addMethod("pattern", function (value, element, param) {
    return this.optional(element) || param.test(value);
}, "Invalid format.");

// PX Custom Validator
jQuery.validator.addMethod("ssid", function (value, element, param) {
    return this.optional(element) || (value.indexOf(" ") != 0 && value.lastIndexOf(" ") != (value.length - 1) && /^[0-9a-zA-Z!#\(\)\+\-\.\/%=\?@\^_\{|\}~\x20]{1,32}$/.test(value));
}, "Please enter a valid SSID.");

jQuery.validator.addMethod("name_check", function (value, element, param) {
    return this.optional(element) || !(/[{}\|\[\]~`\\]/.test(value));
}, "Please enter a valid name.");

jQuery.validator.addMethod("phonenumber_check", function (value, element, param) {
    return this.optional(element) || /^[\d#\*\+pe\?][\d#\*pe\?]{0,}$/.test(value);
}, "Please enter a valid phone number.");

jQuery.validator.addMethod("email_check", function (value, element, param) {
    return this.optional(element) || /^\w+([-+.]\w+)*@\w+([-.]\w+)*(\.[\da-zA-Z]{2,3})+$/.test(value);
}, "Please enter a valid email.");

jQuery.validator.addMethod("pin_check", function (value, element, param) {
    return this.optional(element) || /^[0-9]{4,8}$/.test(value);
}, "Please enter a valid PIN code.");

jQuery.validator.addMethod("puk_check", function (value, element, param) {
    return this.optional(element) || /^[0-9]{8}$/.test(value);
}, "Please enter a valid PUK code.");

jQuery.validator.addMethod("password_check", function (value, element, param) {
    return this.optional(element) || /^[0-9a-zA-Z!#$*\+,\-\.%:=\?@\[\]\^_\{|\}~]{1,32}$/.test(value);
}, "Please enter a valid password.");

jQuery.validator.addMethod("wps_pin_check", function (value, element, param) {
    function validateChecksum(PIN) {
        var accum = 0;
        accum += 3 * (parseInt(PIN / 10000000) % 10);
        accum += 1 * (parseInt(PIN / 1000000) % 10);
        accum += 3 * (parseInt(PIN / 100000) % 10);
        accum += 1 * (parseInt(PIN / 10000) % 10);
        accum += 3 * (parseInt(PIN / 1000) % 10);
        accum += 1 * (parseInt(PIN / 100) % 10);
        accum += 3 * (parseInt(PIN / 10) % 10);
        accum += 1 * (parseInt(PIN / 1) % 10);
        return ((accum % 10) == 0);
    }

    var result = value.length == 8 && validateChecksum(value);
    return this.optional(element) || result;
}, "Invalid PIN number");

jQuery.validator.addMethod("lanip_check", function (value, element, param) {
    var isIp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i.test(value);
    var result = false;
    if(isIp) {
        var iparr = value.split(".");
        result =  checkRange(iparr[0], 1, 223) && !checkRange(iparr[0], 127, 127) && checkRange(iparr[1], 0, 255) && checkRange(iparr[2], 0, 255) && checkRange(iparr[3], 1, 254);
    }

    return this.optional(element) || result;
});

jQuery.validator.addMethod("comment_check", function (value, element, param) {
    //not include space from 92/93
    return this.optional(element) || /^[0-9a-zA-Z!#\(\)\+\-\.\/%=\?@\^_\{|\}~]{1,32}$/.test(value);
});

jQuery.validator.addMethod("check_file_path", function(value, element, param) {
	var result = true;
	if (value.length != 1 && (value.charAt(0) == '/' && value.charAt(1) == '/')) {
		result = false;
	}

	var chars = [ '\\', ':', '*', '|', '#', '<', '>', '"', '?', "'", '&', '~', '`', '+' ];
	for ( var i = 0; i < value.length; i++) {
		if ($.inArray(value[i], chars) != -1) {
			result = false;
		}
	}
	return this.optional(element) || result;
});

jQuery.validator.addMethod("portCompare", function (value, element, param) {
    var endVal = parseInt(value, 10);
    var startVal = parseInt($(param).val(), 10);
    return param.indexOf("Start") != -1? startVal <= endVal : startVal >= endVal;
});

jQuery.validator.addMethod("mac_check", function (value, element, param) {
    var isMac = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/.test(value);
    if(isMac) {
        var macArr = value.toUpperCase().split(':');
        var sub1 = '0x'+macArr[0];
        return !checkAllField(macArr, 'FF') && !checkAllField(macArr, '00') && ((sub1 & 1)!=1);
    }

    function checkAllField(itemArr, value) {
        return _.all(itemArr, function(item) {
            return item == value;
        });
    }

    return this.optional(element) || isMac;
});

jQuery.validator.addMethod("ip_check", function (value, element, param) {
    var isIp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i.test(value);
    var result = false;
    if(isIp) {
        var iparr = value.split(".");
        result =  checkRange(iparr[0], 1, 223) && checkRange(iparr[1], 0, 255) && checkRange(iparr[2], 0, 255) && checkRange(iparr[3], 1, 254);
    }

    return this.optional(element) || result;
});

jQuery.validator.addMethod("dmz_ip_check", function (value, element, param) {
    var isIp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i.test(value);
    var result = false;
    if(isIp) {
        var iparr = value.split(".");
        result =  checkRange(iparr[0], 1, 255) && checkRange(iparr[1], 0, 255) && checkRange(iparr[2], 0, 255) && checkRange(iparr[3], 1, 254);
    }

    return this.optional(element) || result;
});

jQuery.validator.addMethod("apn_check", function (value, element, param) {
    if (value.charAt(0) == '.' || value.charAt(0) == '-' || value.charAt(value.length - 1) == '.' || value.charAt(value.length - 1) == '-') {
        return false;
    }
    return this.optional(element) || (/^[0-9a-zA-Z\.-]{1,64}$/).test(value) && value.indexOf("($)") == -1;
});

jQuery.validator.addMethod("apn_profile_name_check", function (value, element, param) {
    return this.optional(element) || (/^[0-9a-zA-Z\.!#\(\)\*\+%\-=\?@\[\]\^_\{\}\|~:, ]{1,30}$/).test(value) && value.indexOf("($)") == -1;
});

jQuery.validator.addMethod("ppp_username_check", function (value, element, param) {
    return this.optional(element) || (/^[0-9a-zA-Z!#$&()*\+,\-\.\/%:;<=>?@\[\]^_\{|\}~ ]*$/.test(value) && value.indexOf("($)") == -1);
});
jQuery.validator.addMethod("ppp_password_check", function (value, element, param) {
    return this.optional(element) || (/^[0-9a-zA-Z!#$&()*\+,\-\.\/%:;<=>?@\[\]^_\{|\}~ ]*$/.test(value) && value.indexOf("($)") == -1);
});
jQuery.validator.addMethod("unlock_code_check", function (value, element, param) {
    return this.optional(element) || /^[0-9a-fA-F]{16}/.test(value);
});

jQuery.validator.addMethod("dlna_name_check", function (value, element, param) {
    return this.optional(element) || /^[0-9a-zA-Z_]*$/.test(value);
});

jQuery.validator.addMethod("wifi_password_check", function (value, element, param) {
    return this.optional(element) || /^[0-9a-zA-Z!#\(\)\+\-\.\/%=\?@\^_\{|\}~]*$/.test(value);
});
jQuery.validator.addMethod("wifi_wep_password_check", function (value, element, param) {
    return this.optional(element) || /^([0-9A-Fa-f]{10}|[0-9A-Fa-f]{26}|[\x00-\x7f]{5}|[\x00-\x7f]{13})$/.test(value);
});
jQuery.validator.addMethod("range_except", function (value, element, param) {
    return this.optional(element) || (( value >= param[0] && value < 32000 )||( value > 32007 && value <= param[1] ));
});
/**
 * @module app
 * @class app
 */
define([
    'config/menu',
    'language',
    'logout',
    'status/statusBar',
    'theme',
    'router',
    'login'],
function(menu, language, logout, statusBar, theme, router, login) {

    /**
     * åå§åç³»ç»ç¸å³æ¨¡å
     * @method init
     */
	function init() {
        theme.init();
        menu.init();
        language.init();
        router.init();
        logout.init();
		statusBar.init();
	}

	return {
		init: init
	};
});/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/

var Base64 = {

	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	// public method for encoding
	encode : function (input, isBinaryData) {
		if(!input) return "";
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		if (!isBinaryData) {
			input = Base64._utf8_encode(input);
		}
		
		while (i < input.length) {

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}

			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		}

		return output;
	},

	// public method for decoding
	decode : function (input, isBinaryData) {
		if(!input) return "";
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		if (!isBinaryData) {
			output = Base64._utf8_decode(output);
		}

		return output;

	},

	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},

	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;

		while ( i < utftext.length ) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	}

}
// Chosen, a Select Box Enhancer for jQuery and Prototype
// by Patrick Filler for Harvest, http://getharvest.com
//
// Version 0.9.14
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/


(function() {
  var AbstractChosen, root;
  var contentRegex = /^[\d#\*\+pe\?][\d#\*pe\?]{0,}$/;
  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      return this.inherit_select_classes = this.options.inherit_select_classes || false;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || $.i18n.prop("select_some_options");
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || $.i18n.prop("select_an_option");
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || $.i18n.prop("sms_chat_input_confirm");
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        if (this.max_selected_options > this.choices_count() && contentRegex.test(this.search_field.val())) {
          this.result_clear_highlight();
          this.result_select(evt);
          return;
        }
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) {
          classes.push("result-selected");
        }
        if (option.group_array_index != null) {
          classes.push("group-option");
        }
        if (option.classes !== "") {
          classes.push(option.classes);
        }
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.choices_count = function() {
      var option, _i, _len, _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!this.results_showing) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
            if(this.max_selected_options <= this.choices_count()){
                break;
            }
            var searchVal = this.search_field.val();
            if (this.results_showing && this.result_highlight ){
                return this.result_select(evt);
            } else if (this.results_showing && !this.result_highlight && contentRegex.test(searchVal)) {
                return this.result_select(evt, true);
            } else if (this.results_showing && !this.result_highlight && !contentRegex.test(searchVal)) {
                this.generate_invalid_number_note();
            }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 59:
        case 186:
          evt.preventDefault();
          if(this.max_selected_options <= this.choices_count()){
              break;
          }
		  var searchVal = this.search_field.val();
		  searchVal = this.search_field.val().length < 3 ? searchVal : searchVal.substring(0, searchVal.length - 1);
		  this.search_field.val(searchVal);
		  if (this.results_showing && this.result_highlight ){
			return this.result_select(evt);
		  } else if (this.results_showing && !this.result_highlight && contentRegex.test(searchVal)) {
			return this.result_select(evt);
		  } else if (this.results_showing && !this.result_highlight && !contentRegex.test(searchVal)) {
            this.generate_invalid_number_note();
          }
          break;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };
    AbstractChosen.clearInvalidNoteTimer = null;
    AbstractChosen.prototype.generate_invalid_number_note = function() {
        if(this.clearInvalidNoteTimer){
            window.clearTimeout(this.clearInvalidNoteTimer);
            this.clearInvalidNoteTimer = null;
        }
        $('#searchNumberInvalidWord').hide().remove();
        $('<i class="colorRed" id="searchNumberInvalidWord" trans="phone_number_invalid"></i>').appendTo('.no-results');
        $('.no-results').translate();
        this.clearInvalidNoteTimer = addTimeout(function(){
            $('#searchNumberInvalidWord').hide().remove();
        }, 3000);
    }
    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.browser_is_supported = function() {
      var _ref;
      if (window.navigator.appName === "Microsoft Internet Explorer") {
        return (null !== (_ref = document.documentMode) && _ref >= 7);
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/


(function() {
  var $, Chosen, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this;
        $this = $(this);
        if (!$this.hasClass("chzn-done")) {
          return $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    function Chosen() {
      return Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field_jq.addClass("chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props;
      this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
      this.container_id += "_chzn";
      container_classes = ["chzn-container"];
      container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chzn-rtl");
      }
      container_props = {
        'id': this.container_id,
        'class': container_classes.join(' '),
        'style': "width: " + (this.container_width()) + ";",
        'title': this.form_field.title
      };
      this.container = $("<div />", container_props);
      if (this.is_multiple) {
        this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" id="chosen-search-field-input" maxlength="40" trans="select_some_options" value="' + $.i18n.prop('select_some_options') + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
      } else {
        this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + $.i18n.prop('select_some_options') + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find('div.chzn-drop').first();
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
      }
      this.results_build();
      this.set_tab_index();
      this.set_label_behavior();
      return this.form_field_jq.trigger("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.mousedown(function(evt) {
        _this.container_mousedown(evt);
      });
      this.container.mouseup(function(evt) {
        _this.container_mouseup(evt);
      });
      this.container.mouseenter(function(evt) {
        _this.mouse_enter(evt);
      });
      this.container.mouseleave(function(evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.mouseup(function(evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.mouseover(function(evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.mouseout(function(evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind('mousewheel DOMMouseScroll', function(evt) {
        _this.search_results_mousewheel(evt);
      });
      this.form_field_jq.bind("liszt:updated", function(evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("liszt:activate", function(evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("liszt:open", function(evt) {
        _this.container_mousedown(evt);
      });
      this.search_field.blur(function(evt) {
        _this.input_blur(evt);
      });
      this.search_field.keyup(function(evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.keydown(function(evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.focus(function(evt) {
        _this.input_focus(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.click(function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.click(function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta, _ref, _ref1;
      delta = -((_ref = evt.originalEvent) != null ? _ref.wheelDelta : void 0) || ((_ref1 = evt.originialEvent) != null ? _ref1.detail : void 0);
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(document).unbind("click", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if ($(evt.target).parents('#' + this.container_id).length) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function(hide_search_results) {
      var content, data, _i, _len, _ref;
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default").find("span").text($.i18n.prop('select_some_options'));
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.removeClass("chzn-default").find("span").text(data.text);
            if (this.allow_single_deselect) {
              this.single_deselect_control_build();
            }
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      if(!hide_search_results){
          this.search_results.html(content);
      }
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.result_single_selected != null) {
        this.result_do_highlight(this.result_single_selected);
      } else if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      this.container.addClass("chzn-with-drop");
      this.form_field_jq.trigger("liszt:showing_dropdown", {
        chosen: this
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      this.result_clear_highlight();
      this.container.removeClass("chzn-with-drop");
      this.form_field_jq.trigger("liszt:hiding_dropdown", {
        chosen: this
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        return this.search_field.attr("tabindex", ti);
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      var _this = this;
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for=" + this.form_field.id + "]");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.click(function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val($.i18n.prop('select_some_options'));
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link,
        _this = this;
      choice = $('<li />', {
        "class": "search-choice"
      }).html("<span>" + item.html + "</span>");
      if (item.disabled) {
        choice.addClass('search-choice-disabled');
      } else {
        close_link = $('<a />', {
          href: '#',
          "class": 'search-choice-close',
          rel: item.array_index
        });
        close_link.click(function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link.attr("rel"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_option_count = null;
      this.selected_item.find("span").text($.i18n.prop('select_some_options'));
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default");
      }
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt, hide_search_result) {
      var high, high_id, item, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        high_id = high.attr("id");
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("liszt:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
          this.selected_item.removeClass("chzn-default");
        }
        high.addClass("result-selected");
        position = high_id.substr(high_id.lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.selected_item.find("span").first().text(item.text);
          if (this.allow_single_deselect) {
            this.single_deselect_control_build();
          }
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        return this.search_field_scale();
      } else {
          // add the content to the selected widget during click Enter button
          var searchVal = this.search_field.val();
          var isExist = false;
          for(var i = 0; i < this.form_field.options.length; i++){
              if(this.form_field.options[i].value == searchVal){
                  this.form_field.options[i].selected = true;
                  isExist = true;
                  break;
              }
          }
          if(!isExist){
              if (this.max_selected_options >= this.choices_count()){
                  this.form_field.add(new Option(searchVal, searchVal, false, true));
              } else {
                  this.form_field.add(new Option(searchVal, searchVal, false, false));
              }
          }
          this.results_build(hide_search_result);
          this.no_results_clear();
          return this.search_field_scale();
      }
    };

    Chosen.prototype.result_activate = function(el) {
      return el.addClass("active-result");
    };

    Chosen.prototype.result_deactivate = function(el) {
      return el.removeClass("active-result");
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        result = $("#" + this.container_id + "_o_" + pos);
        result.removeClass("result-selected").addClass("active-result").show();
        this.result_clear_highlight();
        this.winnow_results();
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && this.selected_item.find("abbr").length < 1) {
        return this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
    };

    Chosen.prototype.winnow_results = function() {
      var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.val() === $.i18n.prop('select_some_options') ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $('#' + option.dom_id).css('display', 'none');
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            result = $("#" + result_id);
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              result.html(text);
              this.result_activate(result);
              if (option.group_array_index != null) {
                $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
              }
            } else {
              if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                this.result_clear_highlight();
              }
              this.result_deactivate(result);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var li, lis, _i, _len, _results;
      this.search_field.val("");
      lis = this.search_results.find("li");
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        li = $(li);
        if (li.hasClass("group-result")) {
          _results.push(li.css('display', 'auto'));
        } else if (!this.is_multiple || !li.hasClass("result-selected")) {
          _results.push(this.result_activate(li));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      if (!this.result_highlight) {
        selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
        do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
        if (do_high != null) {
          return this.result_do_highlight(do_high);
        }
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results"><b trans="sms_chat_input_confirm">' + $.i18n.prop("sms_chat_input_confirm") + '</b> <span></span></li>');
      //no_results_html.find("span").first().html(terms);
      this.search_results.append(no_results_html);
      $(".no-results").translate();
      return this.search_results;
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var first_active, next_sib;
      if (!this.result_highlight) {
        first_active = this.search_results.find("li.active-result").first();
        if (first_active) {
          this.result_do_highlight($(first_active));
        }
      } else if (this.results_showing) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          this.result_do_highlight(next_sib);
        }
      }
      if (!this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
        case 59:
        case 186:
		  if(this.search_field.val().length < 3){
			evt.preventDefault();
		  }
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        if (!this.f_width) {
          this.f_width = this.container.outerWidth();
        }
        if (w > this.f_width - 10) {
          w = this.f_width - 10;
        }
        return this.search_field.css({
          'width': w + 'px'
        });
      }
    };

    Chosen.prototype.generate_random_id = function() {
      var string;
      string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
      while ($("#" + string).length > 0) {
        string += this.generate_random_char();
      }
      return string;
    };

    return Chosen;

  })(AbstractChosen);

  root.Chosen = Chosen;

}).call(this);
ï»¿/**
 * åæ°éç½®
 * @module config
 * @class config
 */
define(function() {
	var config = {
        IS_TEST: zte_web_ui_is_test, //éç½®é¡¹å¨main.jsé¡¶é¨
        HAS_LOGIN: true,//æ¯å¦æç»å½é¡µé¢
        defaultRoute: '#login',
        LOGIN_SECURITY_SUPPORT: false, //æ¯å¦æ¯æç»å½å®å¨
        MAX_LOGIN_COUNT: 5,//æå¤§ç»å½æ¬¡æ°ï¼å¯ç è¾å¥éè¯¯æ¬¡æ°å°äºä»¥åä¼è´¦æ·å»ç»ä¸å®æ¶é´
        GUEST_HASH: ['#httpshare_guest'],
		THEME : 'mac',
		DEVICE: 'ufi/mf65',
        PASSWORD_ENCODE: false,//ç»å½å¯ç åWIFIå¯ç æ¯å¦å å¯
		HAS_MULTI_SSID: false,//å¤ssidåè½
        HAS_WIFI: true,  //æ¯å¦åå«wifiåè½
        HAS_BATTERY: true, //æ¯å¦æçµæ± 
        SHOW_MAC_ADDRESS: false, //æ¯å¦æ¾ç¤ºmacå°å
        IPV6_SUPPORT: true, //æ¯å¦æ¯æipv6
        USE_IPV6_INTERFACE:true,//ä½¿ç¨IPV6ç¸å³æ°æ¥å£ãä½¿ç¨æ¹æ³ï¼ä¾å¦ä½¿ç¨MF92æ¶ï¼è®¾ç½®ä¸ºfalseã
        MAX_STATION_NUMBER: 10, //WIFIæå¤§è¿æ¥æ°
        NETWORK_UNLOCK_SUPPORT:true,//æ¯å¦æ¯æè§£é
        WIFI_BAND_SUPPORT: false, //æ¯å¦æ¯æwifié¢æ®µè®¾ç½®
        WIFI_BANDWIDTH_SUPPORT: false, //æ¯å¦æ¯æé¢å¸¦å®½åº¦
        WIFI_SUPPORT_QR_CODE: false, //æ¯å¦æ¯æwifiäºç»´ç æ¾ç¤º
        UPGRADE_TYPE:"FOTA",//åå¼æ"NONE","OTA","FOTA","TWO_PORTION"
        ALREADY_NOTICE:false,//æ¯å¦å·²ç»æéï¼æå¨çº¿åçº§ä¿¡æ¯
        HAS_OTA_NEW_VERSION:false,//æ¯å¦æOTAåçº§çæ°çæ¬
        ALREADY_OTA_NOTICE:false,//æ¯å¦OTAåçº§æéè¿
        AP_STATION_SUPPORT:false,//æ¯å¦æ¯æAP Stationåè½
        DOUBLE_PDP_STACK_SUPPORT:true,
        AP_STATION_LIST_LENGTH:10,
        HAS_PHONEBOOK:true,//æ¯å¦æçµè¯æ¬åè½
        HAS_SMS:true,//æ¯å¦æç­ä¿¡åè½
        SMS_DATABASE_SORT_SUPPORT: false,//ç­ä¿¡æ¯å¦æ¯æDBæåº
        SHOW_UN_COMPLETE_CONCAT_SMS: true,//çº§èç­ä¿¡æªæ¥æ¶å®æ¯å¦æ¾ç¤ºç¸å³çº§èç­ä¿¡
        SMS_UNREAD_NUM_INCLUDE_SIM: false,//æªè¯»ç­æ¯æ°éæ¯å¦åå«SIMä¾§
        WEBUI_TITLE: '3G Hostless Modem', //titleéç½®, å·ä½åèåè®¾å¤ä¸çéç½®
        //modem_main_stateçä¸´æ¶ç¶æï¼ä¸è¬éè¦çé¢è½®è¯¢ç­å¾
        TEMPORARY_MODEM_MAIN_STATE:["modem_undetected", "modem_detected", "modem_sim_state", "modem_handover", "modem_imsi_lock", "modem_online", "modem_offline"],
        SHOW_APN_DNS:false,//APNè®¾ç½®é¡µé¢æ¯å¦æ¾ç¤ºDNSï¼ä¸æ¾ç¤ºådnsModeé»è®¤è®¾ç½®ä¸ºauto
		WIFI_SWITCH_SUPPORT: false,//æ°å¢ç¨äºMF70åå·Wi-Fiå¼å³
        CONTENT_MODIFIED:{
            modified:false,
            message:'leave_page_info',
            data:{},
            checkChangMethod:function () {
                return false;
            },
            callback:{ok:$.noop, no:function () {
                return true;
            }}//å¦ænoè¿åtrue,é¡µé¢åä¿æåç¶
        }, //å½åé¡µé¢åå®¹æ¯å¦å·²ç»ä¿®æ¹

        resetContentModifyValue:function () {
            this.CONTENT_MODIFIED.checkChangMethod = function () {
                return false;
            };
            this.CONTENT_MODIFIED.modified = false;
            this.CONTENT_MODIFIED.message = 'leave_page_info';
            this.CONTENT_MODIFIED.callback = {ok:$.noop, no:function () {
                return true;
            }};//å¦ænoè¿åtrue,é¡µé¢åä¿æåç¶
            this.CONTENT_MODIFIED.data = {};
        },

        /**
         * ç«¯å£è½¬åæå¤§è§åæ°
         * @attribute {Integer} portForwardMax
         */
        portForwardMax: 10,
        /**
         * åºåè®¾ç½®é»è®¤APNçä¸ªæ°
         * @attribute {Integer} defaultApnSize
         */
        defaultApnSize:1,
        /**
         * æå¤§APNä¸ªæ°
         * @attribute {Integer} maxApnNumber
         */
        maxApnNumber: 10,
		NETWORK_MODES : [ {
			name : '802.11 b/g/n',
			value : '4'
		}, {
			name : '802.11 n only',
			value : '2'
		} ],
		NETWORK_MODES_BAND : [ {
			name : '802.11 a only',
			value : '5'
		}, {
			name : '802.11 n only',
			value : '2'
		}, {
			name : '802.11 a/n',
			value : '4'
		} ],
		
    	AUTH_MODES : [  {
        	name: 'NO ENCRYPTION',
        	value: 'OPEN'
        }, {
            name : 'WPA2(AES)-PSK',
            value : 'WPA2PSK'
        },{
        	name : 'WPA-PSK/WPA2-PSK',
        	value : 'WPAPSKWPA2PSK'
        } ],
        AUTH_MODES_ALL : [  {
            name: 'NO ENCRYPTION',
            value: 'OPEN'
        }, {
            name : 'SHARED',
            value : 'SHARED'
        }, {
            name : 'WPA-PSK',
            value : 'WPAPSK'
        }, {
            name : 'WPA2-PSK',
            value : 'WPA2PSK'
        }, {
            name : 'WPA-PSK/WPA2-PSK',
            value : 'WPAPSKWPA2PSK'
        } ],

        LANGUAGES: [ { 
        	name: 'English',
        	value: 'en'
        }, {
    		name: 'ä¸­æ',
        	value: 'zh-cn'
        } ],
        
        AUTO_MODES: [ {
        	name: 'Automatic',
        	value: 'WCDMA_preferred'
        }, {
        	name: '3G Only',
        	value: 'Only_WCDMA'
        }, {
        	name: '2G Only',
        	value: 'Only_GSM'
        } ],
		APN_AUTH_MODES : [ {
			name : "NONE",
			value : "none"
		}, {
			name : "CHAP",
			value : "chap"
		}, {
			name : "PAP",
			value : "pap"
		} ],
        AD_IMAGES:[
            {url:"img/ad/ad1.jpg"},
            {url:"img/ad/ad2.jpg"},
            {url:"img/ad/ad3.jpg"},
            {url:"img/ad/ad4.jpg"}
        ],
        SMS_VALIDITY: [ {
            name: '12 hours',
            value: 'twelve_hours'
        }, {
            name: 'A day',
            value: 'one_day'
        }, {
            name: 'A week',
            value: 'one_week'
        }, {
            name: 'The longest period',
            value: 'largest'
        }],
        SLEEP_MODES : [ {
            name : "Always on",
            value : "-1"
        }, {
            name : "5 minutes",
            value : "5"
        }, {
            name : "10 minutes",
            value : "10"
        }, {
            name : "20 minutes",
            value : "20"
        }, {
            name : "30 minutes",
            value : "30"
        }, {
            name : "1 hour",
            value : "60"
        }, {
            name : "2 hours",
            value : "120"
        } ],

        FORWARD_PROTOCOL_MODES: [ {
            name : "TCP+UDP",
            value : "TCP&UDP"
        }, {
            name : "TCP",
            value : "TCP"
        }, {
            name : "UDP",
            value : "UDP"
        }],

        MAP_PROTOCOL_MODES: [ {
            name : "TCP+UDP",
            value : "TCP&UDP"
        }, {
            name : "TCP",
            value : "TCP"
        }, {
            name : "UDP",
            value : "UDP"
        }],

        FILTER_PROTOCOL_MODES: [ {
            name : "NONE",
            value : "None"
        }, {
            name : "TCP",
            value : "TCP"
        }, {
            name : "UDP",
            value : "UDP"
        }, {
            name : "ICMP",
            value : "ICMP"
        }],

        SD_SHARE_ENABLE: [ {
            name : "Enable",
            value : "1"
        }, {
            name : "Disable",
            value : "0"
        }],

        SD_FILE_TO_SHARE: [ {
            name : "entire_sd_card",
            value : "1"
        }, {
            name : "custom_setting",
            value : "0"
        }],

        SD_ACCESS_TYPE: [ {
            name : "entire_sd_card",
            value : "1"
        }, {
            name : "custom_setting",
            value : "0"
        }],

        DLNA_LANGUAGES: [ {
            name: 'english',
            value: 'english'
        }, {
            name: 'chinese',
            value: 'chinese'
        } ],

        /**
         * RJ45 /rj45/ç®å½
         * @attribute {String} SD_BASE_PATH
         */
        EthernetDialMode : [  {
            name: 'PPPOE',
            value: 'pppoe'
        }, {
            name : 'Static',
            value : 'static'
        },{
            name : 'DHCP',
            value : 'dhcp'
        } ],

    	/**
    	 * SD å¡æ ¹ç®å½
    	 * @attribute {String} SD_BASE_PATH 
    	 */
        SD_BASE_PATH: '/mmc2',

    	/**
    	 * æ°æ®åºä¸­å¨é¨çç­æ¶æ¯
    	 * @attribute {Array} dbMsgs 
    	 */
    	dbMsgs : [],
    	/**
    	 * ç»è§£æå³èåçææç­æ¶æ¯
    	 * @attribute {Array} listMsgs 
    	 */
    	listMsgs : [],

    	/**
    	 * å½åèå¤©å¯¹è±¡çææºå·
    	 * @attribute {String} currentChatObject 
    	 */
    	currentChatObject: null,
    	/**
    	 * ç­æ¶æ¯æå¤§ç¼å·
    	 * @attribute {Integer} maxId 
    	 */
    	smsMaxId : 0,
    	/**
    	 *  çµè¯æ¬è®°å½ 
    	 * @attribute {Array} phonebook  
    	 * */
    	phonebook : [],
        /**
         *  ç¼å­ç­ä¿¡åå§åç¶æ
         * @attribute {Boolean} smsIsReady
         * */
        smsIsReady: false,
        /**
         * å½å®¶ç æè¿°ç±»å
         * @attribute {JSON} defaultApnSize
         * @example
         * 2412-2462   1
		 * 2467-2472   2
		 * 2312-2372   4
         */
        countryCodeType : {
        	world: 3,
        	mkkc: 3,
        	apld: 7,
        	etsic: 3,
        	fcca: 1
        },
        
        /**
         * å½å®¶ç ä¸ç±»åå¹éè¡¨
         * @attribute {Map} countryCode
         */
        countryCode: {
            world: [ "AL", "DZ", "AR", "AM", "AU", "AT", "AZ", "BH", "BY",
                "BE", "BA", "BR", "BN", "BG", "CL", "CN", "CR", "HR", "CY",
                "CZ", "DK", "EC", "EG", "SV", "EE", "FI", "FR", "F2", "GE",
                "DE", "GR", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IE",
                "IL", "IT", "JM", "JO", "KZ", "KE", "KP", "KR", "KW", "LV",
                "LB", "LI", "LT", "LU", "MO", "MK", "MY", "MT", "MC", "MA",
                "NL", "AN", "NO", "OM", "PK", "PE", "PH", "PL", "PT", "QA",
                "RO", "RU", "SA", "CS", "SG", "SK", "SI", "ZA", "ES", "LK",
                "SE", "CH", "SY", "TH", "TT", "TN", "TR", "UA", "AE", "GB",
                "UY", "VN", "YE", "ZW" ],
            mkkc: [ "JP" ],
            apld: [],
            etsic: [ "BZ", "BO", "NZ", "VE" ],
            fcca: [ "CA", "CO", "DO", "GT", "MX", "PA", "PR", "TW", "US", "UZ" ]
        },
        countryCode_5g: {
            //88 countries of worldã36 40 44 48ã
            one: {
                codes: [ "AL", "AI", "AW", "AT", "BY", "BM", "BA", "BW", "IO", "BG",
                    "CV", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "GF", "PF",
                    "TF", "GI", "DE", "GR", "GP", "GG", "HU", "IS", "IE", "IT",
                    "KE", "LA", "LV", "LS", "LI", "LT", "LU", "MK", "MT", "IM",
                    "MQ", "MR", "MU", "YT", "MC", "ME", "MS", "NL", "AN", "NO",
                    "OM", "PL", "PT", "RE", "RO", "SM", "SN", "RS", "SK", "SI",
                    "ZA", "ES", "SE", "CH", "TC", "UG", "GB", "VG", "WF", "ZM",
                    "AF", "JO", "MA", "EH", "EU", "DZ", "IL", "MX", "PM", "TN",
                    "TR", "JP" ],
                channels: [36, 40, 44, 48]},
            //60 countrys of worldã36 40 44 48 149 153 157 161 165ã
            two: {
                codes: [ "AS", "AG", "AZ", "BR", "KH", "KY", "CO", "CR", "DM", "DO",
                    "EC", "GH", "GD", "HK", "KZ", "KI", "FM", "MZ", "NA", "NZ",
                    "NI", "NE", "PW", "PE", "PH", "PR", "VC", "TH", "TT", "UY",
                    "ZW", "AU", "BH", "BB", "CA", "CL", "CX", "EG", "SV", "GT",
                    "HT", "IN", "MY", "NF", "PA", "PG", "SG", "US", "VN" ],
                channels: [36, 40, 44, 48, 149, 153, 157, 161, 165]},
            //9 countrys of worldã149 153 157 161ã
            three: {
                codes: ["CU", "IR", "KR", "SY", "LB", "MW", "MO", "QA"],
                channels: [149, 153, 157, 161]},
            //12 countrys of worldã149 153 157 161 165ã
            four: {
                codes: [ "BD", "BF", "CN", "HN", "JM", "PK", "PY", "KN", "AR", "TW", "NG" ],
                channels: [149, 153, 157, 161, 165]},
            //1 country of worldã36 40 44 48 149 153 157 161ã
            five: {
                codes: [ "SA" ],
                channels: [36, 40, 44, 48, 149, 153, 157, 161]}
        },

        /**
         * å½å®¶ç ä¸è¯­è¨å¹éè¡¨
         * @attribute {Map} countries
         */
        countries: {
            NONE: "NONE",
            AL: "SHQIPERI",
            DZ: "Ø§ÙØ¬Ø²Ø§Ø¦Ø±",
            AR: "ARGENTIA",
            AM: "ÕÔ±ÕÔ±ÕÕÔ±Õ",
            AU: "AUSTRALIA",
            AT: "ÃSTERREICH",
            AZ: "AZÆRBAYCAN",
            BH: "Ø§ÙØ¨Ø­Ø±ÙÙ",
            BY: "ÐÐÐÐÐ Ð£Ð¡Ð¬",
            BE: "BELGIÃ",
            BA: "ÐÐÐ¡ÐÐ Ð Ð¥ÐÐ Ð¦ÐÐÐÐÐÐÐ",
            BR: "BRASIL",
            BN: "BRUNEI DARUSSALAM",
            BG: "ÐÐªÐÐÐÐ ÐÐ¯",
            CL: "CHILE",
            CN: "ä¸­å½",
            CR: "COSTA RICA",
            HR: "HRVATSKA",
            CY: "ÎÎÎ Î¡ÎÎ£",
            CZ: "ÄESKÃ REPUBLIKA",
            DK: "DANMARK",
            EC: "ECUADOR",
            EG: "ÙØµØ±",
            SV: "EL SALVADOR",
            EE: "EESTI",
            FI: "SUOMI",
            FR: "FRANCE",
            F2: "FRANCE RESERVES",
            GE: "á¡áá¥áá ááááá",
            DE: "DEUTSCHLAND",
            GR: "ÎÎÎÎÎÎ",
            HN: "HONDURAS",
            HK: "é¦æ¸¯",
            HU: "MAGYARORSZÃG",
            IS: "ÃSLAND",
            IN: "INDIA",
            ID: "INDONESIA",
            IR: "Ø§ÛØ±Ø§ÙØ Ø¬ÙÙÙØ±Û Ø§Ø³ÙØ§ÙÛ",
            IE: "ÃIRE",
            IL: "Ø¥Ø³Ø±Ø§Ø¦ÙÙ",
            IT: "ITALIA",
            JM: "JAMAICA",
            JO: "Ø§ÙØ£Ø±Ø¯Ù",
            KZ: "ÐÐÐÐÐ¥Ð¡Ð¢ÐÐ",
            KE: "KENYA",
            KP: "ì¡°ì ë¯¼ì£¼ì£¼ìì¸ë¯¼ê³µíêµ­",
            KW: "Ø§ÙÙÙÙØª",
            LV: "LATVIJA",
            LB: "ÙØ¨ÙØ§Ù",
            LI: "LIECHTENSTEIN",
            LT: "LIETUVA",
            LU: "LUXEMBOURG",
            MO: "æ¾³é",
            MK: "ÐÐÐÐÐÐÐÐÐÐ",
            MY: "MALAYSIA",
            MT: "MALTA",
            MC: "MONACO",
            MA: "Ø§ÙÙØºØ±Ø¨",
            NL: "NEDERLAND",
            AN: "NETHERLANDS ANTILLES",
            NO: "NORGE",
            OM: "Ø³ÙØ·ÙØ© Ø¹ÙØ§Ù",
            PK: "PAKISTAN",
            PE: "PERÃ",
            PH: "PHILIPPINES",
            PL: "POLSKA",
            PT: "PORTUGAL",
            QA: "ÙØ·Ø±",
            RO: "ROMÃNIA",
            RU: "Ð Ð¾ÑÑÐ¸Ð¹ÑÐºÐ°Ñ Ð¤ÐµÐ´ÐµÑÐ°ÑÐ¸Ñ",
            SA: "Ø§ÙØ³Ø¹ÙØ¯ÙØ©",
            CS: "Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°",
            SG: "SINGAPORE",
            SK: "SLOVENSKÃ REPUBLIKA",
            SI: "SLOVENIJA",
            ZA: "SOUTH AFRICA",
            ES: "ESPAÃA",
            LK: "SRI LANKA",
            SE: "SVERIGE",
            CH: "SCHWEIZ",
            SY: "Ø§ÙØ¬ÙÙÙØ±ÙØ© Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙØ³ÙØ±ÙØ©",
            TH: "à¸à¸£à¸°à¹à¸à¸¨à¹à¸à¸¢",
            TT: "TRINIDAD AND TOBAGO",
            TN: "ØªÙÙØ³",
            TR: "TÃRKÄ°YE",
            UA: "Ð£ÐºÑÐ°ÑÐ½Ð°",
            AE: "Ø§ÙØ¥ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©",
            GB: "UNITED KINGDOM",
            UY: "URUGUAY",
            VN: "VIá»T NAM",
            YE: "Ø§ÙÙÙÙ",
            ZW: "ZIMBABWE",
            JP: "æ¥æ¬",
            BZ: "BELIZE",
            BO: "BOLIVIA",
            NZ: "NEW ZEALAND",
            VE: "REPÃBLICA BOLIVARIANA DE VENEZUELA",
            CA: "CANADA",
            CO: "COLOMBIA",
            DO: "REPÃBLICA DOMINICANA",
            GT: "GUATEMALA",
            MX: "MEXICO",
            PA: "PANAMÃ",
            PR: "PUERTO RICO",
            TW: "å°ç£",
            US: "UNITED STATES",
            UZ: "Oâzbekiston"
        },
        countries_5g: {
            NONE: "NONE",
            AL: "SHQIPERI",
            AI: "ANGUILLA",
            AW: "ARUBA",
            AT: "ÃSTERREICH",
            BY: "ÐÐÐÐÐ Ð£Ð¡Ð¬",
            BM: "BERMUDA",
            BA: "ÐÐÐ¡ÐÐ Ð Ð¥ÐÐ Ð¦ÐÐÐÐÐÐÐ",
            BW: "BOTSWANA",
            IO: "BRITISH INDIAN OCEAN TERRITORY",
            BG: "ÐÐªÐÐÐÐ ÐÐ¯",
            CV: "CAPE VERDE",
            HR: "HRVATSKA",
            CY: "ÎÎÎ Î¡ÎÎ£",
            CZ: "ÄESKÃ REPUBLIKA",
            DK: "DANMARK",
            EE: "EESTI",
            FI: "SUOMI",
            FR: "FRANCE",
            GF: "GUYANE FRANÃAISE",
            PF: "POLYNÃSIE FRANÃAISE",
            TF: "Terres australes franÃ§aises",
            GI: "GIBRALTAR",
            DE: "DEUTSCHLAND",
            GR: "ÎÎÎÎÎÎ",
            GP: "GUADELOUPE",
            GG: "GUERNSEY",
            HU: "MAGYARORSZÃG",
            IS: "ÃSLAND",
            IE: "ÃIRE",
            IT: "ITALIA",
            KE: "KENYA",
            LV: "LATVIJA",
            LS: "LESOTHO",
            LI: "LIECHTENSTEIN",
            LT: "LIETUVA",
            LU: "LUXEMBOURG",
            MK: "ÐÐÐÐÐÐÐÐÐÐ",
            MT: "MALTA",
            IM: "MAN, ISLE OF",
            MQ: "MARTINIQUE",
            MR: "MAURITANIE",
            MU: "MAURITIUS",
            YT: "MAYOTTE",
            MC: "MONACO",
            ME: "Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°",
            MS: "MONTSERRAT",
            NL: "NEDERLAND",
            AN: "NETHERLANDS ANTILLES",
            NO: "NORGE",
            OM: "Ø³ÙØ·ÙØ© Ø¹ÙØ§Ù",
            PL: "POLSKA",
            PT: "PORTUGAL",
            RE: "RÃ©union",
            RO: "ROMÃNIA",
            SM: "SAN MARINO",
            SN: "SÃ©nÃ©gal",
            RS: "Ð¡ÑÐ±Ð¸ÑÐ°",
            SK: "SLOVENSKÃ REPUBLIKA",
            SI: "SLOVENIJA",
            ZA: "SOUTH AFRICA",
            ES: "ESPAÃA",
            SE: "SVERIGE",
            CH: "SCHWEIZ",
            TC: "TURKS AND CAICOS ISLANDS",
            UG: "UGANDA",
            GB: "UNITED KINGDOM",
            VG: "VIRGIN ISLANDS, BRITISH",
            WF: "WALLIS ET FUTUNA",
            ZM: "ZAMBIA",
            AF: "Ø§ÙØºØ§ÙØ³ØªØ§Ù",
            JO: "Ø§ÙØ£Ø±Ø¯Ù",
            MA: "Ø§ÙÙØºØ±Ø¨",
            EH: "Ø§ÙØµØ­Ø±Ø§Ø¡ Ø§ÙØºØ±Ø¨ÙØ©â",
            EU: "EUROPEAN UNION",
            DZ: "Ø§ÙØ¬Ø²Ø§Ø¦Ø±",
            IL: "Ø¥Ø³Ø±Ø§Ø¦ÙÙ",
            MX: "MEXICO",
            PM: "SAINT PIERRE ET MIQUELON",
            TN: "ØªÙÙØ³",
            TR: "TÃRKÄ°YE",
            JP: "æ¥æ¬",
            AS: "AMERICAN SAMOA",
            AG: "ANTIGUA AND BARBUDA",
            AZ: "AZÆRBAYCAN",
            BR: "BRASIL",
            KH: "CAMBODIA",
            KY: "CAYMAN ISLANDS",
            CO: "COLOMBIA",
            CR: "COSTA RICA",
            DM: "DOMINICA",
            DO: "REPÃBLICA DOMINICANA",
            EC: "ECUADOR",
            GH: "GHANA",
            GD: "GRENADA",
            HK: "é¦æ¸¯",
            KZ: "ÐÐÐÐÐ¥Ð¡Ð¢ÐÐ",
            KI: "KIRIBATI",
            FM: "MICRONESIA, FEDERATED STATES OF",
            MZ: "MOÃAMBIQUE",
            NA: "NAMIBIA",
            NZ: "NEW ZEALAND",
            NI: "NICARAGUA",
            NE: "NIGER",
            PW: "PALAU",
            PE: "PERÃ",
            PH: "PHILIPPINES",
            PR: "PUERTO RICO",
            VC: "SAINT VINCENT AND THE GRENADINES",
            TH: "à¸à¸£à¸°à¹à¸à¸¨à¹à¸à¸¢",
            TT: "TRINIDAD AND TOBAGO",
            UY: "URUGUAY",
            ZW: "ZIMBABWE",
            AU: "AUSTRALIA",
            BH: "Ø§ÙØ¨Ø­Ø±ÙÙ",
            BB: "BARBADOS",
            CA: "CANADA",
            CL: "CHILE",
            CX: "CHRISTMAS ISLAND",
            EG: "ÙØµØ±",
            SV: "EL SALVADOR",
            GT: "GUATEMALA",
            HT: "HAÃTI",
            IN: "INDIA",
            MY: "MALAYSIA",
            NF: "NORFOLK ISLAND",
            PA: "PANAMÃ",
            PG: "PAPUA NEW GUINEA",
            SG: "SINGAPORE",
            US: "UNITED STATES",
            VN: "VIá»T NAM",
            CU: "CUBA",
            IR: "Ø§ÛØ±Ø§Ù",
            KR: "íêµ­",
            SY: "SYRIAN ARAB REPUBLIC",
            LB: "ÙØ¨ÙØ§Ù",
            MW: "MALAWI",
            MO: "æ¾³é",
            QA: "ÙØ·Ø±",
            BF: "BURKINA FASO",
            CN: "ä¸­å½",
            HN: "HONDURAS",
            JM: "JAMAICA",
            PK: "PAKISTAN",
            PY: "PARAGUAY",
            KN: "SAINT KITTS AND NEVIS",
            AR: "ARGENTIA",
            TW: "å°ç£",
            NG: "NIGERIA",
            SA: "Ø§ÙØ³Ø¹ÙØ¯ÙØ©"
        }
	};

    require(['config/' + config.DEVICE + '/config'], function(otherConf) {
        $.extend(config, otherConf);
    });

	return config;
});define(function() {
    var config = {
		HAS_MULTI_SSID: false,//ï¿½ï¿½ssidï¿½ï¿½ï¿½ï¿½
        IPV6_SUPPORT: false,
        WIFI_BAND_SUPPORT: false,
        WIFI_BANDWIDTH_SUPPORT: false,
        AP_STATION_SUPPORT: false,
		PASSWORD_ENCODE: true,
        DOUBLE_PDP_STACK_SUPPORT:false,
        WEBUI_TITLE: 'Telstra Pre-Paid 3G Wi-Fi',
        SHOW_APN_DNS:true,
        HAS_BATTERY: false, //æ¯å¦æçµæ± 
        UPGRADE_TYPE:"TWO_PORTION",
        MAX_STATION_NUMBER:5,
        HAS_PHONEBOOK:true,//æ¯å¦æçµè¯æ¬åè½
        AUTO_MODES: [ {
            name: 'Automatic',
            value: 'NETWORK_auto'
        }, {
            name: '3G Only',
            value: 'Only_WCDMA'
        }, {
            name: '2G Only',
            value: 'Only_GSM'
        }],
        NETWORK_MODES : [ {
            name : '802.11 b/g/n',
            value : '4'
        }, {
            name : '802.11 b/g',
            value : '3'
        },
        {
            name : '802.11 n only',
            value : '2'
        },{
            name : '802.11 b only',
            value : '0'
        },{
            name : '802.11 g only',
            value : '1'
        }]
    };

    return config;
});
<div class="form-body">
    <div class="form-title" trans='device_info'></div>
    <div class="content">
        <div class="row-fluid">
            <label class="span4 side-right" trans="sim_serial_number"></label>
            <label class="span8" data-bind="text: simSerialNumber"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="imei"></label>
            <label class="span8" data-bind="text: imei"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="imsi"></label>
            <label class="span8" data-bind="text: imsi"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="signal_strength_label"></label>
            <label class="span8" data-bind="text: signal"></label>
        </div>
        <div data-bind="visible: hasWifi">
            <div data-bind="visible: !showMssid()">
                <div class="row-fluid modify_link">
                    <label class="span4 side-right" trans="network_name"></label>
                    <span class="span8">
                        <span data-bind="text: ssid"></span>
                        <a href="#wifi_basic" trans="modify"></a>
                    </span>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" trans="max_access_num"></label>
                    <label class="span8" data-bind="text: max_access_num"></label>
                </div>
            </div>
            <div data-bind="visible: showMssid()">
                <div class="row-fluid modify_link">
                    <label class="span4 side-right" trans="network_name_ssid1"></label>
                    <span class="span8" >
                        <span data-bind="text: ssid"></span>
                        <a href="#wifi_basic" trans="modify"></a>
                    </span>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" trans="max_access_num_ssid1"></label>
                    <label class="span8" data-bind="text: max_access_num"></label>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" trans="network_name_ssid2"></label>
                    <label class="span8"  data-bind="text: m_ssid"></label>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" trans="max_access_num_ssid2"></label>
                    <label class="span8" data-bind="text: m_max_access_num"></label>
                </div>
            </div>
            <div class="row-fluid modify_link hide">
                <label class="span4 side-right" trans="wifi_range"></label>
                <span class="span8" >
                    <span data-bind="attr:{trans: wifiRange}"></span>
                    <a href="#sleep_mode" trans="modify"></a>
                </span>
            </div>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="lan_domain"></label>
            <label class="span8" data-bind="text: lanDomain"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="ip_address"></label>
            <label class="span8" data-bind="text: ipAddress"></label>
        </div>
        <div class="row-fluid" data-bind="visible: showMacAddress">
            <label class="span4 side-right" trans="mac_address"></label>
            <label class="span8" data-bind="text: macAddress"></label>
        </div>
        <div class="row-fluid" data-bind="visible: showIpv4WanIpAddr">
            <label class="span4 side-right" trans="wan_ip_address"></label>
            <label class="span8" data-bind="text: wanIpAddress"></label>
        </div>
        <div class="row-fluid" data-bind="visible: showIpv6WanIpAddr">
            <label class="span4 side-right" trans="ipv6_wan_ip_address"></label>
            <label class="span8" data-bind="text: ipv6WanIpAddress"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="software_version"></label>
            <label class="span8" data-bind="text: sw_version"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="firmware_version"></label>
            <label class="span8" data-bind="text: fw_version"></label>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right" trans="hardware_version"></label>
            <label class="span8" data-bind="text: hw_version"></label>
        </div>
        <div data-bind="visible: isHasEthernet">
            <div class="row-fluid">
                <label class="span4 side-right" trans="ethernet_ip_address"></label>
                <label class="span8" data-bind="text: cable_wan_ipaddr"></label>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="ethernet_subnet_mask"></label>
                <label class="span8" data-bind="text: cable_wan_netmask"></label>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="ethernet_gateway"></label>
                <label class="span8" data-bind="text: cable_wan_gateway"></label>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="ethernet_prefer_dns"></label>
                <label class="span8" data-bind="text: cable_prefer_dns"></label>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="ethernet_standby_dns"></label>
                <label class="span8" data-bind="text: cable_standby_dns"></label>
            </div>
        </div>
    </div>
</div>
ï»¿define([ 'jquery', 'service', 'knockout', 'config/config' ], function ($, service, ko, config) {

    function DeviceInformationViewModel() {
        var self = this;
        var data = service.getDeviceInfo();
        self.ssid = ko.observable(verifyDeviceInfo(data.ssid));
        self.m_ssid = ko.observable(verifyDeviceInfo(data.m_ssid));
        self.m_max_access_num = ko.observable(verifyDeviceInfo(data.m_max_access_num));
        self.showMssid = ko.observable(data.multi_ssid_enable == "1" && config.HAS_MULTI_SSID);
        self.ipAddress = ko.observable(verifyDeviceInfo(data.ipAddress));
        self.wanIpAddress = ko.observable();
        self.ipv6WanIpAddress = ko.observable();
        self.macAddress = ko.observable(verifyDeviceInfo(data.macAddress));
        self.simSerialNumber = ko.observable(verifyDeviceInfo(data.simSerialNumber));
        self.lanDomain = ko.observable(verifyDeviceInfo(data.lanDomain));
        self.imei = ko.observable(verifyDeviceInfo(data.imei));
        self.sw_version = ko.observable(verifyDeviceInfo(data.web_version));
        self.fw_version = ko.observable(verifyDeviceInfo(data.fw_version));
        self.hw_version = ko.observable(verifyDeviceInfo(data.hw_version));
        self.max_access_num = ko.observable(verifyDeviceInfo(data.max_access_num));
        self.showMacAddress = ko.observable(config.SHOW_MAC_ADDRESS);
        self.hasWifi = ko.observable(config.HAS_WIFI);
        var ipv6Mode = data.ipv6PdpType.toLowerCase().indexOf("v6") > 0;
        //self.showIpv6WanIpAddr = ko.observable(config.IPV6_SUPPORT && ipv6Mode);
        self.showIpv6WanIpAddr = ko.observable();
        self.showIpv4WanIpAddr = ko.observable();
        self.imsi = ko.observable(verifyDeviceInfo(data.imsi));
        self.signal = ko.observable(signalFormat(data.signal));
        //ethernet info
        self.isHasEthernet = ko.observable(data.cur_netcable_mode == "1");
        self.cable_wan_ipaddr = ko.observable(data.cable_wan_ipaddr);
        self.cable_wan_netmask = ko.observable(data.cable_wan_netmask);
        self.cable_wan_gateway = ko.observable(data.cable_wan_gateway);
        self.cable_prefer_dns = ko.observable(data.cable_prefer_dns);
        self.cable_standby_dns = ko.observable(data.cable_standby_dns);

        if (config.IPV6_SUPPORT) {//æ¯æIPV6
            if (data.pdpType == "IP") {//ipv4
                self.showIpv6WanIpAddr(false);
                self.showIpv4WanIpAddr(true);
            } else if (ipv6Mode) {//ipv6(&ipv4)
                if (data.ipv6PdpType == "IPv6") {
                    self.showIpv6WanIpAddr(true);
                    self.showIpv4WanIpAddr(false);
                } else {
                    self.showIpv6WanIpAddr(true);
                    self.showIpv4WanIpAddr(true);
                }
            }
        } else {//ä¸æ¯æIPV6
            self.showIpv6WanIpAddr(false);
            self.showIpv4WanIpAddr(true);
        }
        //èç½æ¶æ¾ç¤ºä¸ç½å°åï¼å¦åä¸ºç©º
        var connectStatus = getConnectStatus(data.connectStatus);
        if (connectStatus == 1) {
            self.wanIpAddress(verifyDeviceInfo(data.wanIpAddress));
            self.ipv6WanIpAddress("â â");
        } else if (connectStatus == 2) {
            self.wanIpAddress("â â");
            self.ipv6WanIpAddress(verifyDeviceInfo(data.ipv6WanIpAddress));
        } else if (connectStatus == 3) {
            self.wanIpAddress(verifyDeviceInfo(data.wanIpAddress));
            self.ipv6WanIpAddress(verifyDeviceInfo(data.ipv6WanIpAddress));
        } else {
            self.wanIpAddress("â â");
            self.ipv6WanIpAddress("â â");
        }

        self.wifiRange = ko.observable("wifi_" + data.wifiRange);
    }

    function verifyDeviceInfo(field) {
        if (field && field != "") {
            return field;
        } else {
            return "â â";
        }
    }

    function getConnectStatus(status) {
        if (status == "ppp_disconnected" || status == "ppp_connecting" || status == "ppp_disconnecting") {
            return 0;
        } else if (status == "ppp_connected") {
            return 1;
        } else if (status == "ipv6_connected") {
            return 2;
        } else if (status == "ipv4_ipv6_connected") {
            return 3;
        }
    }

    function signalFormat(signal) {
        if (signal) {
            return signal + " dBm";
        } else {
            return "â â";
        }
    }

    function init() {
        var container = $('#container')[0];
        ko.cleanNode(container);
        var vm = new DeviceInformationViewModel();
        ko.applyBindings(vm, container);

        addInterval(function () {
            service.getDeviceInfo({}, function (data) {
                vm.signal(signalFormat(data.signal));
            });
        }, 1000);
    }

    return {
        init:init
    };
});<form id="dmzSettingForm">
    <div class="form-body">
        <div class="form-title" trans="dmz_setting"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="dmz_setting"></label>
                <div class="span8">
                <input type="radio" name="dmzGrp" id="dmzEnable" data-bind="checked: dmzSetting" value="1"/>
                    <label for="dmzEnable" trans="enable"></label>
                <input type="radio" name="dmzGrp" id="dmzDisable" data-bind="checked: dmzSetting" value="0"/>
                    <label for="dmzDisable" trans="disable"></label>
                </div>
            </div>
            <div class="row-fluid" data-bind='visible: dmzSetting() == "1"'>
                <label class="span4 side-right" for="txtIpAddress" trans="ip_address"></label>
                <div class="span8">
                <input id="txtIpAddress" name="txtIpAddress"  type="text" data-bind="value: ipAddress, valueUpdate: 'keypress'" class="required" maxlength="15"/>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="dmz_note_info"></li>
                <li trans="dmz_note_function"></li>
            </ul>
        </div>
    </div>
</form>/**
 * @module dmz setting
 * @class dmz setting
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    /**
     * system dmz setting VM
     * @class DmzSettingVM
     */
	function DmzSettingVM() {
        var self = this;
        var info = getDmzSetting();

        self.dmzSetting = ko.observable(info.dmzSetting);
        self.ipAddress = ko.observable(info.ipAddress);

        self.clear = function() {
            init();
        };

        self.save = function() {
            showLoading();
            var params = {};
            params.dmzSetting = self.dmzSetting();
            params.ipAddress = self.ipAddress();
            service.setDmzSetting(params, function(result) {
                if (result.result == "success") {
                    self.clear();
                    successOverlay();
                } else {
                    errorOverlay();
                }
            });
        };
    }

    /**
     * è·ådmz ä¿¡æ¯
     * @method getDmzSetting
     */
    function getDmzSetting() {
        return service.getDmzSetting();
    }

    /**
     * åå§åDmzSettingVM model
     * @method init
     */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new DmzSettingVM();
		ko.applyBindings(vm, container[0]);
        $('#dmzSettingForm').validate({
            submitHandler : function() {
                vm.save();
            },
            rules: {
                txtIpAddress: 'dmz_ip_check'
            }
        });
	}

	return {
		init : init
	};
});<xml xmlns:o="urn:schemas-microsoft-com:office:office">
 <o:MainFile HRef="../MF65%20manual_2.2.htm"/>
 <o:File HRef="themedata.thmx"/>
 <o:File HRef="colorschememapping.xml"/>
 <o:File HRef="image001.png"/>
 <o:File HRef="image002.gif"/>
 <o:File HRef="image003.png"/>
 <o:File HRef="image004.gif"/>
 <o:File HRef="image005.png"/>
 <o:File HRef="image006.jpg"/>
 <o:File HRef="image007.png"/>
 <o:File HRef="image008.jpg"/>
 <o:File HRef="image009.png"/>
 <o:File HRef="image010.jpg"/>
 <o:File HRef="image011.png"/>
 <o:File HRef="image012.jpg"/>
 <o:File HRef="image013.png"/>
 <o:File HRef="image014.jpg"/>
 <o:File HRef="image015.png"/>
 <o:File HRef="image016.jpg"/>
 <o:File HRef="image017.png"/>
 <o:File HRef="image018.jpg"/>
 <o:File HRef="image019.png"/>
 <o:File HRef="image020.jpg"/>
 <o:File HRef="image021.png"/>
 <o:File HRef="image022.jpg"/>
 <o:File HRef="image023.png"/>
 <o:File HRef="image024.jpg"/>
 <o:File HRef="image025.png"/>
 <o:File HRef="image026.jpg"/>
 <o:File HRef="image027.png"/>
 <o:File HRef="image028.jpg"/>
 <o:File HRef="image029.png"/>
 <o:File HRef="image030.gif"/>
 <o:File HRef="image031.png"/>
 <o:File HRef="image032.jpg"/>
 <o:File HRef="image033.png"/>
 <o:File HRef="image034.jpg"/>
 <o:File HRef="image035.png"/>
 <o:File HRef="image036.jpg"/>
 <o:File HRef="image037.png"/>
 <o:File HRef="image038.gif"/>
 <o:File HRef="image039.png"/>
 <o:File HRef="image040.jpg"/>
 <o:File HRef="image041.png"/>
 <o:File HRef="image042.jpg"/>
 <o:File HRef="image043.png"/>
 <o:File HRef="image044.jpg"/>
 <o:File HRef="image045.png"/>
 <o:File HRef="image046.jpg"/>
 <o:File HRef="image047.png"/>
 <o:File HRef="image048.jpg"/>
 <o:File HRef="image049.png"/>
 <o:File HRef="image050.jpg"/>
 <o:File HRef="image051.png"/>
 <o:File HRef="image052.jpg"/>
 <o:File HRef="image053.png"/>
 <o:File HRef="image054.jpg"/>
 <o:File HRef="image055.png"/>
 <o:File HRef="image056.jpg"/>
 <o:File HRef="image057.png"/>
 <o:File HRef="image058.jpg"/>
 <o:File HRef="image059.png"/>
 <o:File HRef="image060.jpg"/>
 <o:File HRef="image061.png"/>
 <o:File HRef="image062.jpg"/>
 <o:File HRef="image063.png"/>
 <o:File HRef="image064.jpg"/>
 <o:File HRef="image065.png"/>
 <o:File HRef="image066.jpg"/>
 <o:File HRef="image067.png"/>
 <o:File HRef="image068.jpg"/>
 <o:File HRef="image069.png"/>
 <o:File HRef="image070.jpg"/>
 <o:File HRef="image071.gif"/>
 <o:File HRef="image072.png"/>
 <o:File HRef="image073.jpg"/>
 <o:File HRef="image074.jpg"/>
 <o:File HRef="image075.jpg"/>
 <o:File HRef="header.htm"/>
 <o:File HRef="filelist.xml"/>
</xml>/**
 * HOMEæ¨¡å
 * @module Home
 * @class Home
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore', 'status/statusBar' ],

function($, ko, config, service, _, statusBar) {
    /**
     * è·åç½ç»ãSIMãWIFIç­ç¶æ
     * @method getStatusInfo
     */
    var getStatusInfo = function () {
        return service.getStatusInfo();
    };
    var macDevice = [];
    /**
	 * connection information ViewModel
	 * 
	 * @class connectInfoVM
	 */
	function connectInfoVM() {
		var self = this;
		/*var info = service.getConnectionInfo();*/
        var statusInfo= getStatusInfo();
	self.connectStatus = ko.observable(statusInfo.connectStatus);
		if (checkConnectedStatus(statusInfo.connectStatus)) {
			self.speedTime = ko.observable(transUnit(parseInt(statusInfo.data_counter.currentReceived, 10) + parseInt(statusInfo.data_counter.currentSent, 10), false)+" / "+transSecond2Time(statusInfo.data_counter.currentConnectedTime));
            var networkTypeTmp = statusInfo.networkType.toLowerCase();
            var type_2g = ["GSM", "GPRS", "EDGE"];
            var type_3g = ["UMTS", "WCDMA"];
            var type_h = ["HSUPA", "HSPA+","HSDPA"];
            if($.inArray(statusInfo.networkType.toUpperCase(),type_h)!= -1){
                self.connect_Status = ko.observable($.i18n.prop("h_connected"));
            }else if($.inArray(statusInfo.networkType.toUpperCase(),type_3g)!= -1){
                self.connect_Status = ko.observable($.i18n.prop("3g_connected"));
            }else if($.inArray(statusInfo.networkType.toUpperCase(),type_2g)!= -1){
                self.connect_Status = ko.observable($.i18n.prop("2g_connected"));
            }else if (networkTypeTmp == ''||networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service'||networkTypeTmp == 'limited service' || networkTypeTmp == 'no service') {
                if(networkTypeTmp==""||networkTypeTmp=="limited service"){
                    networkTypeTmp = "limited_service";
                }else if(networkTypeTmp=="no service"){
                    networkTypeTmp = "no_service";
                }
                self.connect_Status = ko.observable($.i18n.prop("network_type_" + networkTypeTmp));
            }
		} else {
			self.speedTime=ko.observable("0MB / "+transSecond2Time(0));
            if(statusInfo.connectStatus == 'ppp_disconnected'){
                self.connect_Status = ko.observable($.i18n.prop("disconnected"));
            } else if(self.connectStatus() == 'ppp_connecting'){
                self.connect_Status = ko.observable($.i18n.prop("connecting"));
            } else {
                self.connect_Status = ko.observable($.i18n.prop("disconnecting"));
            }
		}
        var smsInfo = service.getSmsCapability();
        self.messageInfo = ko.observable(statusInfo.smsUnreadCount+" / "+(smsInfo.nvUsed+smsInfo.simUsed));
        self.showEntrance = ko.observable(false);
        self.showSdCardTitle = ko.observable();
        self.hasWifi = ko.observable(config.HAS_WIFI);
		self.transText = ko.dependentObservable(function() {
			if (checkConnectedStatus(self.connectStatus())) {
                $("#homebtn").attr("class","homebtn_connect");
                return "disconnect";
			}else if(checkConnectingStatus(self.connectStatus())){
                return "connecting";
            }else if(checkDisconnectingStatus(self.connectStatus())){
                return "disconnecting";
            }else{
                $("#homebtn").attr("class","homebtn_disconnect");
                return "connect";
			}
		});
		
		self.canConnect = ko.observable(getCanConnectNetWork());
        self.connectStatusText = ko.dependentObservable(function() {
            self.canConnect();
            if (checkConnectedStatus(self.connectStatus())) {
                $("#homebtn").attr("class","homebtn_connect");
                return $.i18n.prop("disconnect");
            }else if(checkConnectingStatus(self.connectStatus())){
                return $.i18n.prop("connecting");
            }else if(checkDisconnectingStatus(self.connectStatus())){
                return $.i18n.prop("disconnecting");
            }else{
                $("#homebtn").attr("class","homebtn_disconnect");
                return $.i18n.prop("connect");
            }
		});

        self.imagePath = ko.observable("img/4.png");
        self.wifiStatusImg = ko.observable(getWifiStatusImg(statusInfo.wifiStatus,statusInfo.attachedDevices.length));
        self.wifiText = ko.observable($.i18n.prop("wifi_devices_connected"));
        //var devices = service.getCurrentlyAttachedDevicesInfo();
        var dev = fixAttachedDevicesInfo([]);
        self.deviceInfo = ko.observable(dev);
        self.batteryText = ko.observable("");
        service.getSDConfiguration({}, function (data) {
            self.showEntrance(data.sd_status == "1" && data.share_status == "1" && data.sd_mode == "0");
            if(data.sd_status == "1" && data.sd_mode == "0"){
                self.showSdCardTitle($.i18n.prop("browse_sdcare_title1"));
            }else{
                self.showSdCardTitle($.i18n.prop("browse_sdcare_title2"));
            }
        });
		/**
		 * ååºè¿æ¥æé®äºä»¶
		 * 
		 * @event connectHandler
		 */
		self.connectHandler = function() {
			if (checkConnectedStatus(self.connectStatus())) {
                showLoading('disconnecting');
                $("#homebtn").attr("trans","disconnecting").translate();
				service.disconnect({}, function(data) {
					if(data.result){
						successOverlay("disconnect_success_info");
					} else {
						errorOverlay();
					}
				});
			} else {
                if(service.getStatusInfo().roamingStatus && service.getStatusInfo().roamMode == "off") {
                    showAlert("dial_roam_info");
                }
                else {
                    self.connect();
                }
			}
		};

        self.connect = function() {
            var statusInfo = getStatusInfo();
            var trafficResult = statusBar.getTrafficResult(statusInfo);
            if(statusInfo.limitVolumeEnable && trafficResult.showConfirm){
                var confirmMsg = null;
                if(trafficResult.usedPercent > 100){
                    confirmMsg = {msg: 'traffic_beyond_connect_msg'};
                    statusBar.setTrafficAlertPopuped(true);
                } else {
                    confirmMsg = {msg: 'traffic_limit_connect_msg', params: [trafficResult.limitPercent]};
                    statusBar.setTrafficAlert100Popuped(false);
                }
                showConfirm(confirmMsg, function(){
                    doConnect();
                });
            }else{
                doConnect();
            }
        };

	}
    /**
     * æwifiç¨æ·æ·»å å°é»åå
     * @param index
     * @constructor
     */
    BlockClick = function(index){
        showLoading();
        var macList = "";
        var result = service.getMacFilterInfo();
        macList = result.wifi_mac_black_list;
        if(typeof macList !== 'undefined' && macList.length<=0){
            macList = macDevice[index].macAddress;
        }else{
            macList = macDevice[index].macAddress+","+macList;
        }
        var params = {};
        params.macAddr = macDevice[index].macAddress;
        params.macFilterPolicy = 1;
        params.macList = macList;
        service.setMacFilter(params, function(result) {
            if (result.result == "success") {
				successOverlay();
            } else {
                errorOverlay();
            }
        });
    }
    /**
     * ä»é»ååä¸­ç§»é¤wifiç¨æ·å¯¹åºçMACå°å
     * @param index
     * @constructor
     */
    UnBlockClick = function(index){
        showLoading();
        var macList = "";
        var newMacList=[];
        var result = service.getMacFilterInfo();
        macList = result.wifi_mac_black_list;
        var blackMacList = macList.split(",");
        var mac = macDevice[index].macAddress;
        for(var i=0;i<blackMacList.length;i++){
            if(mac!=blackMacList[i]){
                newMacList.push(blackMacList[i]);
            }
        }
        var params = {};
        params.macAddr = mac;
        params.macFilterPolicy = 2;
        params.macList = newMacList.join(",");
        service.setMacFilter(params, function(result) {
            if (result.result == "success") {
                successOverlay();
            } else {
                errorOverlay();
            }
        });
    }

    /**
     * æ ¹æ®wifiç¶æè·åwifiçå¾çèµæº
     * @method getWifiStatusImg
     */
    function getWifiStatusImg(status, deviceSize) {
        if (status) {
            if (deviceSize == 0) {
                return "img/wifi_0.png";
            } else {
                return "img/wifi_" + deviceSize + ".png";
            }
        } else {
            return "img/wifi_0.png";
        }
    }
    /**
     * å°çµéè½¬åä¸ºå¯¹åºå¾ç
     * @method convertBatteryPers
     * @param vm
     * @param status
     */
    function convertBatteryPers(pers, status) {
        var txt = ""
        if ("0" == status) {
            txt = pers+"% Left";
        } else {
            if(parseInt(pers)<100){
                txt = "Charging "+parseInt(pers)+"% complete";
            }else{
                txt = "Charging complete";
            }
        }
        return txt;
    }
    //è®¾ç½®èç½ç¶æå¾ç
    function setImagePath(self,statusInfo){
        if(statusInfo.signalImg=="1"){
            self.imagePath("img/5.png");
        }else if(statusInfo.signalImg=="2"){
            self.imagePath("img/6.png");
        }else if(statusInfo.signalImg=="3"){
            self.imagePath("img/7.png");
        }else if(statusInfo.signalImg=="4"){
            self.imagePath("img/8.png");
        }else if(statusInfo.signalImg=="5"){
            self.imagePath("img/9.png");
        }else {
            self.imagePath("img/4.png");
        }

    }
    //è®¾ç½®èç½ç¶ææå­
    function setConnectedStatus(self,statusInfo){
        if(checkConnectedStatus(statusInfo.connectStatus)){
            var type_2g = ["GSM", "GPRS", "EDGE"];
            var type_3g = ["UMTS", "WCDMA"];
            var type_h = ["HSUPA", "HSPA", "HSPA+", "DC-HSPA+","HSDPA"];
            var networkTypeTmp = statusInfo.networkType.toLowerCase();
            if($.inArray(statusInfo.networkType.toUpperCase(),type_h)!= -1){
                self.connect_Status($.i18n.prop("h_connected"));
            }else if($.inArray(statusInfo.networkType.toUpperCase(),type_3g)!= -1){
                self.connect_Status($.i18n.prop("3g_connected"));
            }else if($.inArray(statusInfo.networkType.toUpperCase(),type_2g)!= -1){
                self.connect_Status($.i18n.prop("2g_connected"));
            }else if (networkTypeTmp == ''||networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service'||networkTypeTmp == 'limited service' || networkTypeTmp == 'no service') {
                if(networkTypeTmp==""||networkTypeTmp=="limited service"){
                    networkTypeTmp = "limited_service";
                }else if(networkTypeTmp=="no service"){
                    networkTypeTmp = "no_service";
                }
                self.connect_Status($.i18n.prop("network_type_" + networkTypeTmp));
            }
        }else{
            if(statusInfo.connectStatus == 'ppp_disconnected'){
                self.connect_Status($.i18n.prop("disconnected"));
            } else if(statusInfo.connectStatus == 'ppp_connecting'){
                self.connect_Status($.i18n.prop("connecting"));
            } else {
                self.connect_Status($.i18n.prop("disconnecting"));
            }
        }
    }
    //è®¾ç½®ç­ä¿¡ä¿¡æ¯
    function setMessageInfo(self){
        var statusInfo = getStatusInfo();
        var smsInfo = service.getSmsCapability();
        self.messageInfo (statusInfo.smsUnreadCount+" / "+(smsInfo.nvUsed+smsInfo.simUsed));
    }
    //è®¾ç½®wifiå¾çåçµæ± çµé
    function setWifiImage(self,info){
        self.wifiStatusImg(getWifiStatusImg(info.wifiStatus, info.attachedDevices.length));
        self.batteryText(convertBatteryPers(info.batteryPercent, info.batteryStatus));
    }
    function doConnect(){
        showLoading('connecting');
        $("#homebtn").attr("trans","connecting").translate();
        service.connect({}, function(data) {
            if(data.result){
                successOverlay("connect_success_info");
            } else {
                errorOverlay();
            }
        });
    }

    function fixAttachedDevicesInfo(devices) {
        var emptyInfo = {
            macAddress:"",
            ipAddress:"",
            hostName:"",
            timeConnected:""
        };
        var deviceNum = 0;
        if (devices) {
            deviceNum = devices.length;
        } else {
            devices = [];
        }
        /*var emptyLen = config.MAX_STATION_NUMBER - deviceNum;
        for (var i = 0; i < emptyLen; i++) {
            devices.push(emptyInfo);
        } */
        return devices;
    }

    function getCanConnectNetWork(){
        var status = getStatusInfo();
        if (status.simStatus != "modem_init_complete") {
            return false;
        }
        
        if (checkConnectedStatus(status.connectStatus)) {
            if (config.AP_STATION_SUPPORT) {
                var ap = service.getAPStationBasic()
                if (ap.ap_station_enable == "1") {
                    var result = service.getConnectionMode();
                    if (result.connectionMode == "auto_dial") {
                        return false;
                    }
                }
            }
            return true;
        }
	
	//å¦æå·²èç½ï¼ä½æ¯æ²¡æä¿¡å·ï¼æ­ç½æé®éè¦å¯ä»¥ç¨
        if (status.signalImg == "0") {
            return false;
        }
        var networkTypeTmp = status.networkType.toLowerCase();
        if (networkTypeTmp == '' || networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service'||networkTypeTmp == 'limited service' || networkTypeTmp == 'no service') {
            return false;
        }
        if("ppp_connecting"==status.connectStatus || "ppp_disconnecting"==status.connectStatus){
            return false;
        }
        if (config.AP_STATION_SUPPORT) {
            var ap = service.getAPStationBasic()

            if (status.connectWifiStatus == "connect") {
                if (ap.ap_station_mode == "wifi_pref") {
                    return false;
                }
            }
        }

        return true;
    }

    function refreshHomeData(vm){
        var info = getStatusInfo();
        vm.connectStatus(info.connectStatus);
        if (checkConnectedStatus(info.connectStatus)) {
            vm.speedTime(transUnit(parseInt(info.data_counter.currentReceived, 10) + parseInt(info.data_counter.currentSent, 10), false)+" / "+transSecond2Time(info.data_counter.currentConnectedTime));
        } else {
            vm.speedTime("0MB / "+transSecond2Time(0));
        }
        refreshAttachedDevicesInfo(vm);
        setImagePath(vm,info);
        setConnectedStatus(vm,info);
        setWifiImage(vm,info);
        vm.canConnect(getCanConnectNetWork());
    }

    function refreshAttachedDevicesInfo(self) {
        service.getCurrentlyAttachedDevicesInfo({}, function (devices) {
            var dev = fixAttachedDevicesInfo(devices.attachedDevices);
            var result = service.getMacFilterInfo();
            var macList = result.wifi_mac_black_list;
            if(macList!="" && typeof macList !== 'undefined'){
                var blackMacList = macList.split(",");
                for(var i=0;i<blackMacList.length;i++){
                    if(blackMacList[i]!=""){
                        for(var j=0;j<dev.length;j++){
                            if(blackMacList[i]==dev[j].macAddress){
                                 dev.splice(j,1);
                            }
                        }
                        var tempInfo = {
                            macAddress:blackMacList[i],
                            ipAddress:"",
                            hostName:"N/A",
                            timeConnected:""
                        };
                        dev.push(tempInfo);
                    }
                }
            }
            self.deviceInfo(dev);
            macDevice = dev;
        });
    }

    /**
	 * åå§åvm
	 * 
	 * @method init
	 */
	function init() {
		var container = $('#container')[0];
		ko.cleanNode(container);

		var connectionVM = new connectInfoVM();
		ko.applyBindings(connectionVM, container);

		$('#frmHome').validate({
			submitHandler : function() {
				connectionVM.connectHandler();
			}
		});

        refreshHomeData(connectionVM);
		addInterval(function() {
            refreshHomeData(connectionVM);
        }, 1000);
        setInterval(function(){
            setMessageInfo(connectionVM);
        },1500);
	}

    return {
        init:init,
        refreshAttachedDevicesInfo:refreshAttachedDevicesInfo,
        BlockClick:BlockClick,
        UnBlockClick:UnBlockClick
    };
});/*! HTML5 Shiv vpre3.5 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */
;(function(window, document) {

  /** Preset options */
  var options = window.html5 || {};

  /** Used to skip problem elements */
  var reSkip = /^<|^(?:button|form|map|select|textarea|object|iframe|option|optgroup)$/i;

  /** Not all elements can be cloned in IE (this list can be shortend) **/
  var saveClones = /^<|^(?:a|b|button|code|div|fieldset|form|h1|h2|h3|h4|h5|h6|i|iframe|img|input|label|li|link|ol|option|p|param|q|script|select|span|strong|style|table|tbody|td|textarea|tfoot|th|thead|tr|ul)$/i;

  /** Detect whether the browser supports default html5 styles */
  var supportsHtml5Styles;

  /** Detect whether the browser supports unknown elements */
  var supportsUnknownElements;

  (function() {
    var a = document.createElement('a');

    a.innerHTML = '<xyz></xyz>';

    //if the hidden property is implemented we can assume, that the browser supports HTML5 Styles | this fails in Chrome 8
    supportsHtml5Styles = ('hidden' in a);
    //if we are part of Modernizr, we do an additional test to solve the Chrome 8 fail
    if(supportsHtml5Styles && typeof injectElementWithStyles == 'function'){
        injectElementWithStyles('#modernizr{}', function(node){
            node.hidden = true;
            supportsHtml5Styles = (window.getComputedStyle ?
                  getComputedStyle(node, null) :
                  node.currentStyle).display == 'none';
        });
    }

    supportsUnknownElements = a.childNodes.length == 1 || (function() {
      // assign a false positive if unable to shiv
      try {
        (document.createElement)('a');
      } catch(e) {
        return true;
      }
      var frag = document.createDocumentFragment();
      return (
        typeof frag.cloneNode == 'undefined' ||
        typeof frag.createDocumentFragment == 'undefined' ||
        typeof frag.createElement == 'undefined'
      );
    }());

  }());

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a style sheet with the given CSS text and adds it to the document.
   * @private
   * @param {Document} ownerDocument The document.
   * @param {String} cssText The CSS text.
   * @returns {StyleSheet} The style element.
   */
  function addStyleSheet(ownerDocument, cssText) {
    var p = ownerDocument.createElement('p'),
        parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

    p.innerHTML = 'x<style>' + cssText + '</style>';
    return parent.insertBefore(p.lastChild, parent.firstChild);
  }

  /**
   * Returns the value of `html5.elements` as an array.
   * @private
   * @returns {Array} An array of shived element node names.
   */
  function getElements() {
    var elements = html5.elements;
    return typeof elements == 'string' ? elements.split(' ') : elements;
  }

  /**
   * Shivs the `createElement` and `createDocumentFragment` methods of the document.
   * @private
   * @param {Document|DocumentFragment} ownerDocument The document.
   */
  function shivMethods(ownerDocument) {
    var cache = {},
        docCreateElement = ownerDocument.createElement,
        docCreateFragment = ownerDocument.createDocumentFragment,
        frag = docCreateFragment();

    ownerDocument.createElement = function(nodeName) {
      //abort shiv
      if(!html5.shivMethods){
          return docCreateElement(nodeName);
      }

      var node;

      if(cache[nodeName]){
          node = cache[nodeName].cloneNode();
      } else if(saveClones.test(nodeName)){
           node = (cache[nodeName] = docCreateElement(nodeName)).cloneNode();
      } else {
          node = docCreateElement(nodeName);
      }

      // Avoid adding some elements to fragments in IE < 9 because
      // * Attributes like `name` or `type` cannot be set/changed once an element
      //   is inserted into a document/fragment
      // * Link elements with `src` attributes that are inaccessible, as with
      //   a 403 response, will cause the tab/window to crash
      // * Script elements appended to fragments will execute when their `src`
      //   or `text` property is set
      return node.canHaveChildren && !reSkip.test(nodeName) ? frag.appendChild(node) : node;
    };

    ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
      'var n=f.cloneNode(),c=n.createElement;' +
      'h.shivMethods&&(' +
        // unroll the `createElement` calls
        getElements().join().replace(/\w+/g, function(nodeName) {
          docCreateElement(nodeName);
          frag.createElement(nodeName);
          return 'c("' + nodeName + '")';
        }) +
      ');return n}'
    )(html5, frag);
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Shivs the given document.
   * @memberOf html5
   * @param {Document} ownerDocument The document to shiv.
   * @returns {Document} The shived document.
   */
  function shivDocument(ownerDocument) {
    var shived;
    if (ownerDocument.documentShived) {
      return ownerDocument;
    }
    if (html5.shivCSS && !supportsHtml5Styles) {
      shived = !!addStyleSheet(ownerDocument,
        // corrects block display not defined in IE6/7/8/9
        'article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +
        // corrects audio display not defined in IE6/7/8/9
        'audio{display:none}' +
        // corrects canvas and video display not defined in IE6/7/8/9
        'canvas,video{display:inline-block;*display:inline;*zoom:1}' +
        // corrects 'hidden' attribute and audio[controls] display not present in IE7/8/9
        '[hidden]{display:none}audio[controls]{display:inline-block;*display:inline;*zoom:1}' +
        // adds styling not present in IE6/7/8/9
        'mark{background:#FF0;color:#000}'
      );
    }
    if (!supportsUnknownElements) {
      shived = !shivMethods(ownerDocument);
    }
    if (shived) {
      ownerDocument.documentShived = shived;
    }
    return ownerDocument;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The `html5` object is exposed so that more elements can be shived and
   * existing shiving can be detected on iframes.
   * @type Object
   * @example
   *
   * // options can be changed before the script is included
   * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
   */
  var html5 = {

    /**
     * An array or space separated string of node names of the elements to shiv.
     * @memberOf html5
     * @type Array|String
     */
    'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',

    /**
     * A flag to indicate that the HTML5 style sheet should be inserted.
     * @memberOf html5
     * @type Boolean
     */
    'shivCSS': !(options.shivCSS === false),

    /**
     * A flag to indicate that the document's `createElement` and `createDocumentFragment`
     * methods should be overwritten.
     * @memberOf html5
     * @type Boolean
     */
    'shivMethods': !(options.shivMethods === false),

    /**
     * A string to describe the type of `html5` object ("default" or "default print").
     * @memberOf html5
     * @type String
     */
    'type': 'default',

    // shivs the document according to the specified `html5` object options
    'shivDocument': shivDocument
  };

  /*--------------------------------------------------------------------------*/

  // expose html5
  window.html5 = html5;

  // shiv the document
  shivDocument(document);

}(this, document));<div id="httpshare_form">
	<div class="form-body">
        <div class="form-title" trans="httpshare"></div>
		<div class="content">
            <div class="row-fluid">
                <div class="span9">
                    <span trans="sd_path" class="width20 side-center"></span>
					<input type="text" class="width400" value="" id="sd_path" readonly="readonly" noAction="true" class="focusIn"/>
                </div>
                <div class="span3 side-right">
                    <span id="sd_volumn">
                    <span id="sd_volumn_used"></span>/<span id="sd_volumn_total"></span></span>
                </div>
            </div>
			<div id="fileControlSection">
				<ul class="row-fluid">
					<li id="rootBtnLi" onclick="enterFolder('');" class="cursor-pointer marginleft5">
						<img class="sdcard_back_img" src="./img/backhome.jpg"/>
						<span trans="root"></span>
					</li>
					<li id="backBtnLi" onclick="backFolder();" class="cursor-pointer marginleft5">
						<img class="sdcard_back_img" src="./img/back.jpg"/>
						<span trans="back"></span>
					</li>
					<li id="newFolderBtnLi" onclick="openCreateNewFolderClickHandler();" class="cursor-pointer marginleft5">
						<img class="hand_cursor_img" src="./img/new.jpg"/>
						<span trans="new"></span>
					</li>
					<li id="createNewFolderLi" style="display: none;line-height: 35px; vertical-align: middle;">
						<input type="text" name="newFolderName" id="newFolderName" maxlength="25"/>
						<input type="button" id="createNewFolderBtn" trans="create" class="btn-1 " onclick="createNewFolderClickHandler();"/>
						<input type="button" id="cancelCreateNewFolderBtn" trans="cancel" class="btn-1 " onclick="cancelCreateNewFolderClickHandler();"/>
						<div id="createNewFolderErrorLabel" class="colorRed"></div>
					</li>
				</ul>
			</div>
			<div id="fileListSection">
				<table class="fileListTable colorHoverTable">
					<thead>
						<tr>
							<th width="40" class="sd_guest_hide_th">
								<p id="fileList-checkAll" target="fileList_container" class="checkbox checkboxToggle">
									<input id="checkbox-all" type="checkbox"/>
								</p>
							</th>
							<th width="20"></th>
							<th trans="sd_name" width="170"></th>
							<th trans="sd_rename" class="sd_guest_hide_th"></th>
							<th trans="download"></th>
							<th trans="sd_file_size" ></th>
							<th trans="sd_update_time" width="150"></th>
						</tr>
					</thead>
					<tbody id="fileList_container"></tbody>
				</table>
			</div>
			<div id="fileListButtonSection" class="row-fluid">
				<div class="pager span8"></div>
                <div class="span4 side-right">
                    <input type="button" trans="delete" id="delete_file_button" class="btn-1 " onclick="deleteBtnClickHandler();"/>
				<input type="button" trans="back_to_login" id="go_to_login_button" class="btn-1 hide" onclick="gotoLogin();"/>
                </div>
			</div>
			<div id="uploadSection">
				<iframe id="fileUploadIframe" name="fileUploadIframe" scrolling="no" frameborder="0" width="0" height="0" style="height:0px;width:0px;"></iframe>
				<form method="post" name="fileUploadForm" id="fileUploadForm" action="" enctype="multipart/form-data" target="fileUploadIframe">
                    <input type="hidden" name="path_SD_CARD_time" id="path_SD_CARD_time" value=""/>
                    <input type="hidden" name="path_SD_CARD_time_unix" id="path_SD_CARD_time_unix" value=""/>
					<input id="fileField" name="filename" maxlength="200" type="file" dir="ltr"/>
					<div class="fileUploadDiv">
						<input trans="upload" id="fileUploadApplyBtn" name="fileUploadApplyBtn" type="button" class="btn-1 marginleft5 margintop5 " onclick="fileUploadSubmitClickHandler();"/>
					</div>
                    <div class="clear"></div>
				</form>
			</div>
		</div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="note_upload_not_refresh"></li>
                <li trans="note_upload_single_file_2g"></li>
            </ul>
        </div>
	</div>
</div>
<script type="text/x-jquery-tmpl" id="sdFileItemTmpl">
{{each(i, item) data }}
<tr class="${trClass}">
	{{if readwrite}}<td align="center"><p class="checkbox"><input type="checkbox" target="fileList-checkAll" value="${fileName}"/></p></td>{{/if}}
	<td {{if fileType=='folder'}}class="cursor-pointer folderTd" filename='${fileName}'{{/if}}><span class="mini-icon ${fileType==''?'':'icon-'+fileType}"></span></td>
	<td style="width:170px;" {{if fileType=='folder'}}class="cursor-pointer folderTd" filename='${fileName}'{{/if}}>${replaceSpaceWithNbsp(fileName)}</td>
	{{if readwrite}}<td align='center'><a href="javascript: void(0)" filename='${fileName}' class="fileRename" trans='sd_rename'></a></td>{{/if}}
	<td align='center'>{{if fileType!='folder'}}<a href="${filePath}" filelocal="${filePath}" target="_blank" class="mini-icon icon-download"></a>{{/if}}</td>
	<td align='center'>${fileSize}</td>
	<td align='center'>${lastUpdateTime}</td>
</tr>
{{/each}}
</script>
<script type="text/x-jquery-tmpl" id="pagerTmpl">
{{each(i, item) data.pagers }}
	{{if isPrev}}
        {{if pageNum==0}}
	        <a href="javascript:void(0)" class="pager_disabled" trans="prev_page" onclick="javascript:void(0)"></a>
        {{else}}
            <a href="javascript:void(0)" trans="prev_page" onclick="pagerItemClickHandler('${pageNum}')"></a>
        {{/if}}
	{{else isDot}}
	<span>...</span>
	{{else isNext}}
        {{if pageNum - 1==data.total}}
            <a href="javascript:void(0)" class="pager_disabled" trans="next_page" onclick="javascript:void(0)"></a>
        {{else}}
            <a href="javascript:void(0)" trans="next_page" onclick="pagerItemClickHandler('${pageNum}')"></a>
        {{/if}}
	{{else}}
	<a href="javascript:void(0)" class="${isActive?'pager_active':''}" onclick="pagerItemClickHandler('${pageNum}')">${pageNum}</a>
	{{/if}}
{{/each}}
</script>/******************************************************************************
 * jquery.i18n.properties
 * 
 * Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
 * MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses.
 * 
 * @version     1.1.x
 * @author      Nuno Fernandes
 *              Matthew Lohbihler
 * @url         www.codingwithcoffee.com
 * @inspiration Localisation assistance for jQuery (http://keith-wood.name/localisation.html)
 *              by Keith Wood (kbwood{at}iinet.com.au) June 2007
 * 
 *****************************************************************************/

(function($) {
$.i18n = {};

/** Map holding bundle keys (if mode: 'map') */
$.i18n.map = {};
    
/**
 * Load and parse message bundle files (.properties),
 * making bundles keys available as javascript variables.
 * 
 * i18n files are named <name>.js, or <name>_<language>.js or <name>_<language>_<country>.js
 * Where:
 *      The <language> argument is a valid ISO Language Code. These codes are the lower-case, 
 *      two-letter codes as defined by ISO-639. You can find a full list of these codes at a 
 *      number of sites, such as: http://www.loc.gov/standards/iso639-2/englangn.html
 *      The <country> argument is a valid ISO Country Code. These codes are the upper-case,
 *      two-letter codes as defined by ISO-3166. You can find a full list of these codes at a
 *      number of sites, such as: http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
 * 
 * Sample usage for a bundles/Messages.properties bundle:
 * $.i18n.properties({
 *      name:      'Messages', 
 *      language:  'en_US',
 *      path:      'bundles'
 * });
 * @param  name			(string/string[], optional) names of file to load (eg, 'Messages' or ['Msg1','Msg2']). Defaults to "Messages"
 * @param  language		(string, optional) language/country code (eg, 'en', 'en_US', 'pt_PT'). if not specified, language reported by the browser will be used instead.
 * @param  path			(string, optional) path of directory that contains file to load
 * @param  mode			(string, optional) whether bundles keys are available as JavaScript variables/functions or as a map (eg, 'vars' or 'map')
 * @param  cache        (boolean, optional) whether bundles should be cached by the browser, or forcibly reloaded on each page load. Defaults to false (i.e. forcibly reloaded)
 * @param  encoding 	(string, optional) the encoding to request for bundles. Property file resource bundles are specified to be in ISO-8859-1 format. Defaults to UTF-8 for backward compatibility.
 * @param  callback     (function, optional) callback function to be called after script is terminated
 */
$.i18n.properties = function(settings) {
	// set up settings
    var defaults = {
        name:           'Messages',
        language:       '',
        path:           '',  
        mode:           'vars',
        cache:			false,
        encoding:       'UTF-8',
        callback:       null
    };
    settings = $.extend(defaults, settings);    
    if(settings.language === null || settings.language == '') {
	   settings.language = $.i18n.browserLang();
	}
	if(settings.language === null) {settings.language='';}
	
	// load and parse bundle files
	var files = getFiles(settings.name);
	for(i=0; i<files.length; i++) {
		// 1. load base (eg, Messages.properties)
		//loadAndParseFile(settings.path + files[i] + '.properties', settings);
        // 2. with language code (eg, Messages_pt.properties)
//		if(settings.language.length >= 2) {
//            loadAndParseFile(settings.path + files[i] + '_' + settings.language.substring(0, 2) +'.properties', settings);
//		}
		// 3. with language code and country code (eg, Messages_pt_PT.properties)
        if(settings.language.length >= 2) {
            loadAndParseFile(settings.path + files[i] + '_' + settings.language.substring(0, 5) +'.properties', settings);
        }
	}
	
	// call callback
	if(settings.callback){ settings.callback(); }
};


/**
 * When configured with mode: 'map', allows access to bundle values by specifying its key.
 * Eg, jQuery.i18n.prop('com.company.bundles.menu_add')
 */
$.i18n.prop = function(key /* Add parameters as function arguments as necessary  */) {
	var value = $.i18n.map[key];
	if (value == null)
		return key;
	
	var phvList;
	if (arguments.length == 2 && $.isArray(arguments[1]))
		// An array was passed as the only parameter, so assume it is the list of place holder values.
		phvList = arguments[1];

	// Place holder replacement
	/**
	 * Tested with:
	 *   test.t1=asdf ''{0}''
	 *   test.t2=asdf '{0}' '{1}'{1}'zxcv
	 *   test.t3=This is \"a quote" 'a''{0}''s'd{fgh{ij'
	 *   test.t4="'''{'0}''" {0}{a}
	 *   test.t5="'''{0}'''" {1}
	 *   test.t6=a {1} b {0} c
	 *   test.t7=a 'quoted \\ s\ttringy' \t\t x
	 *
	 * Produces:
	 *   test.t1, p1 ==> asdf 'p1'
	 *   test.t2, p1 ==> asdf {0} {1}{1}zxcv
	 *   test.t3, p1 ==> This is "a quote" a'{0}'sd{fgh{ij
	 *   test.t4, p1 ==> "'{0}'" p1{a}
	 *   test.t5, p1 ==> "'{0}'" {1}
	 *   test.t6, p1 ==> a {1} b p1 c
	 *   test.t6, p1, p2 ==> a p2 b p1 c
	 *   test.t6, p1, p2, p3 ==> a p2 b p1 c
	 *   test.t7 ==> a quoted \ s	tringy 		 x
	 */
	
	var i;
	if (typeof(value) == 'string') {
        // Handle escape characters. Done separately from the tokenizing loop below because escape characters are 
		// active in quoted strings.
        i = 0;
        while ((i = value.indexOf('\\', i)) != -1) {
 		    if (value.charAt(i+1) == 't')
 			    value = value.substring(0, i) + '\t' + value.substring((i++) + 2); // tab
 		    else if (value.charAt(i+1) == 'r')
 			    value = value.substring(0, i) + '\r' + value.substring((i++) + 2); // return
 		    else if (value.charAt(i+1) == 'n')
 			    value = value.substring(0, i) + '\n' + value.substring((i++) + 2); // line feed
 		    else if (value.charAt(i+1) == 'f')
 			    value = value.substring(0, i) + '\f' + value.substring((i++) + 2); // form feed
 		    else if (value.charAt(i+1) == '\\')
 			    value = value.substring(0, i) + '\\' + value.substring((i++) + 2); // \
 		    else
 			    value = value.substring(0, i) + value.substring(i+1); // Quietly drop the character
        }
		
		// Lazily convert the string to a list of tokens.
		var arr = [], j, index;
		i = 0;
		while (i < value.length) {
			if (value.charAt(i) == '\'') {
				// Handle quotes
				if (i == value.length-1)
					value = value.substring(0, i); // Silently drop the trailing quote
				else if (value.charAt(i+1) == '\'')
					value = value.substring(0, i) + value.substring(++i); // Escaped quote
				else {
					// Quoted string
					j = i + 2;
					while ((j = value.indexOf('\'', j)) != -1) {
						if (j == value.length-1 || value.charAt(j+1) != '\'') {
							// Found start and end quotes. Remove them
							value = value.substring(0,i) + value.substring(i+1, j) + value.substring(j+1);
							i = j - 1;
							break;
						}
						else {
							// Found a double quote, reduce to a single quote.
							value = value.substring(0,j) + value.substring(++j);
						}
					}
					
					if (j == -1) {
						// There is no end quote. Drop the start quote
						value = value.substring(0,i) + value.substring(i+1);
					}
				}
			}
			else if (value.charAt(i) == '{') {
				// Beginning of an unquoted place holder.
				j = value.indexOf('}', i+1);
				if (j == -1)
					i++; // No end. Process the rest of the line. Java would throw an exception
				else {
					// Add 1 to the index so that it aligns with the function arguments.
					index = parseInt(value.substring(i+1, j));
					if (!isNaN(index) && index >= 0) {
						// Put the line thus far (if it isn't empty) into the array
						var s = value.substring(0, i);
						if (s != "")
							arr.push(s);
						// Put the parameter reference into the array
						arr.push(index);
						// Start the processing over again starting from the rest of the line.
						i = 0;
						value = value.substring(j+1);
					}
					else
						i = j + 1; // Invalid parameter. Leave as is.
				}
			}
			else
				i++;
		}
		
		// Put the remainder of the no-empty line into the array.
		if (value != "")
			arr.push(value);
		value = arr;
		
		// Make the array the value for the entry.
		$.i18n.map[key] = arr;
	}
	
	if (value.length == 0)
		return "";
	if (value.lengh == 1 && typeof(value[0]) == "string")
		return value[0];
	
	var s = "";
	for (i=0; i<value.length; i++) {
		if (typeof(value[i]) == "string")
			s += value[i];
		// Must be a number
		else if (phvList && value[i] < phvList.length)
			s += phvList[value[i]];
		else if (!phvList && value[i] + 1 < arguments.length)
			s += arguments[value[i] + 1];
		else
			s += "{"+ value[i] +"}";
	}
	
	return s;
};

/** Language reported by browser, normalized code */
$.i18n.browserLang = function() {
	return normaliseLanguageCode(navigator.language /* Mozilla */ || navigator.userLanguage /* IE */);
};


/** Load and parse .properties files */
function loadAndParseFile(filename, settings) {
	$.ajax({
        url:        filename,
        async:      false,
        cache:		settings.cache,
        contentType:'text/plain;charset='+ settings.encoding,
        dataType:   'text',
        success:    function(data, status) {
        				parseData(data, settings.mode); 
					}
    });
}

/** Parse .properties files */
function parseData(data, mode) {
   var parsed = '';
   var parameters = data.split( /\n/ );
   var regPlaceHolder = /(\{\d+\})/g;
   var regRepPlaceHolder = /\{(\d+)\}/g;
   var unicodeRE = /(\\u.{4})/ig;
   for(var i=0; i<parameters.length; i++ ) {
       parameters[i] = parameters[i].replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim
       if(parameters[i].length > 0 && parameters[i].match("^#")!="#") { // skip comments
           var pair = parameters[i].split('=');
           if(pair.length > 0) {
               /** Process key & value */
               var name = unescape(pair[0]).replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim
               var value = pair.length == 1 ? "" : pair[1];
               // process multi-line values
               while(value.match(/\\$/)=="\\") {
               		value = value.substring(0, value.length - 1);
               		value += parameters[++i].replace( /\s\s*$/, '' ); // right trim
               }               
               // Put values with embedded '='s back together
               for(var s=2;s<pair.length;s++){ value +='=' + pair[s]; }
               value = value.replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim
               
               /** Mode: bundle keys in a map */
               if(mode == 'map' || mode == 'both') {
                   // handle unicode chars possibly left out
                   var unicodeMatches = value.match(unicodeRE);
                   if(unicodeMatches) {
                     for(var u=0; u<unicodeMatches.length; u++) {
                        value = value.replace( unicodeMatches[u], unescapeUnicode(unicodeMatches[u]));
                     }
                   }
                   // add to map
                   $.i18n.map[name] = value;
               }
               
               /** Mode: bundle keys as vars/functions */
               if(mode == 'vars' || mode == 'both') {
                   value = value.replace( /"/g, '\\"' ); // escape quotation mark (")
                   
                   // make sure namespaced key exists (eg, 'some.key') 
                   checkKeyNamespace(name);
                   
                   // value with variable substitutions
                   if(regPlaceHolder.test(value)) {
                       var parts = value.split(regPlaceHolder);
                       // process function args
                       var first = true;
                       var fnArgs = '';
                       var usedArgs = [];
                       for(var p=0; p<parts.length; p++) {
                           if(regPlaceHolder.test(parts[p]) && (usedArgs.length == 0 || usedArgs.indexOf(parts[p]) == -1)) {
                               if(!first) {fnArgs += ',';}
                               fnArgs += parts[p].replace(regRepPlaceHolder, 'v$1');
                               usedArgs.push(parts[p]);
                               first = false;
                           }
                       }
                       parsed += name + '=function(' + fnArgs + '){';
                       // process function body
                       var fnExpr = '"' + value.replace(regRepPlaceHolder, '"+v$1+"') + '"';
                       parsed += 'return ' + fnExpr + ';' + '};';
                       
                   // simple value
                   }else{
                       parsed += name+'="'+value+'";';
                   }
               } // END: Mode: bundle keys as vars/functions
           } // END: if(pair.length > 0)
       } // END: skip comments
   }
   eval(parsed);
}

/** Make sure namespace exists (for keys with dots in name) */
// TODO key parts that start with numbers quietly fail. i.e. month.short.1=Jan
function checkKeyNamespace(key) {
	var regDot = /\./;
	if(regDot.test(key)) {
		var fullname = '';
		var names = key.split( /\./ );
		for(var i=0; i<names.length; i++) {
			if(i>0) {fullname += '.';}
			fullname += names[i];
			if(eval('typeof '+fullname+' == "undefined"')) {
				eval(fullname + '={};');
			}
		}
	}
}

/** Make sure filename is an array */
function getFiles(names) {
	return (names && names.constructor == Array) ? names : [names];
}

/** Ensure language code is in the format aa_AA. */
function normaliseLanguageCode(lang) {
    lang = lang.toLowerCase();
    if(lang.length > 3) {
        lang = lang.substring(0, 3) + lang.substring(3).toUpperCase();
    }
    return lang;
}

/** Unescape unicode chars ('\u00e3') */
function unescapeUnicode(str) {
  // unescape unicode codes
  var codes = [];
  var code = parseInt(str.substr(2), 16);
  if (code >= 0 && code < Math.pow(2, 16)) {
     codes.push(code);
  }
  // convert codes to text
  var unescaped = '';
  for (var i = 0; i < codes.length; ++i) {
    unescaped += String.fromCharCode(codes[i]);
  }
  return unescaped;
}

/* Cross-Browser Split 1.0.1
(c) Steven Levithan <stevenlevithan.com>; MIT License
An ECMA-compliant, uniform cross-browser split method */
var cbSplit;
// avoid running twice, which would break `cbSplit._nativeSplit`'s reference to the native `split`
if (!cbSplit) {    
  cbSplit = function(str, separator, limit) {
      // if `separator` is not a regex, use the native `split`
      if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
        if(typeof cbSplit._nativeSplit == "undefined")
          return str.split(separator, limit);
        else
          return cbSplit._nativeSplit.call(str, separator, limit);
      }
  
      var output = [],
          lastLastIndex = 0,
          flags = (separator.ignoreCase ? "i" : "") +
                  (separator.multiline  ? "m" : "") +
                  (separator.sticky     ? "y" : ""),
          separator = RegExp(separator.source, flags + "g"), // make `global` and avoid `lastIndex` issues by working with a copy
          separator2, match, lastIndex, lastLength;
  
      str = str + ""; // type conversion
      if (!cbSplit._compliantExecNpcg) {
          separator2 = RegExp("^" + separator.source + "$(?!\\s)", flags); // doesn't need /g or /y, but they don't hurt
      }
  
      /* behavior for `limit`: if it's...
      - `undefined`: no limit.
      - `NaN` or zero: return an empty array.
      - a positive number: use `Math.floor(limit)`.
      - a negative number: no limit.
      - other: type-convert, then use the above rules. */
      if (limit === undefined || +limit < 0) {
          limit = Infinity;
      } else {
          limit = Math.floor(+limit);
          if (!limit) {
              return [];
          }
      }
  
      while (match = separator.exec(str)) {
          lastIndex = match.index + match[0].length; // `separator.lastIndex` is not reliable cross-browser
  
          if (lastIndex > lastLastIndex) {
              output.push(str.slice(lastLastIndex, match.index));
  
              // fix browsers whose `exec` methods don't consistently return `undefined` for nonparticipating capturing groups
              if (!cbSplit._compliantExecNpcg && match.length > 1) {
                  match[0].replace(separator2, function () {
                      for (var i = 1; i < arguments.length - 2; i++) {
                          if (arguments[i] === undefined) {
                              match[i] = undefined;
                          }
                      }
                  });
              }
  
              if (match.length > 1 && match.index < str.length) {
                  Array.prototype.push.apply(output, match.slice(1));
              }
  
              lastLength = match[0].length;
              lastLastIndex = lastIndex;
  
              if (output.length >= limit) {
                  break;
              }
          }
  
          if (separator.lastIndex === match.index) {
              separator.lastIndex++; // avoid an infinite loop
          }
      }
  
      if (lastLastIndex === str.length) {
          if (lastLength || !separator.test("")) {
              output.push("");
          }
      } else {
          output.push(str.slice(lastLastIndex));
      }
  
      return output.length > limit ? output.slice(0, limit) : output;
  };
  
  cbSplit._compliantExecNpcg = /()??/.exec("")[1] === undefined; // NPCG: nonparticipating capturing group
  cbSplit._nativeSplit = String.prototype.split;

} // end `if (!cbSplit)`
String.prototype.split = function (separator, limit) {
    return cbSplit(this, separator, limit);
};

})(jQuery);
                /*
 * SimpleModal 1.4.2 - jQuery Plugin
 * http://simplemodal.com/
 * Copyright (c) 2011 Eric Martin
 * Licensed under MIT and GPL
 * Date: Sat, Dec 17 2011 15:35:38 -0800
 */

/**
 * SimpleModal is a lightweight jQuery plugin that provides a simple
 * interface to create a modal dialog.
 *
 * The goal of SimpleModal is to provide developers with a cross-browser
 * overlay and container that will be populated with data provided to
 * SimpleModal.
 *
 * There are two ways to call SimpleModal:
 * 1) As a chained function on a jQuery object, like $('#myDiv').modal();.
 * This call would place the DOM object, #myDiv, inside a modal dialog.
 * Chaining requires a jQuery object. An optional options object can be
 * passed as a parameter.
 *
 * @example $('<div>my data</div>').modal({options});
 * @example $('#myDiv').modal({options});
 * @example jQueryObject.modal({options});
 *
 * 2) As a stand-alone function, like $.modal(data). The data parameter
 * is required and an optional options object can be passed as a second
 * parameter. This method provides more flexibility in the types of data
 * that are allowed. The data could be a DOM object, a jQuery object, HTML
 * or a string.
 *
 * @example $.modal('<div>my data</div>', {options});
 * @example $.modal('my data', {options});
 * @example $.modal($('#myDiv'), {options});
 * @example $.modal(jQueryObject, {options});
 * @example $.modal(document.getElementById('myDiv'), {options});
 *
 * A SimpleModal call can contain multiple elements, but only one modal
 * dialog can be created at a time. Which means that all of the matched
 * elements will be displayed within the modal container.
 *
 * SimpleModal internally sets the CSS needed to display the modal dialog
 * properly in all browsers, yet provides the developer with the flexibility
 * to easily control the look and feel. The styling for SimpleModal can be
 * done through external stylesheets, or through SimpleModal, using the
 * overlayCss, containerCss, and dataCss options.
 *
 * SimpleModal has been tested in the following browsers:
 * - IE 6+
 * - Firefox 2+
 * - Opera 9+
 * - Safari 3+
 * - Chrome 1+
 *
 * @name SimpleModal
 * @type jQuery
 * @requires jQuery v1.2.4
 * @cat Plugins/Windows and Overlays
 * @author Eric Martin (http://ericmmartin.com)
 * @version 1.4.2
 */

;(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals
		factory(jQuery);
	}
}
(function ($) {
	var d = [],
		doc = $(document),
		ie6 = $.browser.msie && parseInt($.browser.version) === 6 && typeof window['XMLHttpRequest'] !== 'object',
		ie7 = $.browser.msie && parseInt($.browser.version) === 7,
		ieQuirks = null,
		wndw = $(window),
		w = [];

	/*
	 * Create and display a modal dialog.
	 *
	 * @param {string, object} data A string, jQuery object or DOM object
	 * @param {object} [options] An optional object containing options overrides
	 */
	$.modal = function (data, options) {
		return $.modal.impl.init(data, options);
	};

	/*
	 * Close the modal dialog.
	 */
	$.modal.close = function () {
		$.modal.impl.close();
	};

	/*
	 * Set focus on first or last visible input in the modal dialog. To focus on the last
	 * element, call $.modal.focus('last'). If no input elements are found, focus is placed
	 * on the data wrapper element.
	 */
	$.modal.focus = function (pos) {
		$.modal.impl.focus(pos);
	};

	/*
	 * Determine and set the dimensions of the modal dialog container.
	 * setPosition() is called if the autoPosition option is true.
	 */
	$.modal.setContainerDimensions = function () {
		$.modal.impl.setContainerDimensions();
	};

	/*
	 * Re-position the modal dialog.
	 */
	$.modal.setPosition = function () {
		$.modal.impl.setPosition();
	};

	/*
	 * Update the modal dialog. If new dimensions are passed, they will be used to determine
	 * the dimensions of the container.
	 *
	 * setContainerDimensions() is called, which in turn calls setPosition(), if enabled.
	 * Lastly, focus() is called is the focus option is true.
	 */
	$.modal.update = function (height, width) {
		$.modal.impl.update(height, width);
	};

	/*
	 * Chained function to create a modal dialog.
	 *
	 * @param {object} [options] An optional object containing options overrides
	 */
	$.fn.modal = function (options) {
		return $.modal.impl.init(this, options);
	};

	/*
	 * SimpleModal default options
	 *
	 * appendTo:		(String:'body') The jQuery selector to append the elements to. For .NET, use 'form'.
	 * focus:			(Boolean:true) Focus in the first visible, enabled element?
	 * opacity:			(Number:50) The opacity value for the overlay div, from 0 - 100
	 * overlayId:		(String:'simplemodal-overlay') The DOM element id for the overlay div
	 * overlayCss:		(Object:{}) The CSS styling for the overlay div
	 * containerId:		(String:'simplemodal-container') The DOM element id for the container div
	 * containerCss:	(Object:{}) The CSS styling for the container div
	 * dataId:			(String:'simplemodal-data') The DOM element id for the data div
	 * dataCss:			(Object:{}) The CSS styling for the data div
	 * minHeight:		(Number:null) The minimum height for the container
	 * minWidth:		(Number:null) The minimum width for the container
	 * maxHeight:		(Number:null) The maximum height for the container. If not specified, the window height is used.
	 * maxWidth:		(Number:null) The maximum width for the container. If not specified, the window width is used.
	 * autoResize:		(Boolean:false) Automatically resize the container if it exceeds the browser window dimensions?
	 * autoPosition:	(Boolean:true) Automatically position the container upon creation and on window resize?
	 * zIndex:			(Number: 1000) Starting z-index value
	 * close:			(Boolean:true) If true, closeHTML, escClose and overClose will be used if set.
	 							If false, none of them will be used.
	 * closeHTML:		(String:'<a class="modalCloseImg" title="Close"></a>') The HTML for the default close link.
								SimpleModal will automatically add the closeClass to this element.
	 * closeClass:		(String:'simplemodal-close') The CSS class used to bind to the close event
	 * escClose:		(Boolean:true) Allow Esc keypress to close the dialog?
	 * overlayClose:	(Boolean:false) Allow click on overlay to close the dialog?
	 * fixed:			(Boolean:true) If true, the container will use a fixed position. If false, it will use a
								absolute position (the dialog will scroll with the page)
	 * position:		(Array:null) Position of container [top, left]. Can be number of pixels or percentage
	 * persist:			(Boolean:false) Persist the data across modal calls? Only used for existing
								DOM elements. If true, the data will be maintained across modal calls, if false,
								the data will be reverted to its original state.
	 * modal:			(Boolean:true) User will be unable to interact with the page below the modal or tab away from the dialog.
								If false, the overlay, iframe, and certain events will be disabled allowing the user to interact
								with the page below the dialog.
	 * onOpen:			(Function:null) The callback function used in place of SimpleModal's open
	 * onShow:			(Function:null) The callback function used after the modal dialog has opened
	 * onClose:			(Function:null) The callback function used in place of SimpleModal's close
	 */
	$.modal.defaults = {
		appendTo: 'body',
		focus: true,
		opacity: 50,
		overlayId: 'simplemodal-overlay',
		overlayCss: {},
		containerId: 'simplemodal-container',
		containerCss: {},
		dataId: 'simplemodal-data',
		dataCss: {},
		minHeight: null,
		minWidth: null,
		maxHeight: null,
		maxWidth: null,
		autoResize: false,
		autoPosition: true,
		zIndex: 1000,
		close: true,
		closeHTML: '<a class="modalCloseImg" title="Close"></a>',
		closeClass: 'simplemodal-close',
		escClose: true,
		overlayClose: false,
		fixed: true,
		position: null,
		persist: false,
		modal: true,
		onOpen: null,
		onShow: null,
		onClose: null
	};

	/*
	 * Main modal object
	 * o = options
	 */
	$.modal.impl = {
		/*
		 * Contains the modal dialog elements and is the object passed
		 * back to the callback (onOpen, onShow, onClose) functions
		 */
		d: {},
		/*
		 * Initialize the modal dialog
		 */
		init: function (data, options) {
			var s = this;

			// don't allow multiple calls
			if (s.d.data) {
				return false;
			}

			// $.boxModel is undefined if checked earlier
			ieQuirks = $.browser.msie && !$.boxModel;

			// merge defaults and user options
			s.o = $.extend({}, $.modal.defaults, options);

			// keep track of z-index
			s.zIndex = s.o.zIndex;

			// set the onClose callback flag
			s.occb = false;

			// determine how to handle the data based on its type
			if (typeof data === 'object') {
				// convert DOM object to a jQuery object
				data = data instanceof jQuery ? data : $(data);
				s.d.placeholder = false;

				// if the object came from the DOM, keep track of its parent
				if (data.parent().parent().size() > 0) {
					data.before($('<span></span>')
						.attr('id', 'simplemodal-placeholder')
						.css({display: 'none'}));

					s.d.placeholder = true;
					s.display = data.css('display');

					// persist changes? if not, make a clone of the element
					if (!s.o.persist) {
						s.d.orig = data.clone(true);
					}
				}
			}
			else if (typeof data === 'string' || typeof data === 'number') {
				// just insert the data as innerHTML
				data = $('<div></div>').html(data);
			}
			else {
				// unsupported data type!
				alert('SimpleModal Error: Unsupported data type: ' + typeof data);
				return s;
			}

			// create the modal overlay, container and, if necessary, iframe
			s.create(data);
			data = null;

			// display the modal dialog
			s.open();

			// useful for adding events/manipulating data in the modal dialog
			if ($.isFunction(s.o.onShow)) {
				s.o.onShow.apply(s, [s.d]);
			}

			// don't break the chain =)
			return s;
		},
		/*
		 * Create and add the modal overlay and container to the page
		 */
		create: function (data) {
			var s = this;

			// get the window properties
			s.getDimensions();

			// add an iframe to prevent select options from bleeding through
			if (s.o.modal && ie6) {
				s.d.iframe = $('<iframe src="javascript:false;"></iframe>')
					.css($.extend(s.o.iframeCss, {
						display: 'none',
						opacity: 0,
						position: 'fixed',
						height: w[0],
						width: w[1],
						zIndex: s.o.zIndex,
						top: 0,
						left: 0
					}))
					.appendTo(s.o.appendTo);
			}

			// create the overlay
			s.d.overlay = $('<div></div>')
				.attr('id', s.o.overlayId)
				.addClass('simplemodal-overlay')
				.css($.extend(s.o.overlayCss, {
					display: 'none',
					opacity: s.o.opacity / 100,
					height: s.o.modal ? d[0] : 0,
					width: s.o.modal ? d[1] : 0,
					position: 'fixed',
					left: 0,
					top: 0,
					zIndex: s.o.zIndex + 1
				}))
				.appendTo(s.o.appendTo);

			// create the container
			s.d.container = $('<div></div>')
				.attr('id', s.o.containerId)
				.addClass('simplemodal-container')
				.css($.extend(
					{position: s.o.fixed ? 'fixed' : 'absolute'},
					s.o.containerCss,
					{display: 'none', zIndex: s.o.zIndex + 2}
				))
				.append(s.o.close && s.o.closeHTML
					? $(s.o.closeHTML).addClass(s.o.closeClass)
					: '')
				.appendTo(s.o.appendTo);

			s.d.wrap = $('<div></div>')
				.attr('tabIndex', -1)
				.addClass('simplemodal-wrap')
				.css({height: '100%', outline: 0, width: '100%'})
				.appendTo(s.d.container);

			// add styling and attributes to the data
			// append to body to get correct dimensions, then move to wrap
			s.d.data = data
				.attr('id', data.attr('id') || s.o.dataId)
				.addClass('simplemodal-data')
				.css($.extend(s.o.dataCss, {
						display: 'none'
				}))
				.appendTo('body');
			data = null;

			s.setContainerDimensions();
			s.d.data.appendTo(s.d.wrap);

			// fix issues with IE
			if (ie6 || ieQuirks) {
				s.fixIE();
			}
		},
		/*
		 * Bind events
		 */
		bindEvents: function () {
			var s = this;

			// bind the close event to any element with the closeClass class
			$('.' + s.o.closeClass).bind('click.simplemodal', function (e) {
				e.preventDefault();
				s.close();
			});

			// bind the overlay click to the close function, if enabled
			if (s.o.modal && s.o.close && s.o.overlayClose) {
				s.d.overlay.bind('click.simplemodal', function (e) {
					e.preventDefault();
					s.close();
				});
			}

			// bind keydown events
			doc.bind('keydown.simplemodal', function (e) {
				if (s.o.modal && e.keyCode === 9) { // TAB
					s.watchTab(e);
				}
				else if ((s.o.close && s.o.escClose) && e.keyCode === 27) { // ESC
					e.preventDefault();
					s.close();
				}
			});

			// update window size
			wndw.bind('resize.simplemodal orientationchange.simplemodal', function () {
				// redetermine the window width/height
				s.getDimensions();

				// reposition the dialog
				s.o.autoResize ? s.setContainerDimensions() : s.o.autoPosition && s.setPosition();

				if (ie6 || ieQuirks) {
					s.fixIE();
				}
				else if (s.o.modal) {
					// update the iframe & overlay
					s.d.iframe && s.d.iframe.css({height: w[0], width: w[1]});
					s.d.overlay.css({height: d[0], width: d[1]});
				}
			});
		},
		/*
		 * Unbind events
		 */
		unbindEvents: function () {
			$('.' + this.o.closeClass).unbind('click.simplemodal');
			doc.unbind('keydown.simplemodal');
			wndw.unbind('.simplemodal');
			this.d.overlay.unbind('click.simplemodal');
		},
		/*
		 * Fix issues in IE6 and IE7 in quirks mode
		 */
		fixIE: function () {
			var s = this, p = s.o.position;

			// simulate fixed position - adapted from BlockUI
			$.each([s.d.iframe || null, !s.o.modal ? null : s.d.overlay, s.d.container.css('position') === 'fixed' ? s.d.container : null], function (i, el) {
				if (el) {
					var bch = 'document.body.clientHeight', bcw = 'document.body.clientWidth',
						bsh = 'document.body.scrollHeight', bsl = 'document.body.scrollLeft',
						bst = 'document.body.scrollTop', bsw = 'document.body.scrollWidth',
						ch = 'document.documentElement.clientHeight', cw = 'document.documentElement.clientWidth',
						sl = 'document.documentElement.scrollLeft', st = 'document.documentElement.scrollTop',
						s = el[0].style;

					s.position = 'absolute';
					if (i < 2) {
						s.removeExpression('height');
						s.removeExpression('width');
						s.setExpression('height','' + bsh + ' > ' + bch + ' ? ' + bsh + ' : ' + bch + ' + "px"');
						s.setExpression('width','' + bsw + ' > ' + bcw + ' ? ' + bsw + ' : ' + bcw + ' + "px"');
					}
					else {
						var te, le;
						if (p && p.constructor === Array) {
							var top = p[0]
								? typeof p[0] === 'number' ? p[0].toString() : p[0].replace(/px/, '')
								: el.css('top').replace(/px/, '');
							te = top.indexOf('%') === -1
								? top + ' + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"'
								: parseInt(top.replace(/%/, '')) + ' * ((' + ch + ' || ' + bch + ') / 100) + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"';

							if (p[1]) {
								var left = typeof p[1] === 'number' ? p[1].toString() : p[1].replace(/px/, '');
								le = left.indexOf('%') === -1
									? left + ' + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"'
									: parseInt(left.replace(/%/, '')) + ' * ((' + cw + ' || ' + bcw + ') / 100) + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"';
							}
						}
						else {
							te = '(' + ch + ' || ' + bch + ') / 2 - (this.offsetHeight / 2) + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"';
							le = '(' + cw + ' || ' + bcw + ') / 2 - (this.offsetWidth / 2) + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"';
						}
						s.removeExpression('top');
						s.removeExpression('left');
						s.setExpression('top', te);
						s.setExpression('left', le);
					}
				}
			});
		},
		/*
		 * Place focus on the first or last visible input
		 */
		focus: function (pos) {
			var s = this, p = pos && $.inArray(pos, ['first', 'last']) !== -1 ? pos : 'first';

			// focus on dialog or the first visible/enabled input element
			var input = $(':input:enabled:visible:' + p, s.d.wrap);
			setTimeout(function () {
				input.length > 0 ? input.focus() : s.d.wrap.focus();
			}, 10);
		},
		getDimensions: function () {
			// fix a jQuery/Opera bug with determining the window height
			var s = this,
				h = $.browser.opera && $.browser.version > '9.5' && $.fn.jquery < '1.3'
						|| $.browser.opera && $.browser.version < '9.5' && $.fn.jquery > '1.2.6'
				? wndw[0].innerHeight : wndw.height();

			d = [doc.height(), doc.width()];
			w = [h, wndw.width()];
		},
		getVal: function (v, d) {
			return v ? (typeof v === 'number' ? v
					: v === 'auto' ? 0
					: v.indexOf('%') > 0 ? ((parseInt(v.replace(/%/, '')) / 100) * (d === 'h' ? w[0] : w[1]))
					: parseInt(v.replace(/px/, '')))
				: null;
		},
		/*
		 * Update the container. Set new dimensions, if provided.
		 * Focus, if enabled. Re-bind events.
		 */
		update: function (height, width) {
			var s = this;

			// prevent update if dialog does not exist
			if (!s.d.data) {
				return false;
			}

			// reset orig values
			s.d.origHeight = s.getVal(height, 'h');
			s.d.origWidth = s.getVal(width, 'w');

			// hide data to prevent screen flicker
			s.d.data.hide();
			height && s.d.container.css('height', height);
			width && s.d.container.css('width', width);
			s.setContainerDimensions();
			s.d.data.show();
			s.o.focus && s.focus();

			// rebind events
			s.unbindEvents();
			s.bindEvents();
		},
		setContainerDimensions: function () {
			var s = this,
				badIE = ie6 || ie7;

			// get the dimensions for the container and data
			var ch = s.d.origHeight ? s.d.origHeight : $.browser.opera ? s.d.container.height() : s.getVal(badIE ? s.d.container[0].currentStyle['height'] : s.d.container.css('height'), 'h'),
				cw = s.d.origWidth ? s.d.origWidth : $.browser.opera ? s.d.container.width() : s.getVal(badIE ? s.d.container[0].currentStyle['width'] : s.d.container.css('width'), 'w'),
				dh = s.d.data.outerHeight(true), dw = s.d.data.outerWidth(true);

			s.d.origHeight = s.d.origHeight || ch;
			s.d.origWidth = s.d.origWidth || cw;

			// mxoh = max option height, mxow = max option width
			var mxoh = s.o.maxHeight ? s.getVal(s.o.maxHeight, 'h') : null,
				mxow = s.o.maxWidth ? s.getVal(s.o.maxWidth, 'w') : null,
				mh = mxoh && mxoh < w[0] ? mxoh : w[0],
				mw = mxow && mxow < w[1] ? mxow : w[1];

			// moh = min option height
			var moh = s.o.minHeight ? s.getVal(s.o.minHeight, 'h') : 'auto';
			if (!ch) {
				if (!dh) {ch = moh;}
				else {
					if (dh > mh) {ch = mh;}
					else if (s.o.minHeight && moh !== 'auto' && dh < moh) {ch = moh;}
					else {ch = dh;}
				}
			}
			else {
				ch = s.o.autoResize && ch > mh ? mh : ch < moh ? moh : ch;
			}

			// mow = min option width
			var mow = s.o.minWidth ? s.getVal(s.o.minWidth, 'w') : 'auto'; 
			if (!cw) {
				if (!dw) {cw = mow;}
				else {
					if (dw > mw) {cw = mw;}
					else if (s.o.minWidth && mow !== 'auto' && dw < mow) {cw = mow;}
					else {cw = dw;}
				}
			}
			else {
				cw = s.o.autoResize && cw > mw ? mw : cw < mow ? mow : cw;
			}

			s.d.container.css({"min-height": ch, "width": cw});
//			s.d.wrap.css({overflow: (dh > ch || dw > cw) ? 'auto' : 'visible'});
			s.o.autoPosition && s.setPosition();
		},
		setPosition: function () {
			var s = this, top, left,
				hc = (w[0]/2) - (s.d.container.outerHeight(true)/2),
				vc = (w[1]/2) - (s.d.container.outerWidth(true)/2),
				st = s.d.container.css('position') !== 'fixed' ? wndw.scrollTop() : 0;

			if (s.o.position && Object.prototype.toString.call(s.o.position) === '[object Array]') {
				top = st + (s.o.position[0] || hc);
				left = s.o.position[1] || vc;
			} else {
				top = st + hc;
				left = vc;
			}
			s.d.container.css({left: left, top: top});
		},
		watchTab: function (e) {
			var s = this;

			if ($(e.target).parents('.simplemodal-container').length > 0) {
				// save the list of inputs
				s.inputs = $(':input:enabled:visible:first, :input:enabled:visible:last', s.d.data[0]);

				// if it's the first or last tabbable element, refocus
				if ((!e.shiftKey && e.target === s.inputs[s.inputs.length -1]) ||
						(e.shiftKey && e.target === s.inputs[0]) ||
						s.inputs.length === 0) {
					e.preventDefault();
					var pos = e.shiftKey ? 'last' : 'first';
					s.focus(pos);
				}
			}
			else {
				// might be necessary when custom onShow callback is used
				e.preventDefault();
				s.focus();
			}
		},
		/*
		 * Open the modal dialog elements
		 * - Note: If you use the onOpen callback, you must "show" the
		 *			overlay and container elements manually
		 *		 (the iframe will be handled by SimpleModal)
		 */
		open: function () {
			var s = this;
			// display the iframe
			s.d.iframe && s.d.iframe.show();

			if ($.isFunction(s.o.onOpen)) {
				// execute the onOpen callback
				s.o.onOpen.apply(s, [s.d]);
			}
			else {
				// display the remaining elements
				s.d.overlay.show();
				s.d.container.show();
				s.d.data.show();
			}

			s.o.focus && s.focus();

			// bind default events
			s.bindEvents();
		},
		/*
		 * Close the modal dialog
		 * - Note: If you use an onClose callback, you must remove the
		 *         overlay, container and iframe elements manually
		 *
		 * @param {boolean} external Indicates whether the call to this
		 *     function was internal or external. If it was external, the
		 *     onClose callback will be ignored
		 */
		close: function () {
			var s = this;

			// prevent close when dialog does not exist
			if (!s.d.data) {
				return false;
			}

			// remove the default events
			s.unbindEvents();

			if ($.isFunction(s.o.onClose) && !s.occb) {
				// set the onClose callback flag
				s.occb = true;

				// execute the onClose callback
				s.o.onClose.apply(s, [s.d]);
			}
			else {
				// if the data came from the DOM, put it back
				if (s.d.placeholder) {
					var ph = $('#simplemodal-placeholder');
					// save changes to the data?
					if (s.o.persist) {
						// insert the (possibly) modified data back into the DOM
						ph.replaceWith(s.d.data.removeClass('simplemodal-data').css('display', s.display));
					}
					else {
						// remove the current and insert the original,
						// unmodified data back into the DOM
						s.d.data.hide().remove();
						ph.replaceWith(s.d.orig);
					}
				}
				else {
					// otherwise, remove it
					s.d.data.hide().remove();
				}

				// remove the remaining elements
				s.d.container.hide().remove();
				s.d.overlay.hide();
				s.d.iframe && s.d.iframe.hide().remove();
				s.d.overlay.remove();

				// reset the dialog object
				s.d = {};
			}
		}
	};
}));
/**
 * Slideshow Lite plugin for jQuery
 *
 * v0.8.1
 *
 * Copyright (c) 2009 Fred Wu
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

/**
 * Usage:
 *
 * // using default options
 * $("#slideshow").slideshow();
 *
 * // using some custom options
 * $("#slideshow2").slideshow({
 *   pauseSeconds: 4,
 *   height: 200,
 *   caption: false
 * });
 *
 * Configuration options:
 *
 * pauseSeconds  float    number of seconds between each photo to be displayed
 * fadeSpeed     float    number of seconds for the fading transition, the value should not exceed `pauseSeconds`
 * width         integer  width of the slideshow, in pixels
 * height        integer  height of the slideshow, in pixels
 * caption       boolean  display photo caption?
 * cssClass      string   name of the CSS class, defaults to `slideshowlite`
 * anchorTarget  string   name for the target="_xxx" attribute, defaults to `_self`
 */

(function($){
  $.fn.slideshow = function(options){

    var defaults = {
      pauseSeconds: 2,
      fadeSpeed: 0.5,
      width: 468,
      height: 120,
      caption: true,
      cssClass: 'slideshowlite',
      anchorTarget: '_self'
    };

    var options = $.extend(defaults, options);

    // ----------------------------------------
    // slideshow instance
    // ----------------------------------------

    var runInstance = function(target) {
      var items  = $("a", target);
      var instance;

      // ----------------------------------------
      // some mandontory styling
      // ----------------------------------------

      if ( ! $(target).hasClass(options.cssClass)) $(target).addClass(options.cssClass);

      $(target).css({
        width: options.width + "px",
        height: options.height + "px"
      });

      // ----------------------------------------
      // create anchor links to make the structure simpler for manupilation
      // ----------------------------------------

      $("> img", target).wrap(document.createElement("a"));
      $("a", target).attr("target", options.anchorTarget);

      // ----------------------------------------
      // add item sequence markups
      // ----------------------------------------

      var i = 1;
      $("a", target).each(function(){
        $(this).attr("data-seq", i++);
      });

      // ----------------------------------------
      // create pagination and caption
      // ----------------------------------------

      $(target).append("<ul></ul>");
      $(target).append("<ol></ol>");
      var pagination = $("> ul", target);
      var caption = $("> ol", target);

      var i = 1;
      var j = 0;
      $("a", target).each(function(){
        pagination.append("<li><a href=\"#\">" + i++ + "</a></li>");
        caption.append("<li>" + $("img:nth(" + j++ + ")", target).attr("alt") + "</li>");
      });
      pagination.fadeTo(0, 0.8);
      caption.fadeTo(0, 0.6);
      caption.hide();

      // ----------------------------------------
      // shortcuts
      // ----------------------------------------

      var firstItem   = $("> a:first", target);
      var lastItem    = $("> a:last", target);
      var currentItem = firstItem;

      // ----------------------------------------
      // pagination highlight
      // ----------------------------------------

      var paginationHighlight = function(sequence){
        $("> li > a", pagination).removeClass("current");
        $("> li > a:nth(" + sequence + ")", pagination).addClass("current");
      };

      // ----------------------------------------
      // caption
      // ----------------------------------------

      var showCaption = function(sequence){
        caption.show();
        $("> li", caption).hide();
        $("> li:nth(" + sequence + ")", caption).fadeIn();
      };

      // ----------------------------------------
      // slideshow logic
      // ----------------------------------------

      var makeSlideshow = function(){

        // pagination click
        $("> li > a", pagination).click(function(){
          if ( ! $(this).hasClass("current"))
          {
            // select the current item after the pagination click
            currentItem = $("a:nth(" + ($(this).text()-1) + ")", target);

            currentItem.show();
            startSlideshow();
          }
          return false;
        });

        // pagination highlight
        paginationHighlight(currentItem.data("seq")-1);

        // show caption
        if (options.caption == true)
        {
          showCaption(currentItem.data("seq")-1);
        }

        currentItem.css("z-index", 2);

        // show the current slide
        currentItem.fadeIn(options.fadeSpeed*1000, function(){
          $("> a", target).hide();
          $(this).show().css("z-index", 1);
        });

        // prepare for the next slide
        // determines the next item (or we need to rewind to the first item?)
        if ($("img", currentItem).attr("src") == $("img", lastItem).attr("src"))
        {
          currentItem = firstItem;
        }
        else
        {
          currentItem = currentItem.next();
        }

        currentItem.css("z-index", 1);
      };

      var startSlideshow = function(){
        clearInterval(instance);
        makeSlideshow();
        instance = setInterval(makeSlideshow, options.pauseSeconds*1000);
      };

      // ----------------------------------------
      // start the slideshow!
      // ----------------------------------------

      startSlideshow();
    };

    // ----------------------------------------
    // run the slideshow instances!
    // ----------------------------------------

    if (this.length > 1) {
      this.each(function() {
        runInstance(this);
      });
    } else {
      runInstance(this);
    }

  };
})(jQuery);/*
 * jQuery Templates Plugin 1.0.0pre
 * http://github.com/jquery/jquery-tmpl
 * Requires jQuery 1.4.2
 *
 * Copyright 2011, Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */
(function(a){var r=a.fn.domManip,d="_tmplitem",q=/^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,b={},f={},e,p={key:0,data:{}},i=0,c=0,l=[];function g(g,d,h,e){var c={data:e||(e===0||e===false)?e:d?d.data:{},_wrap:d?d._wrap:null,tmpl:null,parent:d||null,nodes:[],calls:u,nest:w,wrap:x,html:v,update:t};g&&a.extend(c,g,{nodes:[],parent:d});if(h){c.tmpl=h;c._ctnt=c._ctnt||c.tmpl(a,c);c.key=++i;(l.length?f:b)[i]=c}return c}a.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(f,d){a.fn[f]=function(n){var g=[],i=a(n),k,h,m,l,j=this.length===1&&this[0].parentNode;e=b||{};if(j&&j.nodeType===11&&j.childNodes.length===1&&i.length===1){i[d](this[0]);g=this}else{for(h=0,m=i.length;h<m;h++){c=h;k=(h>0?this.clone(true):this).get();a(i[h])[d](k);g=g.concat(k)}c=0;g=this.pushStack(g,f,i.selector)}l=e;e=null;a.tmpl.complete(l);return g}});a.fn.extend({tmpl:function(d,c,b){return a.tmpl(this[0],d,c,b)},tmplItem:function(){return a.tmplItem(this[0])},template:function(b){return a.template(b,this[0])},domManip:function(d,m,k){if(d[0]&&a.isArray(d[0])){var g=a.makeArray(arguments),h=d[0],j=h.length,i=0,f;while(i<j&&!(f=a.data(h[i++],"tmplItem")));if(f&&c)g[2]=function(b){a.tmpl.afterManip(this,b,k)};r.apply(this,g)}else r.apply(this,arguments);c=0;!e&&a.tmpl.complete(b);return this}});a.extend({tmpl:function(d,h,e,c){var i,k=!c;if(k){c=p;d=a.template[d]||a.template(null,d);f={}}else if(!d){d=c.tmpl;b[c.key]=c;c.nodes=[];c.wrapped&&n(c,c.wrapped);return a(j(c,null,c.tmpl(a,c)))}if(!d)return[];if(typeof h==="function")h=h.call(c||{});e&&e.wrapped&&n(e,e.wrapped);i=a.isArray(h)?a.map(h,function(a){return a?g(e,c,d,a):null}):[g(e,c,d,h)];return k?a(j(c,null,i)):i},tmplItem:function(b){var c;if(b instanceof a)b=b[0];while(b&&b.nodeType===1&&!(c=a.data(b,"tmplItem"))&&(b=b.parentNode));return c||p},template:function(c,b){if(b){if(typeof b==="string")b=o(b);else if(b instanceof a)b=b[0]||{};if(b.nodeType)b=a.data(b,"tmpl")||a.data(b,"tmpl",o(b.innerHTML));return typeof c==="string"?(a.template[c]=b):b}return c?typeof c!=="string"?a.template(null,c):a.template[c]||a.template(null,q.test(c)?c:a(c)):null},encode:function(a){return(""+a).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;")}});a.extend(a.tmpl,{tag:{tmpl:{_default:{$2:"null"},open:"if($notnull_1){__=__.concat($item.nest($1,$2));}"},wrap:{_default:{$2:"null"},open:"$item.calls(__,$1,$2);__=[];",close:"call=$item.calls();__=call._.concat($item.wrap(call,__));"},each:{_default:{$2:"$index, $value"},open:"if($notnull_1){$.each($1a,function($2){with(this){",close:"}});}"},"if":{open:"if(($notnull_1) && $1a){",close:"}"},"else":{_default:{$1:"true"},open:"}else if(($notnull_1) && $1a){"},html:{open:"if($notnull_1){__.push($1a);}"},"=":{_default:{$1:"$data"},open:"if($notnull_1){__.push($.encode($1a));}"},"!":{open:""}},complete:function(){b={}},afterManip:function(f,b,d){var e=b.nodeType===11?a.makeArray(b.childNodes):b.nodeType===1?[b]:[];d.call(f,b);m(e);c++}});function j(e,g,f){var b,c=f?a.map(f,function(a){return typeof a==="string"?e.key?a.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g,"$1 "+d+'="'+e.key+'" $2'):a:j(a,e,a._ctnt)}):e;if(g)return c;c=c.join("");c.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/,function(f,c,e,d){b=a(e).get();m(b);if(c)b=k(c).concat(b);if(d)b=b.concat(k(d))});return b?b:k(c)}function k(c){var b=document.createElement("div");b.innerHTML=c;return a.makeArray(b.childNodes)}function o(b){return new Function("jQuery","$item","var $=jQuery,call,__=[],$data=$item.data;with($data){__.push('"+a.trim(b).replace(/([\\'])/g,"\\$1").replace(/[\r\t\n]/g," ").replace(/\$\{([^\}]*)\}/g,"{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,function(m,l,k,g,b,c,d){var j=a.tmpl.tag[k],i,e,f;if(!j)throw"Unknown template tag: "+k;i=j._default||[];if(c&&!/\w$/.test(b)){b+=c;c=""}if(b){b=h(b);d=d?","+h(d)+")":c?")":"";e=c?b.indexOf(".")>-1?b+h(c):"("+b+").call($item"+d:b;f=c?e:"(typeof("+b+")==='function'?("+b+").call($item):("+b+"))"}else f=e=i.$1||"null";g=h(g);return"');"+j[l?"close":"open"].split("$notnull_1").join(b?"typeof("+b+")!=='undefined' && ("+b+")!=null":"true").split("$1a").join(f).split("$1").join(e).split("$2").join(g||i.$2||"")+"__.push('"})+"');}return __;")}function n(c,b){c._wrap=j(c,true,a.isArray(b)?b:[q.test(b)?b:a(b).html()]).join("")}function h(a){return a?a.replace(/\\'/g,"'").replace(/\\\\/g,"\\"):null}function s(b){var a=document.createElement("div");a.appendChild(b.cloneNode(true));return a.innerHTML}function m(o){var n="_"+c,k,j,l={},e,p,h;for(e=0,p=o.length;e<p;e++){if((k=o[e]).nodeType!==1)continue;j=k.getElementsByTagName("*");for(h=j.length-1;h>=0;h--)m(j[h]);m(k)}function m(j){var p,h=j,k,e,m;if(m=j.getAttribute(d)){while(h.parentNode&&(h=h.parentNode).nodeType===1&&!(p=h.getAttribute(d)));if(p!==m){h=h.parentNode?h.nodeType===11?0:h.getAttribute(d)||0:0;if(!(e=b[m])){e=f[m];e=g(e,b[h]||f[h]);e.key=++i;b[i]=e}c&&o(m)}j.removeAttribute(d)}else if(c&&(e=a.data(j,"tmplItem"))){o(e.key);b[e.key]=e;h=a.data(j.parentNode,"tmplItem");h=h?h.key:0}if(e){k=e;while(k&&k.key!=h){k.nodes.push(j);k=k.parent}delete e._ctnt;delete e._wrap;a.data(j,"tmplItem",e)}function o(a){a=a+n;e=l[a]=l[a]||g(e,b[e.parent.key+n]||e.parent)}}}function u(a,d,c,b){if(!a)return l.pop();l.push({_:a,tmpl:d,item:this,data:c,options:b})}function w(d,c,b){return a.tmpl(a.template(d),c,b,this)}function x(b,d){var c=b.options||{};c.wrapped=d;return a.tmpl(a.template(b.tmpl),b.data,c,b.item)}function v(d,c){var b=this._wrap;return a.map(a(a.isArray(b)?b.join(""):b).filter(d||"*"),function(a){return c?a.innerText||a.textContent:a.outerHTML||s(a)})}function t(){var b=this.nodes;a.tmpl(null,null,null,this).insertBefore(b[0]);a(b).remove()}})(jQuery);/**
 * jQuery Validation Plugin 1.9.0
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright (c) 2006 - 2011 JÃ¶rn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

(function($) {

$.extend($.fn, {
	// http://docs.jquery.com/Plugins/Validation/validate
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length) {
			options && options.debug && window.console && console.warn( "nothing selected, can't validate, returning nothing" );
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data(this[0], 'validator');
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr('novalidate', 'novalidate');

		validator = new $.validator( options, this[0] );
		$.data(this[0], 'validator', validator);

		if ( validator.settings.onsubmit ) {

			var inputsAndButtons = this.find("input, button");

			// allow suppresing validation by adding a cancel class to the submit button
			inputsAndButtons.filter(".cancel").click(function () {
				validator.cancelSubmit = true;
			});

			// when a submitHandler is used, capture the submitting button
			if (validator.settings.submitHandler) {
				inputsAndButtons.filter(":submit").click(function () {
					validator.submitButton = this;
				});
			}

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug )
					// prevent form submit to be able to see console output
					event.preventDefault();

				function handle() {
					if ( validator.settings.submitHandler ) {
						if (validator.submitButton) {
							// insert a hidden input as a replacement for the missing submit button
							var hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
						}
						validator.settings.submitHandler.call( validator, validator.currentForm );
						if (validator.submitButton) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://docs.jquery.com/Plugins/Validation/valid
	valid: function() {
        if ( $(this[0]).is('form')) {
            return this.validate().form();
        } else {
            var valid = true;
            var validator = $(this[0].form).validate();
            this.each(function() {
				valid &= validator.element(this);
            });
            return valid;
        }
    },
	// attributes: space seperated list of attributes to retrieve and remove
	removeAttrs: function(attributes) {
		var result = {},
			$element = this;
		$.each(attributes.split(/\s/), function(index, value) {
			result[value] = $element.attr(value);
			$element.removeAttr(value);
		});
		return result;
	},
	// http://docs.jquery.com/Plugins/Validation/rules
	rules: function(command, argument) {
		var element = this[0];

		if (command) {
			var settings = $.data(element.form, 'validator').settings;
			var staticRules = settings.rules;
			var existingRules = $.validator.staticRules(element);
			switch(command) {
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				staticRules[element.name] = existingRules;
				if (argument.messages)
					settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
				break;
			case "remove":
				if (!argument) {
					delete staticRules[element.name];
					return existingRules;
				}
				var filtered = {};
				$.each(argument.split(/\s/), function(index, method) {
					filtered[method] = existingRules[method];
					delete existingRules[method];
				});
				return filtered;
			}
		}

		var data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.metadataRules(element),
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.staticRules(element)
		), element);

		// make sure required is at front
		if (data.required) {
			var param = data.required;
			delete data.required;
			data = $.extend({required: param}, data);
		}

		return data;
	}
});

// Custom selectors
$.extend($.expr[":"], {
	// http://docs.jquery.com/Plugins/Validation/blank
	blank: function(a) {return !$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/filled
	filled: function(a) {return !!$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/unchecked
	unchecked: function(a) {return !a.checked;}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

$.validator.format = function(source, params) {
	if ( arguments.length == 1 )
		return function() {
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply( this, args );
		};
	if ( arguments.length > 2 && params.constructor != Array  ) {
		params = $.makeArray(arguments).slice(1);
	}
	if ( params.constructor != Array ) {
		params = [ params ];
	}
	$.each(params, function(i, n) {
        //if params of {0}, {1} have translate the translate
        if($.validator.messages[n]) {
            n = $.i18n.prop(n);
        }
		source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
	});
	return source;
};

$.extend($.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function(element, event) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
				this.settings.unhighlight && this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				this.addWrapper(this.errorsFor(element)).hide();
			}
		},
		onfocusout: function(element, event) {
			if ( !this.checkable(element) && (element.name in this.submitted || !this.optional(element)) ) {
				this.element(element);
			}
		},
		onkeyup: function(element, event) {
			if ( element.name in this.submitted || element == this.lastElement ) {
				this.element(element);
			}
		},
		onclick: function(element, event) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted )
				this.element(element);
			// or option elements, check parent select in that case
			else if (element.parentNode.name in this.submitted)
				this.element(element.parentNode);
		},
		highlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
	setDefaults: function(settings) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		accept: "Please enter a value with a valid extension.",
		maxlength: $.validator.format("Please enter no more than {0} characters."),
		minlength: $.validator.format("Please enter at least {0} characters."),
		rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
		range: $.validator.format("Please enter a value between {0} and {1}."),
		max: $.validator.format("Please enter a value less than or equal to {0}."),
		min: $.validator.format("Please enter a value greater than or equal to {0}.")
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {});
			$.each(this.settings.groups, function(key, value) {
				$.each(value.split(/\s/), function(index, name) {
					groups[name] = key;
				});
			});
			var rules = this.settings.rules;
			$.each(rules, function(key, value) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, "");
				validator.settings[eventType] && validator.settings[eventType].call(validator, this[0], event);
			}
			$(this.currentForm)
			       .validateDelegate("[type='text'], [type='password'], [type='file'], select, textarea, " +
						"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
						"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
						"[type='week'], [type='time'], [type='datetime-local'], " +
						"[type='range'], [type='color'] ",
						"focusin focusout keyup", delegate)
				.validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);

			if (this.settings.invalidHandler)
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/form
		form: function() {
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if (!this.valid())
				$(this.currentForm).triggerHandler("invalid-form", [this]);
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
				this.check( elements[i] );
			}
			return this.valid();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/element
		element: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );
			this.lastElement = element;
			this.prepareElement( element );
			this.currentElements = $(element);
			var result = this.check( element );
			if ( result ) {
				delete this.invalid[element.name];
			} else {
				this.invalid[element.name] = true;
			}
			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/showErrors
		showErrors: function(errors) {
			if(errors) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[name],
						element: this.findByName(name)[0]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function(element) {
					return !(element.name in errors);
				});
			}
			this.settings.showErrors
				? this.settings.showErrors.call( this, this.errorMap, this.errorList )
				: this.defaultShowErrors();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/resetForm
		resetForm: function() {
			if ( $.fn.resetForm )
				$( this.currentForm ).resetForm();
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements().removeClass( this.settings.errorClass );
		},

		numberOfInvalids: function() {
			return this.objectLength(this.invalid);
		},

		objectLength: function( obj ) {
			var count = 0;
			for ( var i in obj )
				count++;
			return count;
		},

		hideErrors: function() {
			this.addWrapper( this.toHide ).hide();
		},

		valid: function() {
			return this.size() == 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if( this.settings.focusInvalid ) {
				try {
					$(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
					.filter(":visible")
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep(this.errorList, function(n) {
				return n.element.name == lastActive.name;
			}).length == 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				!this.name && validator.settings.debug && window.console && console.error( "%o has no name assigned", this);

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) )
					return false;

				rulesCache[this.name] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[0];
		},

		errors: function() {
			return $( this.settings.errorElement + "." + this.settings.errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $([]);
			this.toHide = $([]);
			this.currentElements = $([]);
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor(element);
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $(element).rules();
			var dependencyMismatch = false;
			for (var method in rules ) {
				var rule = { method: method, parameters: rules[method] };
				try {
					var result = $.validator.methods[method].call( this, element.value.replace(/\r/g, ""), element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result == "dependency-mismatch" ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result == "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor(element) );
						return;
					}

					if( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch(e) {
					this.settings.debug && window.console && console.log("exception occured when checking element " + element.id
						 + ", check the '" + rule.method + "' method", e);
					throw e;
				}
			}
			if (dependencyMismatch)
				return;
			if ( this.objectLength(rules) )
				this.successList.push(element);
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's "messages" metadata
		customMetaMessage: function(element, method) {
			if (!$.metadata)
				return;

			var meta = this.settings.meta
				? $(element).metadata()[this.settings.meta]
				: $(element).metadata();

			return meta && meta.messages && meta.messages[method];
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[name];
			return m && (m.constructor == String
				? m
				: m[method]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for(var i = 0; i < arguments.length; i++) {
				if (arguments[i] !== undefined)
					return arguments[i];
			}
			return undefined;
		},

		defaultMessage: function( element, method) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customMetaMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[method],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message == "function" ) {
				message = message.call(this, rule.parameters, element);
			} else if (theregex.test(message)) {
				message = jQuery.format(message.replace(theregex, '{$1}'), rule.parameters);
			}
			this.errorList.push({
				message: message,
				element: element
			});

			this.errorMap[element.name] = message;
			this.submitted[element.name] = message;
		},

		addWrapper: function(toToggle) {
			if ( this.settings.wrapper )
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			return toToggle;
		},

		defaultShowErrors: function() {
			for ( var i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				this.settings.highlight && this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				this.showLabel( error.element, error.message );
			}
			if( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if (this.settings.success) {
				for ( var i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if (this.settings.unhighlight) {
				for ( var i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not(this.invalidElements());
		},

		invalidElements: function() {
			return $(this.errorList).map(function() {
				return this.element;
			});
		},

		showLabel: function(element, message) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// refresh error/success class
				label.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// check if we have a generated label, replace the message then
				label.attr("generated") && label.html(message);
			} else {
				// create label
				label = $("<" + this.settings.errorElement + "/>")
					.attr({"for":  this.idOrName(element), generated: true})
					.addClass(this.settings.errorClass)
					.html(message || "");
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
				}
				if ( !this.labelContainer.append(label).length )
					this.settings.errorPlacement
						? this.settings.errorPlacement(label, $(element) )
						: label.insertAfter(element);
			}
			if ( !message && this.settings.success ) {
				label.text("");
				typeof this.settings.success == "string"
					? label.addClass( this.settings.success )
					: this.settings.success( label );
			}
			this.toShow = this.toShow.add(label);
		},

		errorsFor: function(element) {
			var name = this.idOrName(element);
    		return this.errors().filter(function() {
				return $(this).attr('for') == name;
			});
		},

		idOrName: function(element) {
			return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
		},

		validationTargetFor: function(element) {
			// if radio/checkbox, validate first element in group instead
			if (this.checkable(element)) {
				element = this.findByName( element.name ).not(this.settings.ignore)[0];
			}
			return element;
		},

		checkable: function( element ) {
			return /radio|checkbox/i.test(element.type);
		},

		findByName: function( name ) {
			// select by name and filter by form for performance over form.find("[name=...]")
			var form = this.currentForm;
			return $(document.getElementsByName(name)).map(function(index, element) {
				return element.form == form && element.name == name && element  || null;
			});
		},

		getLength: function(value, element) {
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				return $("option:selected", element).length;
			case 'input':
				if( this.checkable( element) )
					return this.findByName(element.name).filter(':checked').length;
			}
			return value.length;
		},

		depend: function(param, element) {
			return this.dependTypes[typeof param]
				? this.dependTypes[typeof param](param, element)
				: true;
		},

		dependTypes: {
			"boolean": function(param, element) {
				return param;
			},
			"string": function(param, element) {
				return !!$(param, element.form).length;
			},
			"function": function(param, element) {
				return param(element);
			}
		},

		optional: function(element) {
			return !$.validator.methods.required.call(this, $.trim(element.value), element) && "dependency-mismatch";
		},

		startRequest: function(element) {
			if (!this.pending[element.name]) {
				this.pendingRequest++;
				this.pending[element.name] = true;
			}
		},

		stopRequest: function(element, valid) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if (this.pendingRequest < 0)
				this.pendingRequest = 0;
			delete this.pending[element.name];
			if ( valid && this.pendingRequest == 0 && this.formSubmitted && this.form() ) {
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest == 0 && this.formSubmitted) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
				this.formSubmitted = false;
			}
		},

		previousValue: function(element) {
			return $.data(element, "previousValue") || $.data(element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: {required: true},
		email: {email: true},
		url: {url: true},
		date: {date: true},
		dateISO: {dateISO: true},
		dateDE: {dateDE: true},
		number: {number: true},
		numberDE: {numberDE: true},
		digits: {digits: true},
		creditcard: {creditcard: true}
	},

	addClassRules: function(className, rules) {
		className.constructor == String ?
			this.classRuleSettings[className] = rules :
			$.extend(this.classRuleSettings, className);
	},

	classRules: function(element) {
		var rules = {};
		var classes = $(element).attr('class');
		classes && $.each(classes.split(' '), function() {
			if (this in $.validator.classRuleSettings) {
				$.extend(rules, $.validator.classRuleSettings[this]);
			}
		});
		return rules;
	},

	attributeRules: function(element) {
		var rules = {};
		var $element = $(element);

		for (var method in $.validator.methods) {
			var value;
			// If .prop exists (jQuery >= 1.6), use it to get true/false for required
			if (method === 'required' && typeof $.fn.prop === 'function') {
				value = $element.prop(method);
			} else {
				value = $element.attr(method);
			}
			if (value) {
				rules[method] = value;
			} else if ($element[0].getAttribute("type") === method) {
				rules[method] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
		if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
			delete rules.maxlength;
		}

		return rules;
	},

	metadataRules: function(element) {
		if (!$.metadata) return {};

		var meta = $.data(element.form, 'validator').settings.meta;
		return meta ?
			$(element).metadata()[meta] :
			$(element).metadata();
	},

	staticRules: function(element) {
		var rules = {};
		var validator = $.data(element.form, 'validator');
		if (validator.settings.rules) {
			rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
		}
		return rules;
	},

	normalizeRules: function(rules, element) {
		// handle dependency check
		$.each(rules, function(prop, val) {
			// ignore rule when param is explicitly false, eg. required:false
			if (val === false) {
				delete rules[prop];
				return;
			}
			if (val.param || val.depends) {
				var keepRule = true;
				switch (typeof val.depends) {
					case "string":
						keepRule = !!$(val.depends, element.form).length;
						break;
					case "function":
						keepRule = val.depends.call(element, element);
						break;
				}
				if (keepRule) {
					rules[prop] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[prop];
				}
			}
		});

		// evaluate parameters
		$.each(rules, function(rule, parameter) {
			rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
		});

		// clean number parameters
		$.each(['minlength', 'maxlength', 'min', 'max'], function() {
			if (rules[this]) {
				rules[this] = Number(rules[this]);
			}
		});
		$.each(['rangelength', 'range'], function() {
			if (rules[this]) {
				rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
			}
		});

		if ($.validator.autoCreateRanges) {
			// auto-create ranges
			if (rules.min && rules.max) {
				rules.range = [rules.min, rules.max];
				delete rules.min;
				delete rules.max;
			}
			if (rules.minlength && rules.maxlength) {
				rules.rangelength = [rules.minlength, rules.maxlength];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		// To support custom messages in metadata ignore rule methods titled "messages"
		if (rules.messages) {
			delete rules.messages;
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function(data) {
		if( typeof data == "string" ) {
			var transformed = {};
			$.each(data.split(/\s/), function() {
				transformed[this] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/addMethod
	addMethod: function(name, method, message) {
		$.validator.methods[name] = method;
		$.validator.messages[name] = message != undefined ? message : $.validator.messages[name];
		if (method.length < 3) {
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},

	methods: {

		// http://docs.jquery.com/Plugins/Validation/Methods/required
		required: function(value, element, param) {
			// check if dependency is met
			if ( !this.depend(param, element) )
				return "dependency-mismatch";
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				// could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val && val.length > 0;
			case 'input':
				if ( this.checkable(element) )
					return this.getLength(value, element) > 0;
			default:
				return $.trim(value).length > 0;
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/remote
		remote: function(value, element, param) {
			if ( this.optional(element) )
				return "dependency-mismatch";

			var previous = this.previousValue(element);
			if (!this.settings.messages[element.name] )
				this.settings.messages[element.name] = {};
			previous.originalMessage = this.settings.messages[element.name].remote;
			this.settings.messages[element.name].remote = previous.message;

			param = typeof param == "string" && {url:param} || param;

			if ( this.pending[element.name] ) {
				return "pending";
			}
			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			var validator = this;
			this.startRequest(element);
			var data = {};
			data[element.name] = value;
			$.ajax($.extend(true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				success: function(response) {
					validator.settings.messages[element.name].remote = previous.originalMessage;
					var valid = response === true;
					if ( valid ) {
						var submitted = validator.formSubmitted;
						validator.prepareElement(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						validator.showErrors();
					} else {
						var errors = {};
						var message = response || validator.defaultMessage( element, "remote" );
						errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/minlength
		minlength: function(value, element, param) {
			return this.optional(element) || this.getLength($.trim(value), element) >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/maxlength
		maxlength: function(value, element, param) {
			return this.optional(element) || this.getLength($.trim(value), element) <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/rangelength
		rangelength: function(value, element, param) {
			var length = this.getLength($.trim(value), element);
			return this.optional(element) || ( length >= param[0] && length <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/min
		min: function( value, element, param ) {
			return this.optional(element) || value >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/max
		max: function( value, element, param ) {
			return this.optional(element) || value <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/range
		range: function( value, element, param ) {
			return this.optional(element) || ( value >= param[0] && value <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/email
		email: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
			return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/url
		url: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/date
		date: function(value, element) {
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/dateISO
		dateISO: function(value, element) {
			return this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/number
		number: function(value, element) {
			return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/digits
		digits: function(value, element) {
			return this.optional(element) || /^\d+$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/creditcard
		// based on http://en.wikipedia.org/wiki/Luhn
		creditcard: function(value, element) {
			if ( this.optional(element) )
				return "dependency-mismatch";
			// accept only spaces, digits and dashes
			if (/[^0-9 -]+/.test(value))
				return false;
			var nCheck = 0,
				nDigit = 0,
				bEven = false;

			value = value.replace(/\D/g, "");

			for (var n = value.length - 1; n >= 0; n--) {
				var cDigit = value.charAt(n);
				var nDigit = parseInt(cDigit, 10);
				if (bEven) {
					if ((nDigit *= 2) > 9)
						nDigit -= 9;
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) == 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/accept
		accept: function(value, element, param) {
			param = typeof param == "string" ? param.replace(/,/g, '|') : "png|jpe?g|gif";
			return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/equalTo
		equalTo: function(value, element, param) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
				$(element).valid();
			});
			return value == target.val();
		}

	}

});

// deprecated, use $.validator.format instead
$.format = $.validator.format;

})(jQuery);

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
;(function($) {
	var pendingRequests = {};
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter(function(settings, _, xhr) {
			var port = settings.port;
			if (settings.mode == "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {
		// Proxy ajax
		var ajax = $.ajax;
		$.ajax = function(settings) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if (mode == "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				return (pendingRequests[port] = ajax.apply(this, arguments));
			}
			return ajax.apply(this, arguments);
		};
	}
})(jQuery);

// provides cross-browser focusin and focusout events
// IE has native support, in other browsers, use event caputuring (neither bubbles)

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
;(function($) {
	// only implement if not provided by jQuery core (since 1.4)
	// TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
	if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
		$.each({
			focus: 'focusin',
			blur: 'focusout'
		}, function( original, fix ){
			$.event.special[fix] = {
				setup:function() {
					this.addEventListener( original, handler, true );
				},
				teardown:function() {
					this.removeEventListener( original, handler, true );
				},
				handler: function(e) {
					arguments[0] = $.event.fix(e);
					arguments[0].type = fix;
					return $.event.handle.apply(this, arguments);
				}
			};
			function handler(e) {
				e = $.event.fix(e);
				e.type = fix;
				return $.event.handle.call(this, e);
			}
		});
	};
	$.extend($.fn, {
		validateDelegate: function(delegate, type, handler) {
			return this.bind(type, function(event) {
				var target = $(event.target);
				if (target.is(delegate)) {
					return handler.apply(target, arguments);
				}
			});
		}
	});
})(jQuery);
// Knockout JavaScript library v2.1.0
// (c) Steven Sanderson - http://knockoutjs.com/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function(window,document,navigator,undefined){
var DEBUG=false;
!function(factory) {
    // Support three module loading scenarios
    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
        // [1] CommonJS/Node.js
        var target = module['exports'] || exports; // module.exports is for Node.js
        factory(target);
    } else if (typeof define === 'function' && define['amd']) {
        // [2] AMD anonymous module
        define(['exports'], factory);
    } else {
        // [3] No module loader (plain <script> tag) - put directly in global namespace
        factory(window['ko'] = {});
    }
}(function(koExports){
// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).
// In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.
var ko = typeof koExports !== 'undefined' ? koExports : {};
// Google Closure Compiler helpers (used only to make the minified file smaller)
ko.exportSymbol = function(koPath, object) {
	var tokens = koPath.split(".");

	// In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)
	// At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)
	var target = ko;

	for (var i = 0; i < tokens.length - 1; i++)
		target = target[tokens[i]];
	target[tokens[tokens.length - 1]] = object;
};
ko.exportProperty = function(owner, publicName, object) {
  owner[publicName] = object;
};
ko.version = "2.1.0";

ko.exportSymbol('version', ko.version);
ko.utils = new (function () {
    var stringTrimRegex = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
    var knownEvents = {}, knownEventTypesByEventName = {};
    var keyEventTypeName = /Firefox\/2/i.test(navigator.userAgent) ? 'KeyboardEvent' : 'UIEvents';
    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];
    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
    for (var eventType in knownEvents) {
        var knownEventsForType = knownEvents[eventType];
        if (knownEventsForType.length) {
            for (var i = 0, j = knownEventsForType.length; i < j; i++)
                knownEventTypesByEventName[knownEventsForType[i]] = eventType;
        }
    }
    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406

    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
    var ieVersion = (function() {
        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');

        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
        while (
            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',
            iElems[0]
        );
        return version > 4 ? version : undefined;
    }());
    var isIe6 = ieVersion === 6,
        isIe7 = ieVersion === 7;

    function isClickOnCheckableElement(element, eventType) {
        if ((ko.utils.tagNameLower(element) !== "input") || !element.type) return false;
        if (eventType.toLowerCase() != "click") return false;
        var inputType = element.type;
        return (inputType == "checkbox") || (inputType == "radio");
    }

    function htmlEncode(html) {
        var temp = document.createElement("div");
        (temp.textContent != null) ? (temp.textContent = html) : (temp.innerText = html);
        var output = temp.innerHTML;
        output = output.replace(new RegExp(" ", "gm"), "&nbsp;");
        temp = null;
        return output;
    }

    return {
        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],

        arrayForEach: function (array, action) {
            for (var i = 0, j = array.length; i < j; i++)
                action(array[i]);
        },

        arrayIndexOf: function (array, item) {
            if (typeof Array.prototype.indexOf == "function")
                return Array.prototype.indexOf.call(array, item);
            for (var i = 0, j = array.length; i < j; i++)
                if (array[i] === item)
                    return i;
            return -1;
        },

        arrayFirst: function (array, predicate, predicateOwner) {
            for (var i = 0, j = array.length; i < j; i++)
                if (predicate.call(predicateOwner, array[i]))
                    return array[i];
            return null;
        },

        arrayRemoveItem: function (array, itemToRemove) {
            var index = ko.utils.arrayIndexOf(array, itemToRemove);
            if (index >= 0)
                array.splice(index, 1);
        },

        arrayGetDistinctValues: function (array) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++) {
                if (ko.utils.arrayIndexOf(result, array[i]) < 0)
                    result.push(array[i]);
            }
            return result;
        },

        arrayMap: function (array, mapping) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
                result.push(mapping(array[i]));
            return result;
        },

        arrayFilter: function (array, predicate) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
                if (predicate(array[i]))
                    result.push(array[i]);
            return result;
        },

        arrayPushAll: function (array, valuesToPush) {
            if (valuesToPush instanceof Array)
                array.push.apply(array, valuesToPush);
            else
                for (var i = 0, j = valuesToPush.length; i < j; i++)
                    array.push(valuesToPush[i]);
            return array;
        },

        extend: function (target, source) {
            if (source) {
                for(var prop in source) {
                    if(source.hasOwnProperty(prop)) {
                        target[prop] = source[prop];
                    }
                }
            }
            return target;
        },

        emptyDomNode: function (domNode) {
            while (domNode.firstChild) {
                ko.removeNode(domNode.firstChild);
            }
        },

        moveCleanedNodesToContainerElement: function(nodes) {
            // Ensure it's a real array, as we're about to reparent the nodes and
            // we don't want the underlying collection to change while we're doing that.
            var nodesArray = ko.utils.makeArray(nodes);

            var container = document.createElement('div');
            for (var i = 0, j = nodesArray.length; i < j; i++) {
                ko.cleanNode(nodesArray[i]);
                container.appendChild(nodesArray[i]);
            }
            return container;
        },

        setDomNodeChildren: function (domNode, childNodes) {
            ko.utils.emptyDomNode(domNode);
            if (childNodes) {
                for (var i = 0, j = childNodes.length; i < j; i++)
                    domNode.appendChild(childNodes[i]);
            }
        },

        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {
            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;
            if (nodesToReplaceArray.length > 0) {
                var insertionPoint = nodesToReplaceArray[0];
                var parent = insertionPoint.parentNode;
                for (var i = 0, j = newNodesArray.length; i < j; i++)
                    parent.insertBefore(newNodesArray[i], insertionPoint);
                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {
                    ko.removeNode(nodesToReplaceArray[i]);
                }
            }
        },

        setOptionNodeSelectionState: function (optionNode, isSelected) {
            // IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
            if (navigator.userAgent.indexOf("MSIE 6") >= 0)
                optionNode.setAttribute("selected", isSelected);
            else
                optionNode.selected = isSelected;
        },

        stringTrim: function (string) {
            return (string || "").replace(stringTrimRegex, "");
        },

        stringTokenize: function (string, delimiter) {
            var result = [];
            var tokens = (string || "").split(delimiter);
            for (var i = 0, j = tokens.length; i < j; i++) {
                var trimmed = ko.utils.stringTrim(tokens[i]);
                if (trimmed !== "")
                    result.push(trimmed);
            }
            return result;
        },

        stringStartsWith: function (string, startsWith) {
            string = string || "";
            if (startsWith.length > string.length)
                return false;
            return string.substring(0, startsWith.length) === startsWith;
        },

        buildEvalWithinScopeFunction: function (expression, scopeLevels) {
            // Build the source for a function that evaluates "expression"
            // For each scope variable, add an extra level of "with" nesting
            // Example result: with(sc[1]) { with(sc[0]) { return (expression) } }
            var functionBody = "return (" + expression + ")";
            for (var i = 0; i < scopeLevels; i++) {
                functionBody = "with(sc[" + i + "]) { " + functionBody + " } ";
            }
            return new Function("sc", functionBody);
        },

        domNodeIsContainedBy: function (node, containedByNode) {
            if (containedByNode.compareDocumentPosition)
                return (containedByNode.compareDocumentPosition(node) & 16) == 16;
            while (node != null) {
                if (node == containedByNode)
                    return true;
                node = node.parentNode;
            }
            return false;
        },

        domNodeIsAttachedToDocument: function (node) {
            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument);
        },

        tagNameLower: function(element) {
            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),
            // we don't need to do the .toLowerCase() as it will always be lower case anyway.
            return element && element.tagName && element.tagName.toLowerCase();
        },

        registerEventHandler: function (element, eventType, handler) {
            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];
            if (!mustUseAttachEvent && typeof jQuery != "undefined") {
                if (isClickOnCheckableElement(element, eventType)) {
                    // For click events on checkboxes, jQuery interferes with the event handling in an awkward way:
                    // it toggles the element checked state *after* the click event handlers run, whereas native
                    // click events toggle the checked state *before* the event handler.
                    // Fix this by intecepting the handler and applying the correct checkedness before it runs.
                    var originalHandler = handler;
                    handler = function(event, eventData) {
                        var jQuerySuppliedCheckedState = this.checked;
                        if (eventData)
                            this.checked = eventData.checkedStateBeforeEvent !== true;
                        originalHandler.call(this, event);
                        this.checked = jQuerySuppliedCheckedState; // Restore the state jQuery applied
                    };
                }
                jQuery(element)['bind'](eventType, handler);
            } else if (!mustUseAttachEvent && typeof element.addEventListener == "function")
                element.addEventListener(eventType, handler, false);
            else if (typeof element.attachEvent != "undefined")
                element.attachEvent("on" + eventType, function (event) {
                    handler.call(element, event);
                });
            else
                throw new Error("Browser doesn't support addEventListener or attachEvent");
        },

        triggerEvent: function (element, eventType) {
            if (!(element && element.nodeType))
                throw new Error("element must be a DOM node when calling triggerEvent");

            if (typeof jQuery != "undefined") {
                var eventData = [];
                if (isClickOnCheckableElement(element, eventType)) {
                    // Work around the jQuery "click events on checkboxes" issue described above by storing the original checked state before triggering the handler
                    eventData.push({ checkedStateBeforeEvent: element.checked });
                }
                jQuery(element)['trigger'](eventType, eventData);
            } else if (typeof document.createEvent == "function") {
                if (typeof element.dispatchEvent == "function") {
                    var eventCategory = knownEventTypesByEventName[eventType] || "HTMLEvents";
                    var event = document.createEvent(eventCategory);
                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);
                    element.dispatchEvent(event);
                }
                else
                    throw new Error("The supplied element doesn't support dispatchEvent");
            } else if (typeof element.fireEvent != "undefined") {
                // Unlike other browsers, IE doesn't change the checked state of checkboxes/radiobuttons when you trigger their "click" event
                // so to make it consistent, we'll do it manually here
                if (isClickOnCheckableElement(element, eventType))
                    element.checked = element.checked !== true;
                element.fireEvent("on" + eventType);
            }
            else
                throw new Error("Browser doesn't support triggering events");
        },

        unwrapObservable: function (value) {
            return ko.isObservable(value) ? value() : value;
        },

        toggleDomNodeCssClass: function (node, className, shouldHaveClass) {
            var currentClassNames = (node.className || "").split(/\s+/);
            var hasClass = ko.utils.arrayIndexOf(currentClassNames, className) >= 0;

            if (shouldHaveClass && !hasClass) {
                node.className += (currentClassNames[0] ? " " : "") + className;
            } else if (hasClass && !shouldHaveClass) {
                var newClassName = "";
                for (var i = 0; i < currentClassNames.length; i++)
                    if (currentClassNames[i] != className)
                        newClassName += currentClassNames[i] + " ";
                node.className = ko.utils.stringTrim(newClassName);
            }
        },

        setTextContent: function(element, textContent) {
            var value = ko.utils.unwrapObservable(textContent);
            if ((value === null) || (value === undefined)){
                value = "";
            }else {
                value = htmlEncode(value);
            }
            element.innerHTML = value;

            if (ieVersion >= 9) {
                // Believe it or not, this actually fixes an IE9 rendering bug
                // (See https://github.com/SteveSanderson/knockout/issues/209)
                element.style.display = element.style.display;
            }
        },

        ensureSelectElementIsRenderedCorrectly: function(selectElement) {
            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
            if (ieVersion >= 9) {
                var originalWidth = selectElement.style.width;
                selectElement.style.width = 0;
                selectElement.style.width = originalWidth;
            }
        },

        range: function (min, max) {
            min = ko.utils.unwrapObservable(min);
            max = ko.utils.unwrapObservable(max);
            var result = [];
            for (var i = min; i <= max; i++)
                result.push(i);
            return result;
        },

        makeArray: function(arrayLikeObject) {
            var result = [];
            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {
                result.push(arrayLikeObject[i]);
            };
            return result;
        },

        isIe6 : isIe6,
        isIe7 : isIe7,
        ieVersion : ieVersion,

        getFormFields: function(form, fieldName) {
            var fields = ko.utils.makeArray(form.getElementsByTagName("input")).concat(ko.utils.makeArray(form.getElementsByTagName("textarea")));
            var isMatchingField = (typeof fieldName == 'string')
                ? function(field) { return field.name === fieldName }
                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate
            var matches = [];
            for (var i = fields.length - 1; i >= 0; i--) {
                if (isMatchingField(fields[i]))
                    matches.push(fields[i]);
            };
            return matches;
        },

        parseJson: function (jsonString) {
            if (typeof jsonString == "string") {
                jsonString = ko.utils.stringTrim(jsonString);
                if (jsonString) {
                    if (window.JSON && window.JSON.parse) // Use native parsing where available
                        return window.JSON.parse(jsonString);
                    return (new Function("return " + jsonString))(); // Fallback on less safe parsing for older browsers
                }
            }
            return null;
        },

        stringifyJson: function (data, replacer, space) {   // replacer and space are optional
            if ((typeof JSON == "undefined") || (typeof JSON.stringify == "undefined"))
                throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);
        },

        postJson: function (urlOrForm, data, options) {
            options = options || {};
            var params = options['params'] || {};
            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;
            var url = urlOrForm;

            // If we were given a form, use its 'action' URL and pick out any requested field values
            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === "form")) {
                var originalForm = urlOrForm;
                url = originalForm.action;
                for (var i = includeFields.length - 1; i >= 0; i--) {
                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);
                    for (var j = fields.length - 1; j >= 0; j--)
                        params[fields[j].name] = fields[j].value;
                }
            }

            data = ko.utils.unwrapObservable(data);
            var form = document.createElement("form");
            form.style.display = "none";
            form.action = url;
            form.method = "post";
            for (var key in data) {
                var input = document.createElement("input");
                input.name = key;
                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));
                form.appendChild(input);
            }
            for (var key in params) {
                var input = document.createElement("input");
                input.name = key;
                input.value = params[key];
                form.appendChild(input);
            }
            document.body.appendChild(form);
            options['submitter'] ? options['submitter'](form) : form.submit();
            setTimeout(function () { form.parentNode.removeChild(form); }, 0);
        }
    }
})();

ko.exportSymbol('utils', ko.utils);
ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);
ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);
ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);
ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);
ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);
ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);
ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);
ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);
ko.exportSymbol('utils.extend', ko.utils.extend);
ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);
ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);
ko.exportSymbol('utils.postJson', ko.utils.postJson);
ko.exportSymbol('utils.parseJson', ko.utils.parseJson);
ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);
ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);
ko.exportSymbol('utils.range', ko.utils.range);
ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);
ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);
ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);

if (!Function.prototype['bind']) {
    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js
    Function.prototype['bind'] = function (object) {
        var originalFunction = this, args = Array.prototype.slice.call(arguments), object = args.shift();
        return function () {
            return originalFunction.apply(object, args.concat(Array.prototype.slice.call(arguments)));
        };
    };
}

ko.utils.domData = new (function () {
    var uniqueId = 0;
    var dataStoreKeyExpandoPropertyName = "__ko__" + (new Date).getTime();
    var dataStore = {};
    return {
        get: function (node, key) {
            var allDataForNode = ko.utils.domData.getAll(node, false);
            return allDataForNode === undefined ? undefined : allDataForNode[key];
        },
        set: function (node, key, value) {
            if (value === undefined) {
                // Make sure we don't actually create a new domData key if we are actually deleting a value
                if (ko.utils.domData.getAll(node, false) === undefined)
                    return;
            }
            var allDataForNode = ko.utils.domData.getAll(node, true);
            allDataForNode[key] = value;
        },
        getAll: function (node, createIfNotFound) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            var hasExistingDataStore = dataStoreKey && (dataStoreKey !== "null");
            if (!hasExistingDataStore) {
                if (!createIfNotFound)
                    return undefined;
                dataStoreKey = node[dataStoreKeyExpandoPropertyName] = "ko" + uniqueId++;
                dataStore[dataStoreKey] = {};
            }
            return dataStore[dataStoreKey];
        },
        clear: function (node) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            if (dataStoreKey) {
                delete dataStore[dataStoreKey];
                node[dataStoreKeyExpandoPropertyName] = null;
            }
        }
    }
})();

ko.exportSymbol('utils.domData', ko.utils.domData);
ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully

ko.utils.domNodeDisposal = new (function () {
    var domDataKey = "__ko_domNodeDisposal__" + (new Date).getTime();
    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document
    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document

    function getDisposeCallbacksCollection(node, createIfNotFound) {
        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);
        if ((allDisposeCallbacks === undefined) && createIfNotFound) {
            allDisposeCallbacks = [];
            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);
        }
        return allDisposeCallbacks;
    }
    function destroyCallbacksCollection(node) {
        ko.utils.domData.set(node, domDataKey, undefined);
    }

    function cleanSingleNode(node) {
        // Run all the dispose callbacks
        var callbacks = getDisposeCallbacksCollection(node, false);
        if (callbacks) {
            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
            for (var i = 0; i < callbacks.length; i++)
                callbacks[i](node);
        }

        // Also erase the DOM data
        ko.utils.domData.clear(node);

        // Special support for jQuery here because it's so commonly used.
        // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
        // so notify it to tear down any resources associated with the node & descendants here.
        if ((typeof jQuery == "function") && (typeof jQuery['cleanData'] == "function"))
            jQuery['cleanData']([node]);

        // Also clear any immediate-child comment nodes, as these wouldn't have been found by
        // node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
        if (cleanableNodeTypesWithDescendants[node.nodeType])
            cleanImmediateCommentTypeChildren(node);
    }

    function cleanImmediateCommentTypeChildren(nodeWithChildren) {
        var child, nextChild = nodeWithChildren.firstChild;
        while (child = nextChild) {
            nextChild = child.nextSibling;
            if (child.nodeType === 8)
                cleanSingleNode(child);
        }
    }

    return {
        addDisposeCallback : function(node, callback) {
            if (typeof callback != "function")
                throw new Error("Callback must be a function");
            getDisposeCallbacksCollection(node, true).push(callback);
        },

        removeDisposeCallback : function(node, callback) {
            var callbacksCollection = getDisposeCallbacksCollection(node, false);
            if (callbacksCollection) {
                ko.utils.arrayRemoveItem(callbacksCollection, callback);
                if (callbacksCollection.length == 0)
                    destroyCallbacksCollection(node);
            }
        },

        cleanNode : function(node) {
            // First clean this node, where applicable
            if (cleanableNodeTypes[node.nodeType]) {
                cleanSingleNode(node);

                // ... then its descendants, where applicable
                if (cleanableNodeTypesWithDescendants[node.nodeType]) {
                    // Clone the descendants list in case it changes during iteration
                    var descendants = [];
                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName("*"));
                    for (var i = 0, j = descendants.length; i < j; i++)
                        cleanSingleNode(descendants[i]);
                }
            }
        },

        removeNode : function(node) {
            ko.cleanNode(node);
            if (node.parentNode)
                node.parentNode.removeChild(node);
        }
    }
})();
ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience
ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience
ko.exportSymbol('cleanNode', ko.cleanNode);
ko.exportSymbol('removeNode', ko.removeNode);
ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);
ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);
ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);
(function () {
    var leadingCommentRegex = /^(\s*)<!--(.*?)-->/;

    function simpleHtmlParse(html) {
        // Based on jQuery's "clean" function, but only accounting for table-related elements.
        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly

        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of
        // a descendant node. For example: "<div><!-- mycomment -->abc</div>" will get parsed as "<div>abc</div>"
        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.

        // Trim whitespace, otherwise indexOf won't work as expected
        var tags = ko.utils.stringTrim(html).toLowerCase(), div = document.createElement("div");

        // Finds the first match from the left column, and returns the corresponding "wrap" data from the right column
        var wrap = tags.match(/^<(thead|tbody|tfoot)/)              && [1, "<table>", "</table>"] ||
                   !tags.indexOf("<tr")                             && [2, "<table><tbody>", "</tbody></table>"] ||
                   (!tags.indexOf("<td") || !tags.indexOf("<th"))   && [3, "<table><tbody><tr>", "</tr></tbody></table>"] ||
                   /* anything else */                                 [0, "", ""];

        // Go to html and back, then peel off extra wrappers
        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.
        var markup = "ignored<div>" + wrap[1] + html + wrap[2] + "</div>";
        if (typeof window['innerShiv'] == "function") {
            div.appendChild(window['innerShiv'](markup));
        } else {
            div.innerHTML = markup;
        }

        // Move to the right depth
        while (wrap[0]--)
            div = div.lastChild;

        return ko.utils.makeArray(div.lastChild.childNodes);
    }

    function jQueryHtmlParse(html) {
        var elems = jQuery['clean']([html]);

        // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
        // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
        // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
        if (elems && elems[0]) {
            // Find the top-most parent element that's a direct child of a document fragment
            var elem = elems[0];
            while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)
                elem = elem.parentNode;
            // ... then detach it
            if (elem.parentNode)
                elem.parentNode.removeChild(elem);
        }

        return elems;
    }

    ko.utils.parseHtmlFragment = function(html) {
        return typeof jQuery != 'undefined' ? jQueryHtmlParse(html)   // As below, benefit from jQuery's optimisations where possible
                                            : simpleHtmlParse(html);  // ... otherwise, this simple logic will do in most common cases.
    };

    ko.utils.setHtml = function(node, html) {
        ko.utils.emptyDomNode(node);

        if ((html !== null) && (html !== undefined)) {
            if (typeof html != 'string')
                html = html.toString();

            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
            // for example <tr> elements which are not normally allowed to exist on their own.
            // If you've referenced jQuery we'll use that rather than duplicating its code.
            if (typeof jQuery != 'undefined') {
                jQuery(node)['html'](html);
            } else {
                // ... otherwise, use KO's own parsing logic.
                var parsedNodes = ko.utils.parseHtmlFragment(html);
                for (var i = 0; i < parsedNodes.length; i++)
                    node.appendChild(parsedNodes[i]);
            }
        }
    };
})();

ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);
ko.exportSymbol('utils.setHtml', ko.utils.setHtml);

ko.memoization = (function () {
    var memos = {};

    function randomMax8HexChars() {
        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
    }
    function generateRandomId() {
        return randomMax8HexChars() + randomMax8HexChars();
    }
    function findMemoNodes(rootNode, appendToArray) {
        if (!rootNode)
            return;
        if (rootNode.nodeType == 8) {
            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);
            if (memoId != null)
                appendToArray.push({ domNode: rootNode, memoId: memoId });
        } else if (rootNode.nodeType == 1) {
            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)
                findMemoNodes(childNodes[i], appendToArray);
        }
    }

    return {
        memoize: function (callback) {
            if (typeof callback != "function")
                throw new Error("You can only pass a function to ko.memoization.memoize()");
            var memoId = generateRandomId();
            memos[memoId] = callback;
            return "<!--[ko_memo:" + memoId + "]-->";
        },

        unmemoize: function (memoId, callbackParams) {
            var callback = memos[memoId];
            if (callback === undefined)
                throw new Error("Couldn't find any memo with ID " + memoId + ". Perhaps it's already been unmemoized.");
            try {
                callback.apply(null, callbackParams || []);
                return true;
            }
            finally { delete memos[memoId]; }
        },

        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {
            var memos = [];
            findMemoNodes(domNode, memos);
            for (var i = 0, j = memos.length; i < j; i++) {
                var node = memos[i].domNode;
                var combinedParams = [node];
                if (extraCallbackParamsArray)
                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);
                ko.memoization.unmemoize(memos[i].memoId, combinedParams);
                node.nodeValue = ""; // Neuter this node so we don't try to unmemoize it again
                if (node.parentNode)
                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
            }
        },

        parseMemoText: function (memoText) {
            var match = memoText.match(/^\[ko_memo\:(.*?)\]$/);
            return match ? match[1] : null;
        }
    };
})();

ko.exportSymbol('memoization', ko.memoization);
ko.exportSymbol('memoization.memoize', ko.memoization.memoize);
ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);
ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);
ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);
ko.extenders = {
    'throttle': function(target, timeout) {
        // Throttling means two things:

        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
        target['throttleEvaluation'] = timeout;

        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
        //     so the target cannot change value synchronously or faster than a certain rate
        var writeTimeoutInstance = null;
        return ko.dependentObservable({
            'read': target,
            'write': function(value) {
                clearTimeout(writeTimeoutInstance);
                writeTimeoutInstance = setTimeout(function() {
                    target(value);
                }, timeout);
            }
        });
    },

    'notify': function(target, notifyWhen) {
        target["equalityComparer"] = notifyWhen == "always"
            ? function() { return false } // Treat all values as not equal
            : ko.observable["fn"]["equalityComparer"];
        return target;
    }
};

function applyExtenders(requestedExtenders) {
    var target = this;
    if (requestedExtenders) {
        for (var key in requestedExtenders) {
            var extenderHandler = ko.extenders[key];
            if (typeof extenderHandler == 'function') {
                target = extenderHandler(target, requestedExtenders[key]);
            }
        }
    }
    return target;
}

ko.exportSymbol('extenders', ko.extenders);

ko.subscription = function (target, callback, disposeCallback) {
    this.target = target;
    this.callback = callback;
    this.disposeCallback = disposeCallback;
    ko.exportProperty(this, 'dispose', this.dispose);
};
ko.subscription.prototype.dispose = function () {
    this.isDisposed = true;
    this.disposeCallback();
};

ko.subscribable = function () {
    this._subscriptions = {};

    ko.utils.extend(this, ko.subscribable['fn']);
    ko.exportProperty(this, 'subscribe', this.subscribe);
    ko.exportProperty(this, 'extend', this.extend);
    ko.exportProperty(this, 'getSubscriptionsCount', this.getSubscriptionsCount);
}

var defaultEvent = "change";

ko.subscribable['fn'] = {
    subscribe: function (callback, callbackTarget, event) {
        event = event || defaultEvent;
        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;

        var subscription = new ko.subscription(this, boundCallback, function () {
            ko.utils.arrayRemoveItem(this._subscriptions[event], subscription);
        }.bind(this));

        if (!this._subscriptions[event])
            this._subscriptions[event] = [];
        this._subscriptions[event].push(subscription);
        return subscription;
    },

    "notifySubscribers": function (valueToNotify, event) {
        event = event || defaultEvent;
        if (this._subscriptions[event]) {
            ko.utils.arrayForEach(this._subscriptions[event].slice(0), function (subscription) {
                // In case a subscription was disposed during the arrayForEach cycle, check
                // for isDisposed on each subscription before invoking its callback
                if (subscription && (subscription.isDisposed !== true))
                    subscription.callback(valueToNotify);
            });
        }
    },

    getSubscriptionsCount: function () {
        var total = 0;
        for (var eventName in this._subscriptions) {
            if (this._subscriptions.hasOwnProperty(eventName))
                total += this._subscriptions[eventName].length;
        }
        return total;
    },

    extend: applyExtenders
};


ko.isSubscribable = function (instance) {
    return typeof instance.subscribe == "function" && typeof instance["notifySubscribers"] == "function";
};

ko.exportSymbol('subscribable', ko.subscribable);
ko.exportSymbol('isSubscribable', ko.isSubscribable);

ko.dependencyDetection = (function () {
    var _frames = [];

    return {
        begin: function (callback) {
            _frames.push({ callback: callback, distinctDependencies:[] });
        },

        end: function () {
            _frames.pop();
        },

        registerDependency: function (subscribable) {
            if (!ko.isSubscribable(subscribable))
                throw new Error("Only subscribable things can act as dependencies");
            if (_frames.length > 0) {
                var topFrame = _frames[_frames.length - 1];
                if (ko.utils.arrayIndexOf(topFrame.distinctDependencies, subscribable) >= 0)
                    return;
                topFrame.distinctDependencies.push(subscribable);
                topFrame.callback(subscribable);
            }
        }
    };
})();
var primitiveTypes = { 'undefined':true, 'boolean':true, 'number':true, 'string':true };

ko.observable = function (initialValue) {
    var _latestValue = initialValue;

    function observable() {
        if (arguments.length > 0) {
            // Write

            // Ignore writes if the value hasn't changed
            if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) {
                observable.valueWillMutate();
                _latestValue = arguments[0];
                if (DEBUG) observable._latestValue = _latestValue;
                observable.valueHasMutated();
            }
            return this; // Permits chained assignments
        }
        else {
            // Read
            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a "read" operation
            return _latestValue;
        }
    }
    if (DEBUG) observable._latestValue = _latestValue;
    ko.subscribable.call(observable);
    observable.valueHasMutated = function () { observable["notifySubscribers"](_latestValue); }
    observable.valueWillMutate = function () { observable["notifySubscribers"](_latestValue, "beforeChange"); }
    ko.utils.extend(observable, ko.observable['fn']);

    ko.exportProperty(observable, "valueHasMutated", observable.valueHasMutated);
    ko.exportProperty(observable, "valueWillMutate", observable.valueWillMutate);

    return observable;
}

ko.observable['fn'] = {
    "equalityComparer": function valuesArePrimitiveAndEqual(a, b) {
        var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);
        return oldValueIsPrimitive ? (a === b) : false;
    }
};

var protoProperty = ko.observable.protoProperty = "__ko_proto__";
ko.observable['fn'][protoProperty] = ko.observable;

ko.hasPrototype = function(instance, prototype) {
    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;
    if (instance[protoProperty] === prototype) return true;
    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain
};

ko.isObservable = function (instance) {
    return ko.hasPrototype(instance, ko.observable);
}
ko.isWriteableObservable = function (instance) {
    // Observable
    if ((typeof instance == "function") && instance[protoProperty] === ko.observable)
        return true;
    // Writeable dependent observable
    if ((typeof instance == "function") && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))
        return true;
    // Anything else
    return false;
}


ko.exportSymbol('observable', ko.observable);
ko.exportSymbol('isObservable', ko.isObservable);
ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);
ko.observableArray = function (initialValues) {
    if (arguments.length == 0) {
        // Zero-parameter constructor initializes to empty array
        initialValues = [];
    }
    if ((initialValues !== null) && (initialValues !== undefined) && !('length' in initialValues))
        throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");

    var result = ko.observable(initialValues);
    ko.utils.extend(result, ko.observableArray['fn']);
    return result;
}

ko.observableArray['fn'] = {
    'remove': function (valueOrPredicate) {
        var underlyingArray = this();
        var removedValues = [];
        var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        for (var i = 0; i < underlyingArray.length; i++) {
            var value = underlyingArray[i];
            if (predicate(value)) {
                if (removedValues.length === 0) {
                    this.valueWillMutate();
                }
                removedValues.push(value);
                underlyingArray.splice(i, 1);
                i--;
            }
        }
        if (removedValues.length) {
            this.valueHasMutated();
        }
        return removedValues;
    },

    'removeAll': function (arrayOfValues) {
        // If you passed zero args, we remove everything
        if (arrayOfValues === undefined) {
            var underlyingArray = this();
            var allValues = underlyingArray.slice(0);
            this.valueWillMutate();
            underlyingArray.splice(0, underlyingArray.length);
            this.valueHasMutated();
            return allValues;
        }
        // If you passed an arg, we interpret it as an array of entries to remove
        if (!arrayOfValues)
            return [];
        return this['remove'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
        });
    },

    'destroy': function (valueOrPredicate) {
        var underlyingArray = this();
        var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        this.valueWillMutate();
        for (var i = underlyingArray.length - 1; i >= 0; i--) {
            var value = underlyingArray[i];
            if (predicate(value))
                underlyingArray[i]["_destroy"] = true;
        }
        this.valueHasMutated();
    },

    'destroyAll': function (arrayOfValues) {
        // If you passed zero args, we destroy everything
        if (arrayOfValues === undefined)
            return this['destroy'](function() { return true });

        // If you passed an arg, we interpret it as an array of entries to destroy
        if (!arrayOfValues)
            return [];
        return this['destroy'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
        });
    },

    'indexOf': function (item) {
        var underlyingArray = this();
        return ko.utils.arrayIndexOf(underlyingArray, item);
    },

    'replace': function(oldItem, newItem) {
        var index = this['indexOf'](oldItem);
        if (index >= 0) {
            this.valueWillMutate();
            this()[index] = newItem;
            this.valueHasMutated();
        }
    }
}

// Populate ko.observableArray.fn with read/write functions from native arrays
ko.utils.arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        var underlyingArray = this();
        this.valueWillMutate();
        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);
        this.valueHasMutated();
        return methodCallResult;
    };
});

// Populate ko.observableArray.fn with read-only functions from native arrays
ko.utils.arrayForEach(["slice"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        var underlyingArray = this();
        return underlyingArray[methodName].apply(underlyingArray, arguments);
    };
});

ko.exportSymbol('observableArray', ko.observableArray);
ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {
    var _latestValue,
        _hasBeenEvaluated = false,
        _isBeingEvaluated = false,
        readFunction = evaluatorFunctionOrOptions;

    if (readFunction && typeof readFunction == "object") {
        // Single-parameter syntax - everything is on this "options" param
        options = readFunction;
        readFunction = options["read"];
    } else {
        // Multi-parameter syntax - construct the options according to the params passed
        options = options || {};
        if (!readFunction)
            readFunction = options["read"];
    }
    // By here, "options" is always non-null
    if (typeof readFunction != "function")
        throw new Error("Pass a function that returns the value of the ko.computed");

    var writeFunction = options["write"];
    if (!evaluatorFunctionTarget)
        evaluatorFunctionTarget = options["owner"];

    var _subscriptionsToDependencies = [];
    function disposeAllSubscriptionsToDependencies() {
        ko.utils.arrayForEach(_subscriptionsToDependencies, function (subscription) {
            subscription.dispose();
        });
        _subscriptionsToDependencies = [];
    }
    var dispose = disposeAllSubscriptionsToDependencies;

    // Build "disposeWhenNodeIsRemoved" and "disposeWhenNodeIsRemovedCallback" option values
    // (Note: "disposeWhenNodeIsRemoved" option both proactively disposes as soon as the node is removed using ko.removeNode(),
    // plus adds a "disposeWhen" callback that, on each evaluation, disposes if the node was removed by some other means.)
    var disposeWhenNodeIsRemoved = (typeof options["disposeWhenNodeIsRemoved"] == "object") ? options["disposeWhenNodeIsRemoved"] : null;
    var disposeWhen = options["disposeWhen"] || function() { return false; };
    if (disposeWhenNodeIsRemoved) {
        dispose = function() {
            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, arguments.callee);
            disposeAllSubscriptionsToDependencies();
        };
        ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);
        var existingDisposeWhenFunction = disposeWhen;
        disposeWhen = function () {
            return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || existingDisposeWhenFunction();
        }
    }

    var evaluationTimeoutInstance = null;
    function evaluatePossiblyAsync() {
        var throttleEvaluationTimeout = dependentObservable['throttleEvaluation'];
        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {
            clearTimeout(evaluationTimeoutInstance);
            evaluationTimeoutInstance = setTimeout(evaluateImmediate, throttleEvaluationTimeout);
        } else
            evaluateImmediate();
    }

    function evaluateImmediate() {
        if (_isBeingEvaluated) {
            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
            return;
        }

        // Don't dispose on first evaluation, because the "disposeWhen" callback might
        // e.g., dispose when the associated DOM element isn't in the doc, and it's not
        // going to be in the doc until *after* the first evaluation
        if (_hasBeenEvaluated && disposeWhen()) {
            dispose();
            return;
        }

        _isBeingEvaluated = true;
        try {
            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
            // Then, during evaluation, we cross off any that are in fact still being used.
            var disposalCandidates = ko.utils.arrayMap(_subscriptionsToDependencies, function(item) {return item.target;});

            ko.dependencyDetection.begin(function(subscribable) {
                var inOld;
                if ((inOld = ko.utils.arrayIndexOf(disposalCandidates, subscribable)) >= 0)
                    disposalCandidates[inOld] = undefined; // Don't want to dispose this subscription, as it's still being used
                else
                    _subscriptionsToDependencies.push(subscribable.subscribe(evaluatePossiblyAsync)); // Brand new subscription - add it
            });

            var newValue = readFunction.call(evaluatorFunctionTarget);

            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it
            for (var i = disposalCandidates.length - 1; i >= 0; i--) {
                if (disposalCandidates[i])
                    _subscriptionsToDependencies.splice(i, 1)[0].dispose();
            }
            _hasBeenEvaluated = true;

            dependentObservable["notifySubscribers"](_latestValue, "beforeChange");
            _latestValue = newValue;
            if (DEBUG) dependentObservable._latestValue = _latestValue;
        } finally {
            ko.dependencyDetection.end();
        }

        dependentObservable["notifySubscribers"](_latestValue);
        _isBeingEvaluated = false;

    }

    function dependentObservable() {
        if (arguments.length > 0) {
            set.apply(dependentObservable, arguments);
        } else {
            return get();
        }
    }

    function set() {
        if (typeof writeFunction === "function") {
            // Writing a value
            writeFunction.apply(evaluatorFunctionTarget, arguments);
        } else {
            throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
        }
    }

    function get() {
        // Reading the value
        if (!_hasBeenEvaluated)
            evaluateImmediate();
        ko.dependencyDetection.registerDependency(dependentObservable);
        return _latestValue;
    }

    dependentObservable.getDependenciesCount = function () { return _subscriptionsToDependencies.length; };
    dependentObservable.hasWriteFunction = typeof options["write"] === "function";
    dependentObservable.dispose = function () { dispose(); };

    ko.subscribable.call(dependentObservable);
    ko.utils.extend(dependentObservable, ko.dependentObservable['fn']);

    if (options['deferEvaluation'] !== true)
        evaluateImmediate();

    ko.exportProperty(dependentObservable, 'dispose', dependentObservable.dispose);
    ko.exportProperty(dependentObservable, 'getDependenciesCount', dependentObservable.getDependenciesCount);

    return dependentObservable;
};

ko.isComputed = function(instance) {
    return ko.hasPrototype(instance, ko.dependentObservable);
};

var protoProp = ko.observable.protoProperty; // == "__ko_proto__"
ko.dependentObservable[protoProp] = ko.observable;

ko.dependentObservable['fn'] = {};
ko.dependentObservable['fn'][protoProp] = ko.dependentObservable;

ko.exportSymbol('dependentObservable', ko.dependentObservable);
ko.exportSymbol('computed', ko.dependentObservable); // Make "ko.computed" an alias for "ko.dependentObservable"
ko.exportSymbol('isComputed', ko.isComputed);

(function() {
    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)

    ko.toJS = function(rootObject) {
        if (arguments.length == 0)
            throw new Error("When calling ko.toJS, pass the object you want to convert.");

        // We just unwrap everything at every level in the object graph
        return mapJsObjectGraph(rootObject, function(valueToMap) {
            // Loop because an observable's value might in turn be another observable wrapper
            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)
                valueToMap = valueToMap();
            return valueToMap;
        });
    };

    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional
        var plainJavaScriptObject = ko.toJS(rootObject);
        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);
    };

    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {
        visitedObjects = visitedObjects || new objectLookup();

        rootObject = mapInputCallback(rootObject);
        var canHaveProperties = (typeof rootObject == "object") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof Date));
        if (!canHaveProperties)
            return rootObject;

        var outputProperties = rootObject instanceof Array ? [] : {};
        visitedObjects.save(rootObject, outputProperties);

        visitPropertiesOrArrayEntries(rootObject, function(indexer) {
            var propertyValue = mapInputCallback(rootObject[indexer]);

            switch (typeof propertyValue) {
                case "boolean":
                case "number":
                case "string":
                case "function":
                    outputProperties[indexer] = propertyValue;
                    break;
                case "object":
                case "undefined":
                    var previouslyMappedValue = visitedObjects.get(propertyValue);
                    outputProperties[indexer] = (previouslyMappedValue !== undefined)
                        ? previouslyMappedValue
                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);
                    break;
            }
        });

        return outputProperties;
    }

    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
        if (rootObject instanceof Array) {
            for (var i = 0; i < rootObject.length; i++)
                visitorCallback(i);

            // For arrays, also respect toJSON property for custom mappings (fixes #278)
            if (typeof rootObject['toJSON'] == 'function')
                visitorCallback('toJSON');
        } else {
            for (var propertyName in rootObject)
                visitorCallback(propertyName);
        }
    };

    function objectLookup() {
        var keys = [];
        var values = [];
        this.save = function(key, value) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            if (existingIndex >= 0)
                values[existingIndex] = value;
            else {
                keys.push(key);
                values.push(value);
            }
        };
        this.get = function(key) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            return (existingIndex >= 0) ? values[existingIndex] : undefined;
        };
    };
})();

ko.exportSymbol('toJS', ko.toJS);
ko.exportSymbol('toJSON', ko.toJSON);
(function () {
    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';

    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
    ko.selectExtensions = {
        readValue : function(element) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    if (element[hasDomDataExpandoProperty] === true)
                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);
                    return element.getAttribute("value");
                case 'select':
                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;
                default:
                    return element.value;
            }
        },

        writeValue: function(element, value) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    switch(typeof value) {
                        case "string":
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);
                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node
                                delete element[hasDomDataExpandoProperty];
                            }
                            element.value = value;
                            break;
                        default:
                            // Store arbitrary object using DomData
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);
                            element[hasDomDataExpandoProperty] = true;

                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
                            element.value = typeof value === "number" ? value : "";
                            break;
                    }
                    break;
                case 'select':
                    for (var i = element.options.length - 1; i >= 0; i--) {
                        if (ko.selectExtensions.readValue(element.options[i]) == value) {
                            element.selectedIndex = i;
                            break;
                        }
                    }
                    break;
                default:
                    if ((value === null) || (value === undefined))
                        value = "";
                    element.value = value;
                    break;
            }
        }
    };
})();

ko.exportSymbol('selectExtensions', ko.selectExtensions);
ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);
ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);

ko.jsonExpressionRewriting = (function () {
    var restoreCapturedTokensRegex = /\@ko_token_(\d+)\@/g;
    var javaScriptAssignmentTarget = /^[\_$a-z][\_$a-z0-9]*(\[.*?\])*(\.[\_$a-z][\_$a-z0-9]*(\[.*?\])*)*$/i;
    var javaScriptReservedWords = ["true", "false"];

    function restoreTokens(string, tokens) {
        var prevValue = null;
        while (string != prevValue) { // Keep restoring tokens until it no longer makes a difference (they may be nested)
            prevValue = string;
            string = string.replace(restoreCapturedTokensRegex, function (match, tokenIndex) {
                return tokens[tokenIndex];
            });
        }
        return string;
    }

    function isWriteableValue(expression) {
        if (ko.utils.arrayIndexOf(javaScriptReservedWords, ko.utils.stringTrim(expression).toLowerCase()) >= 0)
            return false;
        return expression.match(javaScriptAssignmentTarget) !== null;
    }

    function ensureQuoted(key) {
        var trimmedKey = ko.utils.stringTrim(key);
        switch (trimmedKey.length && trimmedKey.charAt(0)) {
            case "'":
            case '"':
                return key;
            default:
                return "'" + trimmedKey + "'";
        }
    }

    return {
        bindingRewriteValidators: [],

        parseObjectLiteral: function(objectLiteralString) {
            // A full tokeniser+lexer would add too much weight to this library, so here's a simple parser
            // that is sufficient just to split an object literal string into a set of top-level key-value pairs

            var str = ko.utils.stringTrim(objectLiteralString);
            if (str.length < 3)
                return [];
            if (str.charAt(0) === "{")// Ignore any braces surrounding the whole object literal
                str = str.substring(1, str.length - 1);

            // Pull out any string literals and regex literals
            var tokens = [];
            var tokenStart = null, tokenEndChar;
            for (var position = 0; position < str.length; position++) {
                var c = str.charAt(position);
                if (tokenStart === null) {
                    switch (c) {
                        case '"':
                        case "'":
                        case "/":
                            tokenStart = position;
                            tokenEndChar = c;
                            break;
                    }
                } else if ((c == tokenEndChar) && (str.charAt(position - 1) !== "\\")) {
                    var token = str.substring(tokenStart, position + 1);
                    tokens.push(token);
                    var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                    str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                    position -= (token.length - replacement.length);
                    tokenStart = null;
                }
            }

            // Next pull out balanced paren, brace, and bracket blocks
            tokenStart = null;
            tokenEndChar = null;
            var tokenDepth = 0, tokenStartChar = null;
            for (var position = 0; position < str.length; position++) {
                var c = str.charAt(position);
                if (tokenStart === null) {
                    switch (c) {
                        case "{": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = "}";
                                  break;
                        case "(": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = ")";
                                  break;
                        case "[": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = "]";
                                  break;
                    }
                }

                if (c === tokenStartChar)
                    tokenDepth++;
                else if (c === tokenEndChar) {
                    tokenDepth--;
                    if (tokenDepth === 0) {
                        var token = str.substring(tokenStart, position + 1);
                        tokens.push(token);
                        var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                        str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                        position -= (token.length - replacement.length);
                        tokenStart = null;
                    }
                }
            }

            // Now we can safely split on commas to get the key/value pairs
            var result = [];
            var keyValuePairs = str.split(",");
            for (var i = 0, j = keyValuePairs.length; i < j; i++) {
                var pair = keyValuePairs[i];
                var colonPos = pair.indexOf(":");
                if ((colonPos > 0) && (colonPos < pair.length - 1)) {
                    var key = pair.substring(0, colonPos);
                    var value = pair.substring(colonPos + 1);
                    result.push({ 'key': restoreTokens(key, tokens), 'value': restoreTokens(value, tokens) });
                } else {
                    result.push({ 'unknown': restoreTokens(pair, tokens) });
                }
            }
            return result;
        },

        insertPropertyAccessorsIntoJson: function (objectLiteralStringOrKeyValueArray) {
            var keyValueArray = typeof objectLiteralStringOrKeyValueArray === "string"
                ? ko.jsonExpressionRewriting.parseObjectLiteral(objectLiteralStringOrKeyValueArray)
                : objectLiteralStringOrKeyValueArray;
            var resultStrings = [], propertyAccessorResultStrings = [];

            var keyValueEntry;
            for (var i = 0; keyValueEntry = keyValueArray[i]; i++) {
                if (resultStrings.length > 0)
                    resultStrings.push(",");

                if (keyValueEntry['key']) {
                    var quotedKey = ensureQuoted(keyValueEntry['key']), val = keyValueEntry['value'];
                    resultStrings.push(quotedKey);
                    resultStrings.push(":");
                    resultStrings.push(val);

                    if (isWriteableValue(ko.utils.stringTrim(val))) {
                        if (propertyAccessorResultStrings.length > 0)
                            propertyAccessorResultStrings.push(", ");
                        propertyAccessorResultStrings.push(quotedKey + " : function(__ko_value) { " + val + " = __ko_value; }");
                    }
                } else if (keyValueEntry['unknown']) {
                    resultStrings.push(keyValueEntry['unknown']);
                }
            }

            var combinedResult = resultStrings.join("");
            if (propertyAccessorResultStrings.length > 0) {
                var allPropertyAccessors = propertyAccessorResultStrings.join("");
                combinedResult = combinedResult + ", '_ko_property_writers' : { " + allPropertyAccessors + " } ";
            }

            return combinedResult;
        },

        keyValueArrayContainsKey: function(keyValueArray, key) {
            for (var i = 0; i < keyValueArray.length; i++)
                if (ko.utils.stringTrim(keyValueArray[i]['key']) == key)
                    return true;
            return false;
        },

        // Internal, private KO utility for updating model properties from within bindings
        // property:            If the property being updated is (or might be) an observable, pass it here
        //                      If it turns out to be a writable observable, it will be written to directly
        // allBindingsAccessor: All bindings in the current execution context.
        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable
        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'
        // value:               The value to be written
        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if
        //                      it is !== existing value on that writable observable
        writeValueToProperty: function(property, allBindingsAccessor, key, value, checkIfDifferent) {
            if (!property || !ko.isWriteableObservable(property)) {
                var propWriters = allBindingsAccessor()['_ko_property_writers'];
                if (propWriters && propWriters[key])
                    propWriters[key](value);
            } else if (!checkIfDifferent || property() !== value) {
                property(value);
            }
        }
    };
})();

ko.exportSymbol('jsonExpressionRewriting', ko.jsonExpressionRewriting);
ko.exportSymbol('jsonExpressionRewriting.bindingRewriteValidators', ko.jsonExpressionRewriting.bindingRewriteValidators);
ko.exportSymbol('jsonExpressionRewriting.parseObjectLiteral', ko.jsonExpressionRewriting.parseObjectLiteral);
ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.jsonExpressionRewriting.insertPropertyAccessorsIntoJson);
(function() {
    // "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
    // of that virtual hierarchy
    //
    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)
    // without having to scatter special cases all over the binding and templating code.

    // IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
    // but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
    // So, use node.text where available, and node.nodeValue elsewhere
    var commentNodesHaveTextProperty = document.createComment("test").text === "<!--test-->";

    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\s*ko\s+(.*\:.*)\s*-->$/ : /^\s*ko\s+(.*\:.*)\s*$/;
    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\s*\/ko\s*-->$/ : /^\s*\/ko\s*$/;
    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };

    function isStartComment(node) {
        return (node.nodeType == 8) && (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);
    }

    function isEndComment(node) {
        return (node.nodeType == 8) && (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(endCommentRegex);
    }

    function getVirtualChildren(startComment, allowUnbalanced) {
        var currentNode = startComment;
        var depth = 1;
        var children = [];
        while (currentNode = currentNode.nextSibling) {
            if (isEndComment(currentNode)) {
                depth--;
                if (depth === 0)
                    return children;
            }

            children.push(currentNode);

            if (isStartComment(currentNode))
                depth++;
        }
        if (!allowUnbalanced)
            throw new Error("Cannot find closing comment tag to match: " + startComment.nodeValue);
        return null;
    }

    function getMatchingEndComment(startComment, allowUnbalanced) {
        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);
        if (allVirtualChildren) {
            if (allVirtualChildren.length > 0)
                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;
            return startComment.nextSibling;
        } else
            return null; // Must have no matching end comment, and allowUnbalanced is true
    }

    function getUnbalancedChildTags(node) {
        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>
        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->
        var childNode = node.firstChild, captureRemaining = null;
        if (childNode) {
            do {
                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes
                    captureRemaining.push(childNode);
                else if (isStartComment(childNode)) {
                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);
                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set
                        childNode = matchingEndComment;
                    else
                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point
                } else if (isEndComment(childNode)) {
                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
                }
            } while (childNode = childNode.nextSibling);
        }
        return captureRemaining;
    }

    ko.virtualElements = {
        allowedBindings: {},

        childNodes: function(node) {
            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;
        },

        emptyNode: function(node) {
            if (!isStartComment(node))
                ko.utils.emptyDomNode(node);
            else {
                var virtualChildren = ko.virtualElements.childNodes(node);
                for (var i = 0, j = virtualChildren.length; i < j; i++)
                    ko.removeNode(virtualChildren[i]);
            }
        },

        setDomNodeChildren: function(node, childNodes) {
            if (!isStartComment(node))
                ko.utils.setDomNodeChildren(node, childNodes);
            else {
                ko.virtualElements.emptyNode(node);
                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children
                for (var i = 0, j = childNodes.length; i < j; i++)
                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);
            }
        },

        prepend: function(containerNode, nodeToPrepend) {
            if (!isStartComment(containerNode)) {
                if (containerNode.firstChild)
                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);
                else
                    containerNode.appendChild(nodeToPrepend);
            } else {
                // Start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);
            }
        },

        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {
            if (!isStartComment(containerNode)) {
                // Insert after insertion point
                if (insertAfterNode.nextSibling)
                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
                else
                    containerNode.appendChild(nodeToInsert);
            } else {
                // Children of start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
            }
        },

        firstChild: function(node) {
            if (!isStartComment(node))
                return node.firstChild;
            if (!node.nextSibling || isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        nextSibling: function(node) {
            if (isStartComment(node))
                node = getMatchingEndComment(node);
            if (node.nextSibling && isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        virtualNodeBindingValue: function(node) {
            var regexMatch = isStartComment(node);
            return regexMatch ? regexMatch[1] : null;
        },

        normaliseVirtualElementDomStructure: function(elementVerified) {
            // Workaround for https://github.com/SteveSanderson/knockout/issues/155
            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes
            // that are direct descendants of <ul> into the preceding <li>)
            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])
                return;

            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
            // must be intended to appear *after* that child, so move them there.
            var childNode = elementVerified.firstChild;
            if (childNode) {
                do {
                    if (childNode.nodeType === 1) {
                        var unbalancedTags = getUnbalancedChildTags(childNode);
                        if (unbalancedTags) {
                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
                            var nodeToInsertBefore = childNode.nextSibling;
                            for (var i = 0; i < unbalancedTags.length; i++) {
                                if (nodeToInsertBefore)
                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);
                                else
                                    elementVerified.appendChild(unbalancedTags[i]);
                            }
                        }
                    }
                } while (childNode = childNode.nextSibling);
            }
        }
    };
})();
ko.exportSymbol('virtualElements', ko.virtualElements);
ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);
ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);
//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified
ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);
//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified
ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);
ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);
(function() {
    var defaultBindingAttributeName = "data-bind";

    ko.bindingProvider = function() {
        this.bindingCache = {};
    };

    ko.utils.extend(ko.bindingProvider.prototype, {
        'nodeHasBindings': function(node) {
            switch (node.nodeType) {
                case 1: return node.getAttribute(defaultBindingAttributeName) != null;   // Element
                case 8: return ko.virtualElements.virtualNodeBindingValue(node) != null; // Comment node
                default: return false;
            }
        },

        'getBindings': function(node, bindingContext) {
            var bindingsString = this['getBindingsString'](node, bindingContext);
            return bindingsString ? this['parseBindingsString'](bindingsString, bindingContext) : null;
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'getBindingsString': function(node, bindingContext) {
            switch (node.nodeType) {
                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element
                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node
                default: return null;
            }
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'parseBindingsString': function(bindingsString, bindingContext) {
            try {
                var viewModel = bindingContext['$data'],
                    scopes = (typeof viewModel == 'object' && viewModel != null) ? [viewModel, bindingContext] : [bindingContext],
                    bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, scopes.length, this.bindingCache);
                return bindingFunction(scopes);
            } catch (ex) {
                throw new Error("Unable to parse bindings.\nMessage: " + ex + ";\nBindings value: " + bindingsString);
            }
        }
    });

    ko.bindingProvider['instance'] = new ko.bindingProvider();

    function createBindingsStringEvaluatorViaCache(bindingsString, scopesCount, cache) {
        var cacheKey = scopesCount + '_' + bindingsString;
        return cache[cacheKey]
            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, scopesCount));
    }

    function createBindingsStringEvaluator(bindingsString, scopesCount) {
        var rewrittenBindings = " { " + ko.jsonExpressionRewriting.insertPropertyAccessorsIntoJson(bindingsString) + " } ";
        return ko.utils.buildEvalWithinScopeFunction(rewrittenBindings, scopesCount);
    }
})();

ko.exportSymbol('bindingProvider', ko.bindingProvider);
(function () {
    ko.bindingHandlers = {};

    ko.bindingContext = function(dataItem, parentBindingContext) {
        if (parentBindingContext) {
            ko.utils.extend(this, parentBindingContext); // Inherit $root and any custom properties
            this['$parentContext'] = parentBindingContext;
            this['$parent'] = parentBindingContext['$data'];
            this['$parents'] = (parentBindingContext['$parents'] || []).slice(0);
            this['$parents'].unshift(this['$parent']);
        } else {
            this['$parents'] = [];
            this['$root'] = dataItem;
        }
        this['$data'] = dataItem;
    }
    ko.bindingContext.prototype['createChildContext'] = function (dataItem) {
        return new ko.bindingContext(dataItem, this);
    };
    ko.bindingContext.prototype['extend'] = function(properties) {
        var clone = ko.utils.extend(new ko.bindingContext(), this);
        return ko.utils.extend(clone, properties);
    };

    function validateThatBindingIsAllowedForVirtualElements(bindingName) {
        var validator = ko.virtualElements.allowedBindings[bindingName];
        if (!validator)
            throw new Error("The binding '" + bindingName + "' cannot be used with virtual elements")
    }

    function applyBindingsToDescendantsInternal (viewModel, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {
        var currentChild, nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);
        while (currentChild = nextInQueue) {
            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
            nextInQueue = ko.virtualElements.nextSibling(currentChild);
            applyBindingsToNodeAndDescendantsInternal(viewModel, currentChild, bindingContextsMayDifferFromDomParentElement);
        }
    }

    function applyBindingsToNodeAndDescendantsInternal (viewModel, nodeVerified, bindingContextMayDifferFromDomParentElement) {
        var shouldBindDescendants = true;

        // Perf optimisation: Apply bindings only if...
        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
        var isElement = (nodeVerified.nodeType === 1);
        if (isElement) // Workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);

        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)
                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)
        if (shouldApplyBindings)
            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, viewModel, bindingContextMayDifferFromDomParentElement).shouldBindDescendants;

        if (shouldBindDescendants) {
            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
            //    hence bindingContextsMayDifferFromDomParentElement is false
            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
            //    hence bindingContextsMayDifferFromDomParentElement is true
            applyBindingsToDescendantsInternal(viewModel, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);
        }
    }

    function applyBindingsToNodeInternal (node, bindings, viewModelOrBindingContext, bindingContextMayDifferFromDomParentElement) {
        // Need to be sure that inits are only run once, and updates never run until all the inits have been run
        var initPhase = 0; // 0 = before all inits, 1 = during inits, 2 = after all inits

        // Each time the dependentObservable is evaluated (after data changes),
        // the binding attribute is reparsed so that it can pick out the correct
        // model properties in the context of the changed data.
        // DOM event callbacks need to be able to access this changed data,
        // so we need a single parsedBindings variable (shared by all callbacks
        // associated with this node's bindings) that all the closures can access.
        var parsedBindings;
        function makeValueAccessor(bindingKey) {
            return function () { return parsedBindings[bindingKey] }
        }
        function parsedBindingsAccessor() {
            return parsedBindings;
        }

        var bindingHandlerThatControlsDescendantBindings;
        ko.dependentObservable(
            function () {
                // Ensure we have a nonnull binding context to work with
                var bindingContextInstance = viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)
                    ? viewModelOrBindingContext
                    : new ko.bindingContext(ko.utils.unwrapObservable(viewModelOrBindingContext));
                var viewModel = bindingContextInstance['$data'];

                // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
                // we can easily recover it just by scanning up the node's ancestors in the DOM
                // (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
                if (bindingContextMayDifferFromDomParentElement)
                    ko.storedBindingContextForNode(node, bindingContextInstance);

                // Use evaluatedBindings if given, otherwise fall back on asking the bindings provider to give us some bindings
                var evaluatedBindings = (typeof bindings == "function") ? bindings() : bindings;
                parsedBindings = evaluatedBindings || ko.bindingProvider['instance']['getBindings'](node, bindingContextInstance);

                if (parsedBindings) {
                    // First run all the inits, so bindings can register for notification on changes
                    if (initPhase === 0) {
                        initPhase = 1;
                        for (var bindingKey in parsedBindings) {
                            var binding = ko.bindingHandlers[bindingKey];
                            if (binding && node.nodeType === 8)
                                validateThatBindingIsAllowedForVirtualElements(bindingKey);

                            if (binding && typeof binding["init"] == "function") {
                                var handlerInitFn = binding["init"];
                                var initResult = handlerInitFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);

                                // If this binding handler claims to control descendant bindings, make a note of this
                                if (initResult && initResult['controlsDescendantBindings']) {
                                    if (bindingHandlerThatControlsDescendantBindings !== undefined)
                                        throw new Error("Multiple bindings (" + bindingHandlerThatControlsDescendantBindings + " and " + bindingKey + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                                    bindingHandlerThatControlsDescendantBindings = bindingKey;
                                }
                            }
                        }
                        initPhase = 2;
                    }

                    // ... then run all the updates, which might trigger changes even on the first evaluation
                    if (initPhase === 2) {
                        for (var bindingKey in parsedBindings) {
                            var binding = ko.bindingHandlers[bindingKey];
                            if (binding && typeof binding["update"] == "function") {
                                var handlerUpdateFn = binding["update"];
                                handlerUpdateFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);
                            }
                        }
                    }
                }
            },
            null,
            { 'disposeWhenNodeIsRemoved' : node }
        );

        return {
            shouldBindDescendants: bindingHandlerThatControlsDescendantBindings === undefined
        };
    };

    var storedBindingContextDomDataKey = "__ko_bindingContext__";
    ko.storedBindingContextForNode = function (node, bindingContext) {
        if (arguments.length == 2)
            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);
        else
            return ko.utils.domData.get(node, storedBindingContextDomDataKey);
    }

    ko.applyBindingsToNode = function (node, bindings, viewModel) {
        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(node);
        return applyBindingsToNodeInternal(node, bindings, viewModel, true);
    };

    ko.applyBindingsToDescendants = function(viewModel, rootNode) {
        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)
            applyBindingsToDescendantsInternal(viewModel, rootNode, true);
    };

    ko.applyBindings = function (viewModel, rootNode) {
        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))
            throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
        rootNode = rootNode || window.document.body; // Make "rootNode" parameter optional

        applyBindingsToNodeAndDescendantsInternal(viewModel, rootNode, true);
    };

    // Retrieving binding context from arbitrary nodes
    ko.contextFor = function(node) {
        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
        switch (node.nodeType) {
            case 1:
            case 8:
                var context = ko.storedBindingContextForNode(node);
                if (context) return context;
                if (node.parentNode) return ko.contextFor(node.parentNode);
                break;
        }
        return undefined;
    };
    ko.dataFor = function(node) {
        var context = ko.contextFor(node);
        return context ? context['$data'] : undefined;
    };

    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);
    ko.exportSymbol('applyBindings', ko.applyBindings);
    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);
    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);
    ko.exportSymbol('contextFor', ko.contextFor);
    ko.exportSymbol('dataFor', ko.dataFor);
})();
// For certain common events (currently just 'click'), allow a simplified data-binding syntax
// e.g. click:handler instead of the usual full-length event:{click:handler}
var eventHandlersWithShortcuts = ['click'];
ko.utils.arrayForEach(eventHandlersWithShortcuts, function(eventName) {
    ko.bindingHandlers[eventName] = {
        'init': function(element, valueAccessor, allBindingsAccessor, viewModel) {
            var newValueAccessor = function () {
                var result = {};
                result[eventName] = valueAccessor();
                return result;
            };
            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindingsAccessor, viewModel);
        }
    }
});


ko.bindingHandlers['event'] = {
    'init' : function (element, valueAccessor, allBindingsAccessor, viewModel) {
        var eventsToHandle = valueAccessor() || {};
        for(var eventNameOutsideClosure in eventsToHandle) {
            (function() {
                var eventName = eventNameOutsideClosure; // Separate variable to be captured by event handler closure
                if (typeof eventName == "string") {
                    ko.utils.registerEventHandler(element, eventName, function (event) {
                        var handlerReturnValue;
                        var handlerFunction = valueAccessor()[eventName];
                        if (!handlerFunction)
                            return;
                        var allBindings = allBindingsAccessor();

                        try {
                            // Take all the event args, and prefix with the viewmodel
                            var argsForHandler = ko.utils.makeArray(arguments);
                            argsForHandler.unshift(viewModel);
                            handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);
                        } finally {
                            if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                                if (event.preventDefault)
                                    event.preventDefault();
                                else
                                    event.returnValue = false;
                            }
                        }

                        var bubble = allBindings[eventName + 'Bubble'] !== false;
                        if (!bubble) {
                            event.cancelBubble = true;
                            if (event.stopPropagation)
                                event.stopPropagation();
                        }
                    });
                }
            })();
        }
    }
};

ko.bindingHandlers['submit'] = {
    'init': function (element, valueAccessor, allBindingsAccessor, viewModel) {
        if (typeof valueAccessor() != "function")
            throw new Error("The value for a submit binding must be a function");
        ko.utils.registerEventHandler(element, "submit", function (event) {
            var handlerReturnValue;
            var value = valueAccessor();
            try { handlerReturnValue = value.call(viewModel, element); }
            finally {
                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                    if (event.preventDefault)
                        event.preventDefault();
                    else
                        event.returnValue = false;
                }
            }
        });
    }
};

ko.bindingHandlers['visible'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        var isCurrentlyVisible = !(element.style.display == "none");
        if (value && !isCurrentlyVisible)
            element.style.display = "";
        else if ((!value) && isCurrentlyVisible)
            element.style.display = "none";
    }
}

ko.bindingHandlers['enable'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (value && element.disabled)
            element.removeAttribute("disabled");
        else if ((!value) && (!element.disabled))
            element.disabled = true;
    }
};

ko.bindingHandlers['disable'] = {
    'update': function (element, valueAccessor) {
        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });
    }
};

function ensureDropdownSelectionIsConsistentWithModelValue(element, modelValue, preferModelValue) {
    if (preferModelValue) {
        if (modelValue !== ko.selectExtensions.readValue(element))
            ko.selectExtensions.writeValue(element, modelValue);
    }

    // No matter which direction we're syncing in, we want the end result to be equality between dropdown value and model value.
    // If they aren't equal, either we prefer the dropdown value, or the model value couldn't be represented, so either way,
    // change the model value to match the dropdown.
    if (modelValue !== ko.selectExtensions.readValue(element))
        ko.utils.triggerEvent(element, "change");
};

ko.bindingHandlers['value'] = {
    'init': function (element, valueAccessor, allBindingsAccessor) {
        // Always catch "change" event; possibly other events too if asked
        var eventsToCatch = ["change"];
        var requestedEventsToCatch = allBindingsAccessor()["valueUpdate"];
        if (requestedEventsToCatch) {
            if (typeof requestedEventsToCatch == "string") // Allow both individual event names, and arrays of event names
                requestedEventsToCatch = [requestedEventsToCatch];
            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);
            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);
        }

        var valueUpdateHandler = function() {
            var modelValue = valueAccessor();
            var elementValue = ko.selectExtensions.readValue(element);
            ko.jsonExpressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'value', elementValue, /* checkIfDifferent: */ true);
        }

        // Workaround for https://github.com/SteveSanderson/knockout/issues/122
        // IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == "input" && element.type == "text"
                                       && element.autocomplete != "off" && (!element.form || element.form.autocomplete != "off");
        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, "propertychange") == -1) {
            var propertyChangedFired = false;
            ko.utils.registerEventHandler(element, "propertychange", function () { propertyChangedFired = true });
            ko.utils.registerEventHandler(element, "blur", function() {
                if (propertyChangedFired) {
                    propertyChangedFired = false;
                    valueUpdateHandler();
                }
            });
        }

        ko.utils.arrayForEach(eventsToCatch, function(eventName) {
            // The syntax "after<eventname>" means "run the handler asynchronously after the event"
            // This is useful, for example, to catch "keydown" events after the browser has updated the control
            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
            var handler = valueUpdateHandler;
            if (ko.utils.stringStartsWith(eventName, "after")) {
                handler = function() { setTimeout(valueUpdateHandler, 0) };
                eventName = eventName.substring("after".length);
            }
            ko.utils.registerEventHandler(element, eventName, handler);
        });
    },
    'update': function (element, valueAccessor) {
        var valueIsSelectOption = ko.utils.tagNameLower(element) === "select";
        var newValue = ko.utils.unwrapObservable(valueAccessor());
        var elementValue = ko.selectExtensions.readValue(element);
        var valueHasChanged = (newValue != elementValue);

        // JavaScript's 0 == "" behavious is unfortunate here as it prevents writing 0 to an empty text box (loose equality suggests the values are the same).
        // We don't want to do a strict equality comparison as that is more confusing for developers in certain cases, so we specifically special case 0 != "" here.
        if ((newValue === 0) && (elementValue !== 0) && (elementValue !== "0"))
            valueHasChanged = true;

        if (valueHasChanged) {
            var applyValueAction = function () { ko.selectExtensions.writeValue(element, newValue); };
            applyValueAction();

            // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
            // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
            // to apply the value as well.
            var alsoApplyAsynchronously = valueIsSelectOption;
            if (alsoApplyAsynchronously)
                setTimeout(applyValueAction, 0);
        }

        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
        // because you're not allowed to have a model value that disagrees with a visible UI selection.
        if (valueIsSelectOption && (element.length > 0))
            ensureDropdownSelectionIsConsistentWithModelValue(element, newValue, /* preferModelValue */ false);
    }
};

ko.bindingHandlers['options'] = {
    'update': function (element, valueAccessor, allBindingsAccessor) {
        if (ko.utils.tagNameLower(element) !== "select")
            throw new Error("options binding applies only to SELECT elements");

        var selectWasPreviouslyEmpty = element.length == 0;
        var previousSelectedValues = ko.utils.arrayMap(ko.utils.arrayFilter(element.childNodes, function (node) {
            return node.tagName && (ko.utils.tagNameLower(node) === "option") && node.selected;
        }), function (node) {
            return ko.selectExtensions.readValue(node) || node.innerText || node.textContent;
        });
        var previousScrollTop = element.scrollTop;

        var value = ko.utils.unwrapObservable(valueAccessor());
        var selectedValue = element.value;

        // Remove all existing <option>s.
        // Need to use .remove() rather than .removeChild() for <option>s otherwise IE behaves oddly (https://github.com/SteveSanderson/knockout/issues/134)
        while (element.length > 0) {
            ko.cleanNode(element.options[0]);
            element.remove(0);
        }

        if (value) {
            var allBindings = allBindingsAccessor();
            if (typeof value.length != "number")
                value = [value];
            if (allBindings['optionsCaption']) {
                var option = document.createElement("option");
                ko.utils.setHtml(option, allBindings['optionsCaption']);
                ko.selectExtensions.writeValue(option, undefined);
                element.appendChild(option);
            }
            for (var i = 0, j = value.length; i < j; i++) {
                var option = document.createElement("option");

                // Apply a value to the option element
                var optionValue = typeof allBindings['optionsValue'] == "string" ? value[i][allBindings['optionsValue']] : value[i];
                optionValue = ko.utils.unwrapObservable(optionValue);
                ko.selectExtensions.writeValue(option, optionValue);

                // Apply some text to the option element
                var optionsTextValue = allBindings['optionsText'];
                var optionText;
                if (typeof optionsTextValue == "function")
                    optionText = optionsTextValue(value[i]); // Given a function; run it against the data value
                else if (typeof optionsTextValue == "string")
                    optionText = value[i][optionsTextValue]; // Given a string; treat it as a property name on the data value
                else
                    optionText = optionValue;				 // Given no optionsText arg; use the data value itself
                if ((optionText === null) || (optionText === undefined))
                    optionText = "";

                ko.utils.setTextContent(option, optionText);

                element.appendChild(option);
            }

            // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
            // That's why we first added them without selection. Now it's time to set the selection.
            var newOptions = element.getElementsByTagName("option");
            var countSelectionsRetained = 0;
            for (var i = 0, j = newOptions.length; i < j; i++) {
                if (ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[i])) >= 0) {
                    ko.utils.setOptionNodeSelectionState(newOptions[i], true);
                    countSelectionsRetained++;
                }
            }

            element.scrollTop = previousScrollTop;

            if (selectWasPreviouslyEmpty && ('value' in allBindings)) {
                // Ensure consistency between model value and selected option.
                // If the dropdown is being populated for the first time here (or was otherwise previously empty),
                // the dropdown selection state is meaningless, so we preserve the model value.
                ensureDropdownSelectionIsConsistentWithModelValue(element, ko.utils.unwrapObservable(allBindings['value']), /* preferModelValue */ true);
            }

            // Workaround for IE9 bug
            ko.utils.ensureSelectElementIsRenderedCorrectly(element);
        }
    }
};
ko.bindingHandlers['options'].optionValueDomDataKey = '__ko.optionValueDomData__';

ko.bindingHandlers['selectedOptions'] = {
    getSelectedValuesFromSelectNode: function (selectNode) {
        var result = [];
        var nodes = selectNode.childNodes;
        for (var i = 0, j = nodes.length; i < j; i++) {
            var node = nodes[i], tagName = ko.utils.tagNameLower(node);
            if (tagName == "option" && node.selected)
                result.push(ko.selectExtensions.readValue(node));
            else if (tagName == "optgroup") {
                var selectedValuesFromOptGroup = ko.bindingHandlers['selectedOptions'].getSelectedValuesFromSelectNode(node);
                Array.prototype.splice.apply(result, [result.length, 0].concat(selectedValuesFromOptGroup)); // Add new entries to existing 'result' instance
            }
        }
        return result;
    },
    'init': function (element, valueAccessor, allBindingsAccessor) {
        ko.utils.registerEventHandler(element, "change", function () {
            var value = valueAccessor();
            var valueToWrite = ko.bindingHandlers['selectedOptions'].getSelectedValuesFromSelectNode(this);
            ko.jsonExpressionRewriting.writeValueToProperty(value, allBindingsAccessor, 'value', valueToWrite);
        });
    },
    'update': function (element, valueAccessor) {
        if (ko.utils.tagNameLower(element) != "select")
            throw new Error("values binding applies only to SELECT elements");

        var newValue = ko.utils.unwrapObservable(valueAccessor());
        if (newValue && typeof newValue.length == "number") {
            var nodes = element.childNodes;
            for (var i = 0, j = nodes.length; i < j; i++) {
                var node = nodes[i];
                if (ko.utils.tagNameLower(node) === "option")
                    ko.utils.setOptionNodeSelectionState(node, ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0);
            }
        }
    }
};

ko.bindingHandlers['text'] = {
    'update': function (element, valueAccessor) {
        ko.utils.setTextContent(element, valueAccessor());
    }
};

ko.bindingHandlers['html'] = {
    'init': function() {
        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
        return { 'controlsDescendantBindings': true };
    },
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        ko.utils.setHtml(element, value);
    }
};

ko.bindingHandlers['css'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        for (var className in value) {
            if (typeof className == "string") {
                var shouldHaveClass = ko.utils.unwrapObservable(value[className]);
                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);
            }
        }
    }
};

ko.bindingHandlers['style'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        for (var styleName in value) {
            if (typeof styleName == "string") {
                var styleValue = ko.utils.unwrapObservable(value[styleName]);
                element.style[styleName] = styleValue || ""; // Empty string removes the value, whereas null/undefined have no effect
            }
        }
    }
};

ko.bindingHandlers['uniqueName'] = {
    'init': function (element, valueAccessor) {
        if (valueAccessor()) {
            element.name = "ko_unique_" + (++ko.bindingHandlers['uniqueName'].currentIndex);

            // Workaround IE 6/7 issue
            // - https://github.com/SteveSanderson/knockout/issues/197
            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
            if (ko.utils.isIe6 || ko.utils.isIe7)
                element.mergeAttributes(document.createElement("<input name='" + element.name + "'/>"), false);
        }
    }
};
ko.bindingHandlers['uniqueName'].currentIndex = 0;

ko.bindingHandlers['checked'] = {
    'init': function (element, valueAccessor, allBindingsAccessor) {
        var updateHandler = function() {
            var valueToWrite;
            if (element.type == "checkbox") {
                valueToWrite = element.checked;
            } else if ((element.type == "radio") && (element.checked)) {
                valueToWrite = element.value;
            } else {
                return; // "checked" binding only responds to checkboxes and selected radio buttons
            }

            var modelValue = valueAccessor();
            if ((element.type == "checkbox") && (ko.utils.unwrapObservable(modelValue) instanceof Array)) {
                // For checkboxes bound to an array, we add/remove the checkbox value to that array
                // This works for both observable and non-observable arrays
                var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.unwrapObservable(modelValue), element.value);
                if (element.checked && (existingEntryIndex < 0))
                    modelValue.push(element.value);
                else if ((!element.checked) && (existingEntryIndex >= 0))
                    modelValue.splice(existingEntryIndex, 1);
            } else {
                ko.jsonExpressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'checked', valueToWrite, true);
            }
        };
        ko.utils.registerEventHandler(element, "click", updateHandler);

        // IE 6 won't allow radio buttons to be selected unless they have a name
        if ((element.type == "radio") && !element.name)
            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });
    },
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());

        if (element.type == "checkbox") {
            if (value instanceof Array) {
                // When bound to an array, the checkbox being checked represents its value being present in that array
                element.checked = ko.utils.arrayIndexOf(value, element.value) >= 0;
            } else {
                // When bound to anything other value (not an array), the checkbox being checked represents the value being trueish
                element.checked = value;
            }
        } else if (element.type == "radio") {
            element.checked = (element.value == value);
        }
    }
};

var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };
ko.bindingHandlers['attr'] = {
    'update': function(element, valueAccessor, allBindingsAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        for (var attrName in value) {
            if (typeof attrName == "string") {
                var attrValue = ko.utils.unwrapObservable(value[attrName]);

                // To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
                // when someProp is a "no value"-like value (strictly null, false, or undefined)
                // (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
                var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);
                if (toRemove)
                    element.removeAttribute(attrName);

                // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the
                // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,
                // but instead of figuring out the mode, we'll just set the attribute through the Javascript
                // property for IE <= 8.
                if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {
                    attrName = attrHtmlToJavascriptMap[attrName];
                    if (toRemove)
                        element.removeAttribute(attrName);
                    else
                        element[attrName] = attrValue;
                } else if (!toRemove) {
                    element.setAttribute(attrName, attrValue.toString());
                }
            }
        }
    }
};

ko.bindingHandlers['hasfocus'] = {
    'init': function(element, valueAccessor, allBindingsAccessor) {
        var writeValue = function(valueToWrite) {
            var modelValue = valueAccessor();
            ko.jsonExpressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'hasfocus', valueToWrite, true);
        };
        ko.utils.registerEventHandler(element, "focus", function() { writeValue(true) });
        ko.utils.registerEventHandler(element, "focusin", function() { writeValue(true) }); // For IE
        ko.utils.registerEventHandler(element, "blur",  function() { writeValue(false) });
        ko.utils.registerEventHandler(element, "focusout",  function() { writeValue(false) }); // For IE
    },
    'update': function(element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        value ? element.focus() : element.blur();
        ko.utils.triggerEvent(element, value ? "focusin" : "focusout"); // For IE, which doesn't reliably fire "focus" or "blur" events synchronously
    }
};

// "with: someExpression" is equivalent to "template: { if: someExpression, data: someExpression }"
ko.bindingHandlers['with'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() { var value = valueAccessor(); return { 'if': value, 'data': value, 'templateEngine': ko.nativeTemplateEngine.instance } };
    },
    'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['with'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['with'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
    }
};
ko.jsonExpressionRewriting.bindingRewriteValidators['with'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['with'] = true;

// "if: someExpression" is equivalent to "template: { if: someExpression }"
ko.bindingHandlers['if'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() { return { 'if': valueAccessor(), 'templateEngine': ko.nativeTemplateEngine.instance } };
    },
    'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['if'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['if'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
    }
};
ko.jsonExpressionRewriting.bindingRewriteValidators['if'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['if'] = true;

// "ifnot: someExpression" is equivalent to "template: { ifnot: someExpression }"
ko.bindingHandlers['ifnot'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() { return { 'ifnot': valueAccessor(), 'templateEngine': ko.nativeTemplateEngine.instance } };
    },
    'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['ifnot'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['ifnot'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
    }
};
ko.jsonExpressionRewriting.bindingRewriteValidators['ifnot'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['ifnot'] = true;

// "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
// "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
ko.bindingHandlers['foreach'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() {
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());

            // If bindingValue is the array, just pass it on its own
            if ((!bindingValue) || typeof bindingValue.length == "number")
                return { 'foreach': bindingValue, 'templateEngine': ko.nativeTemplateEngine.instance };

            // If bindingValue.data is the array, preserve all relevant options
            return {
                'foreach': bindingValue['data'],
                'includeDestroyed': bindingValue['includeDestroyed'],
                'afterAdd': bindingValue['afterAdd'],
                'beforeRemove': bindingValue['beforeRemove'],
                'afterRender': bindingValue['afterRender'],
                'templateEngine': ko.nativeTemplateEngine.instance
            };
        };
    },
    'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
    }
};
ko.jsonExpressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['foreach'] = true;
// If you want to make a custom template engine,
//
// [1] Inherit from this class (like ko.nativeTemplateEngine does)
// [2] Override 'renderTemplateSource', supplying a function with this signature:
//
//        function (templateSource, bindingContext, options) {
//            // - templateSource.text() is the text of the template you should render
//            // - bindingContext.$data is the data you should pass into the template
//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
//            //     and bindingContext.$root available in the template too
//            // - options gives you access to any other properties set on "data-bind: { template: options }"
//            //
//            // Return value: an array of DOM nodes
//        }
//
// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
//
//        function (script) {
//            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
//        }
//
//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.

ko.templateEngine = function () { };

ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
    throw new Error("Override renderTemplateSource");
};

ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {
    throw new Error("Override createJavaScriptEvaluatorBlock");
};

ko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {
    // Named template
    if (typeof template == "string") {
        templateDocument = templateDocument || document;
        var elem = templateDocument.getElementById(template);
        if (!elem)
            throw new Error("Cannot find template with ID " + template);
        return new ko.templateSources.domElement(elem);
    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {
        // Anonymous template
        return new ko.templateSources.anonymousTemplate(template);
    } else
        throw new Error("Unknown template type: " + template);
};

ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    return this['renderTemplateSource'](templateSource, bindingContext, options);
};

ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {
    // Skip rewriting if requested
    if (this['allowTemplateRewriting'] === false)
        return true;

    // Perf optimisation - see below
    var templateIsInExternalDocument = templateDocument && templateDocument != document;
    if (!templateIsInExternalDocument && this.knownRewrittenTemplates && this.knownRewrittenTemplates[template])
        return true;

    return this['makeTemplateSource'](template, templateDocument)['data']("isRewritten");
};

ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    var rewritten = rewriterCallback(templateSource['text']());
    templateSource['text'](rewritten);
    templateSource['data']("isRewritten", true);

    // Perf optimisation - for named templates, track which ones have been rewritten so we can
    // answer 'isTemplateRewritten' *without* having to use getElementById (which is slow on IE < 8)
    //
    // Note that we only cache the status for templates in the main document, because caching on a per-doc
    // basis complicates the implementation excessively. In a future version of KO, we will likely remove
    // this 'isRewritten' cache entirely anyway, because the benefit is extremely minor and only applies
    // to rewritable templates, which are pretty much deprecated since KO 2.0.
    var templateIsInExternalDocument = templateDocument && templateDocument != document;
    if (!templateIsInExternalDocument && typeof template == "string") {
        this.knownRewrittenTemplates = this.knownRewrittenTemplates || {};
        this.knownRewrittenTemplates[template] = true;
    }
};

ko.exportSymbol('templateEngine', ko.templateEngine);

ko.templateRewriting = (function () {
    var memoizeDataBindingAttributeSyntaxRegex = /(<[a-z]+\d*(\s+(?!data-bind=)[a-z0-9\-]+(=(\"[^\"]*\"|\'[^\']*\'))?)*\s+)data-bind=(["'])([\s\S]*?)\5/gi;
    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;

    function validateDataBindValuesForRewriting(keyValueArray) {
        var allValidators = ko.jsonExpressionRewriting.bindingRewriteValidators;
        for (var i = 0; i < keyValueArray.length; i++) {
            var key = keyValueArray[i]['key'];
            if (allValidators.hasOwnProperty(key)) {
                var validator = allValidators[key];

                if (typeof validator === "function") {
                    var possibleErrorMessage = validator(keyValueArray[i]['value']);
                    if (possibleErrorMessage)
                        throw new Error(possibleErrorMessage);
                } else if (!validator) {
                    throw new Error("This template engine does not support the '" + key + "' binding within its templates");
                }
            }
        }
    }

    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, templateEngine) {
        var dataBindKeyValueArray = ko.jsonExpressionRewriting.parseObjectLiteral(dataBindAttributeValue);
        validateDataBindValuesForRewriting(dataBindKeyValueArray);
        var rewrittenDataBindAttributeValue = ko.jsonExpressionRewriting.insertPropertyAccessorsIntoJson(dataBindKeyValueArray);

        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional
        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this
        // extra indirection.
        var applyBindingsToNextSiblingScript = "ko.templateRewriting.applyMemoizedBindingsToNextSibling(function() { \
            return (function() { return { " + rewrittenDataBindAttributeValue + " } })() \
        })";
        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;
    }

    return {
        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {
            if (!templateEngine['isTemplateRewritten'](template, templateDocument))
                templateEngine['rewriteTemplate'](template, function (htmlString) {
                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);
                }, templateDocument);
        },

        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {
            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[6], /* tagToRetain: */ arguments[1], templateEngine);
            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ "<!-- ko -->", templateEngine);
            });
        },

        applyMemoizedBindingsToNextSibling: function (bindings) {
            return ko.memoization.memoize(function (domNode, bindingContext) {
                if (domNode.nextSibling)
                    ko.applyBindingsToNode(domNode.nextSibling, bindings, bindingContext);
            });
        }
    }
})();

ko.exportSymbol('templateRewriting', ko.templateRewriting);
ko.exportSymbol('templateRewriting.applyMemoizedBindingsToNextSibling', ko.templateRewriting.applyMemoizedBindingsToNextSibling); // Exported only because it has to be referenced by string lookup from within rewritten template
(function() {
    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
    //
    // Two are provided by default:
    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
    //                                           without reading/writing the actual element text content, since it will be overwritten
    //                                           with the rendered template output.
    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
    // Template sources need to have the following functions:
    //   text() 			- returns the template text from your storage location
    //   text(value)		- writes the supplied template text to your storage location
    //   data(key)			- reads values stored using data(key, value) - see below
    //   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
    //
    // Optionally, template sources can also have the following functions:
    //   nodes()            - returns a DOM element containing the nodes of this template, where available
    //   nodes(value)       - writes the given DOM element to your storage location
    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
    //
    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
    // using and overriding "makeTemplateSource" to return an instance of your custom template source.

    ko.templateSources = {};

    // ---- ko.templateSources.domElement -----

    ko.templateSources.domElement = function(element) {
        this.domElement = element;
    }

    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {
        var tagNameLower = ko.utils.tagNameLower(this.domElement),
            elemContentsProperty = tagNameLower === "script" ? "text"
                                 : tagNameLower === "textarea" ? "value"
                                 : "innerHTML";

        if (arguments.length == 0) {
            return this.domElement[elemContentsProperty];
        } else {
            var valueToWrite = arguments[0];
            if (elemContentsProperty === "innerHTML")
                ko.utils.setHtml(this.domElement, valueToWrite);
            else
                this.domElement[elemContentsProperty] = valueToWrite;
        }
    };

    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {
        if (arguments.length === 1) {
            return ko.utils.domData.get(this.domElement, "templateSourceData_" + key);
        } else {
            ko.utils.domData.set(this.domElement, "templateSourceData_" + key, arguments[1]);
        }
    };

    // ---- ko.templateSources.anonymousTemplate -----
    // Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
    // For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
    // Writing to "text" is still supported, but then the template data will not be available as DOM nodes.

    var anonymousTemplatesDomDataKey = "__ko_anon_template__";
    ko.templateSources.anonymousTemplate = function(element) {
        this.domElement = element;
    }
    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();
    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {
        if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            if (templateData.textData === undefined && templateData.containerData)
                templateData.textData = templateData.containerData.innerHTML;
            return templateData.textData;
        } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {textData: valueToWrite});
        }
    };
    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {
        if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            return templateData.containerData;
        } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {containerData: valueToWrite});
        }
    };

    ko.exportSymbol('templateSources', ko.templateSources);
    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);
    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);
})();
(function () {
    var _templateEngine;
    ko.setTemplateEngine = function (templateEngine) {
        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))
            throw new Error("templateEngine must inherit from ko.templateEngine");
        _templateEngine = templateEngine;
    }

    function invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, action) {
        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);
        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {
            nextInQueue = ko.virtualElements.nextSibling(node);
            if (node.nodeType === 1 || node.nodeType === 8)
                action(node);
        }
    }

    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {
        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element
        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
        // (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)

        if (continuousNodeArray.length) {
            var firstNode = continuousNodeArray[0], lastNode = continuousNodeArray[continuousNodeArray.length - 1];

            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
            // whereas a regular applyBindings won't introduce new memoized nodes
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function(node) {
                ko.applyBindings(bindingContext, node);
            });
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function(node) {
                ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);
            });
        }
    }

    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {
        return nodeOrNodeArray.nodeType ? nodeOrNodeArray
                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]
                                        : null;
    }

    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {
        options = options || {};
        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
        var templateDocument = firstTargetNode && firstTargetNode.ownerDocument;
        var templateEngineToUse = (options['templateEngine'] || _templateEngine);
        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);
        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);

        // Loosely check result is an array of DOM nodes
        if ((typeof renderedNodesArray.length != "number") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != "number"))
            throw new Error("Template engine must return an array of DOM nodes");

        var haveAddedNodesToParent = false;
        switch (renderMode) {
            case "replaceChildren":
                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "replaceNode":
                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "ignoreTargetNode": break;
            default:
                throw new Error("Unknown renderMode: " + renderMode);
        }

        if (haveAddedNodesToParent) {
            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);
            if (options['afterRender'])
                options['afterRender'](renderedNodesArray, bindingContext['$data']);
        }

        return renderedNodesArray;
    }

    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {
        options = options || {};
        if ((options['templateEngine'] || _templateEngine) == undefined)
            throw new Error("Set a template engine before calling renderTemplate");
        renderMode = renderMode || "replaceChildren";

        if (targetNodeOrNodeArray) {
            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);

            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)
            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == "replaceNode") ? firstTargetNode.parentNode : firstTargetNode;

            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes
                function () {
                    // Ensure we've got a proper binding context to work with
                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))
                        ? dataOrBindingContext
                        : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));

                    // Support selecting template as a function of the data being rendered
                    var templateName = typeof(template) == 'function' ? template(bindingContext['$data']) : template;

                    var renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);
                    if (renderMode == "replaceNode") {
                        targetNodeOrNodeArray = renderedNodesArray;
                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
                    }
                },
                null,
                { 'disposeWhen': whenToDispose, 'disposeWhenNodeIsRemoved': activelyDisposeWhenNodeIsRemoved }
            );
        } else {
            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
            return ko.memoization.memoize(function (domNode) {
                ko.renderTemplate(template, dataOrBindingContext, options, domNode, "replaceNode");
            });
        }
    };

    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {
        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
        var arrayItemContext;

        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
        var executeTemplateForArrayItem = function (arrayValue, index) {
            // Support selecting template as a function of the data being rendered
            var templateName = typeof(template) == 'function' ? template(arrayValue) : template;
            arrayItemContext = parentBindingContext['createChildContext'](ko.utils.unwrapObservable(arrayValue));
            arrayItemContext['$index'] = index;
            return executeTemplate(null, "ignoreTargetNode", templateName, arrayItemContext, options);
        }

        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {
            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);
            if (options['afterRender'])
                options['afterRender'](addedNodesArray, arrayValue);
        };

        return ko.dependentObservable(function () {
            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];
            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
                unwrappedArray = [unwrappedArray];

            // Filter out any entries marked as destroyed
            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {
                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);
            });

            ko.utils.setDomNodeChildrenFromArrayMapping(targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback);

        }, null, { 'disposeWhenNodeIsRemoved': targetNode });
    };

    var templateSubscriptionDomDataKey = '__ko__templateSubscriptionDomDataKey__';
    function disposeOldSubscriptionAndStoreNewOne(element, newSubscription) {
        var oldSubscription = ko.utils.domData.get(element, templateSubscriptionDomDataKey);
        if (oldSubscription && (typeof(oldSubscription.dispose) == 'function'))
            oldSubscription.dispose();
        ko.utils.domData.set(element, templateSubscriptionDomDataKey, newSubscription);
    }

    ko.bindingHandlers['template'] = {
        'init': function(element, valueAccessor) {
            // Support anonymous templates
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());
            if ((typeof bindingValue != "string") && (!bindingValue['name']) && (element.nodeType == 1 || element.nodeType == 8)) {
                // It's an anonymous template - store the element contents, then clear the element
                var templateNodes = element.nodeType == 1 ? element.childNodes : ko.virtualElements.childNodes(element),
                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent
                new ko.templateSources.anonymousTemplate(element)['nodes'](container);
            }
            return { 'controlsDescendantBindings': true };
        },
        'update': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());
            var templateName;
            var shouldDisplay = true;

            if (typeof bindingValue == "string") {
                templateName = bindingValue;
            } else {
                templateName = bindingValue['name'];

                // Support "if"/"ifnot" conditions
                if ('if' in bindingValue)
                    shouldDisplay = shouldDisplay && ko.utils.unwrapObservable(bindingValue['if']);
                if ('ifnot' in bindingValue)
                    shouldDisplay = shouldDisplay && !ko.utils.unwrapObservable(bindingValue['ifnot']);
            }

            var templateSubscription = null;

            if ((typeof bindingValue === 'object') && ('foreach' in bindingValue)) { // Note: can't use 'in' operator on strings
                // Render once for each data point (treating data set as empty if shouldDisplay==false)
                var dataArray = (shouldDisplay && bindingValue['foreach']) || [];
                templateSubscription = ko.renderTemplateForEach(templateName || element, dataArray, /* options: */ bindingValue, element, bindingContext);
            } else {
                if (shouldDisplay) {
                    // Render once for this single data point (or use the viewModel if no data was provided)
                    var innerBindingContext = (typeof bindingValue == 'object') && ('data' in bindingValue)
                        ? bindingContext['createChildContext'](ko.utils.unwrapObservable(bindingValue['data'])) // Given an explitit 'data' value, we create a child binding context for it
                        : bindingContext;                                                                       // Given no explicit 'data' value, we retain the same binding context
                    templateSubscription = ko.renderTemplate(templateName || element, innerBindingContext, /* options: */ bindingValue, element);
                } else
                    ko.virtualElements.emptyNode(element);
            }

            // It only makes sense to have a single template subscription per element (otherwise which one should have its output displayed?)
            disposeOldSubscriptionAndStoreNewOne(element, templateSubscription);
        }
    };

    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.
    ko.jsonExpressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {
        var parsedBindingValue = ko.jsonExpressionRewriting.parseObjectLiteral(bindingValue);

        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])
            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)

        if (ko.jsonExpressionRewriting.keyValueArrayContainsKey(parsedBindingValue, "name"))
            return null; // Named templates can be rewritten, so return "no error"
        return "This template engine does not support anonymous templates nested within its templates";
    };

    ko.virtualElements.allowedBindings['template'] = true;
})();

ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);
ko.exportSymbol('renderTemplate', ko.renderTemplate);

(function () {
    // Simple calculation based on Levenshtein distance.
    function calculateEditDistanceMatrix(oldArray, newArray, maxAllowedDistance) {
        var distances = [];
        for (var i = 0; i <= newArray.length; i++)
            distances[i] = [];

        // Top row - transform old array into empty array via deletions
        for (var i = 0, j = Math.min(oldArray.length, maxAllowedDistance); i <= j; i++)
            distances[0][i] = i;

        // Left row - transform empty array into new array via additions
        for (var i = 1, j = Math.min(newArray.length, maxAllowedDistance); i <= j; i++) {
            distances[i][0] = i;
        }

        // Fill out the body of the array
        var oldIndex, oldIndexMax = oldArray.length, newIndex, newIndexMax = newArray.length;
        var distanceViaAddition, distanceViaDeletion;
        for (oldIndex = 1; oldIndex <= oldIndexMax; oldIndex++) {
            var newIndexMinForRow = Math.max(1, oldIndex - maxAllowedDistance);
            var newIndexMaxForRow = Math.min(newIndexMax, oldIndex + maxAllowedDistance);
            for (newIndex = newIndexMinForRow; newIndex <= newIndexMaxForRow; newIndex++) {
                if (oldArray[oldIndex - 1] === newArray[newIndex - 1])
                    distances[newIndex][oldIndex] = distances[newIndex - 1][oldIndex - 1];
                else {
                    var northDistance = distances[newIndex - 1][oldIndex] === undefined ? Number.MAX_VALUE : distances[newIndex - 1][oldIndex] + 1;
                    var westDistance = distances[newIndex][oldIndex - 1] === undefined ? Number.MAX_VALUE : distances[newIndex][oldIndex - 1] + 1;
                    distances[newIndex][oldIndex] = Math.min(northDistance, westDistance);
                }
            }
        }

        return distances;
    }

    function findEditScriptFromEditDistanceMatrix(editDistanceMatrix, oldArray, newArray) {
        var oldIndex = oldArray.length;
        var newIndex = newArray.length;
        var editScript = [];
        var maxDistance = editDistanceMatrix[newIndex][oldIndex];
        if (maxDistance === undefined)
            return null; // maxAllowedDistance must be too small
        while ((oldIndex > 0) || (newIndex > 0)) {
            var me = editDistanceMatrix[newIndex][oldIndex];
            var distanceViaAdd = (newIndex > 0) ? editDistanceMatrix[newIndex - 1][oldIndex] : maxDistance + 1;
            var distanceViaDelete = (oldIndex > 0) ? editDistanceMatrix[newIndex][oldIndex - 1] : maxDistance + 1;
            var distanceViaRetain = (newIndex > 0) && (oldIndex > 0) ? editDistanceMatrix[newIndex - 1][oldIndex - 1] : maxDistance + 1;
            if ((distanceViaAdd === undefined) || (distanceViaAdd < me - 1)) distanceViaAdd = maxDistance + 1;
            if ((distanceViaDelete === undefined) || (distanceViaDelete < me - 1)) distanceViaDelete = maxDistance + 1;
            if (distanceViaRetain < me - 1) distanceViaRetain = maxDistance + 1;

            if ((distanceViaAdd <= distanceViaDelete) && (distanceViaAdd < distanceViaRetain)) {
                editScript.push({ status: "added", value: newArray[newIndex - 1] });
                newIndex--;
            } else if ((distanceViaDelete < distanceViaAdd) && (distanceViaDelete < distanceViaRetain)) {
                editScript.push({ status: "deleted", value: oldArray[oldIndex - 1] });
                oldIndex--;
            } else {
                editScript.push({ status: "retained", value: oldArray[oldIndex - 1] });
                newIndex--;
                oldIndex--;
            }
        }
        return editScript.reverse();
    }

    ko.utils.compareArrays = function (oldArray, newArray, maxEditsToConsider) {
        if (maxEditsToConsider === undefined) {
            return ko.utils.compareArrays(oldArray, newArray, 1)                 // First consider likely case where there is at most one edit (very fast)
                || ko.utils.compareArrays(oldArray, newArray, 10)                // If that fails, account for a fair number of changes while still being fast
                || ko.utils.compareArrays(oldArray, newArray, Number.MAX_VALUE); // Ultimately give the right answer, even though it may take a long time
        } else {
            oldArray = oldArray || [];
            newArray = newArray || [];
            var editDistanceMatrix = calculateEditDistanceMatrix(oldArray, newArray, maxEditsToConsider);
            return findEditScriptFromEditDistanceMatrix(editDistanceMatrix, oldArray, newArray);
        }
    };
})();

ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);

(function () {
    // Objective:
    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
    //   previously mapped - retain those nodes, and just insert/delete other ones

    // "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
    // You can use this, for example, to activate bindings on those nodes.

    function fixUpVirtualElements(contiguousNodeArray) {
        // Ensures that contiguousNodeArray really *is* an array of contiguous siblings, even if some of the interior
        // ones have changed since your array was first built (e.g., because your array contains virtual elements, and
        // their virtual children changed when binding was applied to them).
        // This is needed so that we can reliably remove or update the nodes corresponding to a given array item

        if (contiguousNodeArray.length > 2) {
            // Build up the actual new contiguous node set
            var current = contiguousNodeArray[0], last = contiguousNodeArray[contiguousNodeArray.length - 1], newContiguousSet = [current];
            while (current !== last) {
                current = current.nextSibling;
                if (!current) // Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)
                    return;
                newContiguousSet.push(current);
            }

            // ... then mutate the input array to match this.
            // (The following line replaces the contents of contiguousNodeArray with newContiguousSet)
            Array.prototype.splice.apply(contiguousNodeArray, [0, contiguousNodeArray.length].concat(newContiguousSet));
        }
    }

    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {
        // Map this array value inside a dependentObservable so we re-map when any dependency changes
        var mappedNodes = [];
        var dependentObservable = ko.dependentObservable(function() {
            var newMappedNodes = mapping(valueToMap, index) || [];

            // On subsequent evaluations, just replace the previously-inserted DOM nodes
            if (mappedNodes.length > 0) {
                fixUpVirtualElements(mappedNodes);
                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);
                if (callbackAfterAddingNodes)
                    callbackAfterAddingNodes(valueToMap, newMappedNodes);
            }

            // Replace the contents of the mappedNodes array, thereby updating the record
            // of which nodes would be deleted if valueToMap was itself later removed
            mappedNodes.splice(0, mappedNodes.length);
            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);
        }, null, { 'disposeWhenNodeIsRemoved': containerNode, 'disposeWhen': function() { return (mappedNodes.length == 0) || !ko.utils.domNodeIsAttachedToDocument(mappedNodes[0]) } });
        return { mappedNodes : mappedNodes, dependentObservable : dependentObservable };
    }

    var lastMappingResultDomDataKey = "setDomNodeChildrenFromArrayMapping_lastMappingResult";

    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {
        // Compare the provided array against the previous one
        array = array || [];
        options = options || {};
        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;
        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];
        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });
        var editScript = ko.utils.compareArrays(lastArray, array);

        // Build the new mapping result
        var newMappingResult = [];
        var lastMappingResultIndex = 0;
        var nodesToDelete = [];
        var newMappingResultIndex = 0;
        var nodesAdded = [];
        var insertAfterNode = null;
        for (var i = 0, j = editScript.length; i < j; i++) {
            switch (editScript[i].status) {
                case "retained":
                    // Just keep the information - don't touch the nodes
                    var dataToRetain = lastMappingResult[lastMappingResultIndex];
                    dataToRetain.indexObservable(newMappingResultIndex);
                    newMappingResultIndex = newMappingResult.push(dataToRetain);
                    if (dataToRetain.domNodes.length > 0)
                        insertAfterNode = dataToRetain.domNodes[dataToRetain.domNodes.length - 1];
                    lastMappingResultIndex++;
                    break;

                case "deleted":
                    // Stop tracking changes to the mapping for these nodes
                    lastMappingResult[lastMappingResultIndex].dependentObservable.dispose();

                    // Queue these nodes for later removal
                    fixUpVirtualElements(lastMappingResult[lastMappingResultIndex].domNodes);
                    ko.utils.arrayForEach(lastMappingResult[lastMappingResultIndex].domNodes, function (node) {
                        nodesToDelete.push({
                          element: node,
                          index: i,
                          value: editScript[i].value
                        });
                        insertAfterNode = node;
                    });
                    lastMappingResultIndex++;
                    break;

                case "added":
                    var valueToMap = editScript[i].value;
                    var indexObservable = ko.observable(newMappingResultIndex);
                    var mapData = mapNodeAndRefreshWhenChanged(domNode, mapping, valueToMap, callbackAfterAddingNodes, indexObservable);
                    var mappedNodes = mapData.mappedNodes;

                    // On the first evaluation, insert the nodes at the current insertion point
                    newMappingResultIndex = newMappingResult.push({
                        arrayEntry: editScript[i].value,
                        domNodes: mappedNodes,
                        dependentObservable: mapData.dependentObservable,
                        indexObservable: indexObservable
                    });
                    for (var nodeIndex = 0, nodeIndexMax = mappedNodes.length; nodeIndex < nodeIndexMax; nodeIndex++) {
                        var node = mappedNodes[nodeIndex];
                        nodesAdded.push({
                          element: node,
                          index: i,
                          value: editScript[i].value
                        });
                        if (insertAfterNode == null) {
                            // Insert "node" (the newly-created node) as domNode's first child
                            ko.virtualElements.prepend(domNode, node);
                        } else {
                            // Insert "node" into "domNode" immediately after "insertAfterNode"
                            ko.virtualElements.insertAfter(domNode, node, insertAfterNode);
                        }
                        insertAfterNode = node;
                    }
                    if (callbackAfterAddingNodes)
                        callbackAfterAddingNodes(valueToMap, mappedNodes, indexObservable);
                    break;
            }
        }

        ko.utils.arrayForEach(nodesToDelete, function (node) { ko.cleanNode(node.element) });

        var invokedBeforeRemoveCallback = false;
        if (!isFirstExecution) {
            if (options['afterAdd']) {
                for (var i = 0; i < nodesAdded.length; i++)
                    options['afterAdd'](nodesAdded[i].element, nodesAdded[i].index, nodesAdded[i].value);
            }
            if (options['beforeRemove']) {
                for (var i = 0; i < nodesToDelete.length; i++)
                    options['beforeRemove'](nodesToDelete[i].element, nodesToDelete[i].index, nodesToDelete[i].value);
                invokedBeforeRemoveCallback = true;
            }
        }
        if (!invokedBeforeRemoveCallback && nodesToDelete.length) {
            for (var i = 0; i < nodesToDelete.length; i++) {
                var element = nodesToDelete[i].element;
                if (element.parentNode)
                    element.parentNode.removeChild(element);
            }
        }

        // Store a copy of the array items we just considered so we can difference it next time
        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);
    }
})();

ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);
ko.nativeTemplateEngine = function () {
    this['allowTemplateRewriting'] = false;
}

ko.nativeTemplateEngine.prototype = new ko.templateEngine();
ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly
        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,
        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;

    if (templateNodes) {
        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);
    } else {
        var templateText = templateSource['text']();
        return ko.utils.parseHtmlFragment(templateText);
    }
};

ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();
ko.setTemplateEngine(ko.nativeTemplateEngine.instance);

ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);
(function() {
    ko.jqueryTmplTemplateEngine = function () {
        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl
        // doesn't expose a version number, so we have to infer it.
        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,
        // which KO internally refers to as version "2", so older versions are no longer detected.
        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {
            if ((typeof(jQuery) == "undefined") || !(jQuery['tmpl']))
                return 0;
            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.
            try {
                if (jQuery['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {
                    // Since 1.0.0pre, custom tags should append markup to an array called "__"
                    return 2; // Final version of jquery.tmpl
                }
            } catch(ex) { /* Apparently not the version we were looking for */ }

            return 1; // Any older version that we don't support
        })();

        function ensureHasReferencedJQueryTemplates() {
            if (jQueryTmplVersion < 2)
                throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");
        }

        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {
            return jQuery['tmpl'](compiledTemplate, data, jQueryTemplateOptions);
        }

        this['renderTemplateSource'] = function(templateSource, bindingContext, options) {
            options = options || {};
            ensureHasReferencedJQueryTemplates();

            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)
            var precompiled = templateSource['data']('precompiled');
            if (!precompiled) {
                var templateText = templateSource['text']() || "";
                // Wrap in "with($whatever.koBindingContext) { ... }"
                templateText = "{{ko_with $item.koBindingContext}}" + templateText + "{{/ko_with}}";

                precompiled = jQuery['template'](null, templateText);
                templateSource['data']('precompiled', precompiled);
            }

            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays
            var jQueryTemplateOptions = jQuery['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);

            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);
            resultNodes['appendTo'](document.createElement("div")); // Using "appendTo" forces jQuery/jQuery.tmpl to perform necessary cleanup work

            jQuery['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders
            return resultNodes;
        };

        this['createJavaScriptEvaluatorBlock'] = function(script) {
            return "{{ko_code ((function() { return " + script + " })()) }}";
        };

        this['addTemplate'] = function(templateName, templateMarkup) {
            document.write("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "</script>");
        };

        if (jQueryTmplVersion > 0) {
            jQuery['tmpl']['tag']['ko_code'] = {
                open: "__.push($1 || '');"
            };
            jQuery['tmpl']['tag']['ko_with'] = {
                open: "with($1) {",
                close: "} "
            };
        }
    };

    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();

    // Use this one by default *only if jquery.tmpl is referenced*
    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();
    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)
        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);

    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);
})();
});
})(window,document,navigator);
define(['knockoutbase'],function(ko) {
	
	ko.bindingHandlers['slide'] = {
        'update': function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor());
            var isCurrentlyVisible = !(element.style.display == "none");
            if (value && !isCurrentlyVisible)
                $(element).slideDown();
            else if ((!value) && isCurrentlyVisible)
                $(element).slideUp();
        }
    };
    window.ko = ko;
    require(['lib/knockout/knockout.simpleGrid']);
	return ko;
});(function () {
    // Private function
    function getColumnsForScaffolding(data) {
        if ((typeof data.length !== 'number') || data.length === 0) {
            return [];
        }
        var columns = [];
        for (var propertyName in data[0]) {
            columns.push({ headerText:propertyName, headerTextTrans:propertyName, rowText:propertyName, columnType:propertyName, width:propertyName, sortable:propertyName });
        }
        return columns;
    }

    ko.simpleGrid = {
        // Defines a view model class you can use to populate a grid
        viewModel:function (configuration) {
            var self = this;
            self.sideNumber = 3; //å½åé¡µé¢å·¦å³é¡µç æ°
            self.midNumber = 1 + 2 * self.sideNumber; //ä¸­é´è¦æ¾ç¤ºçé¡µç 
            self.allNumber = self.midNumber + 2; //æ¾ç¤ºå®æ´é¡µç çæå¤§é¡µç 

            self.showMenu = false;

            self.className = "ko-grid colorHoverTable " + (configuration.tableClass ? configuration.tableClass : "");

            self.ellipsisLength = 16;
            self.searchInitStatus = ko.observable();
            self.searchKey = ko.observable();
            self.searchColumns = configuration.searchColumns;
            self.primaryColumn = configuration.primaryColumn;
            self.showPager = !!configuration.showPager;
            self.sortField = ko.observable(configuration.defaultSortField);
            self.sortDirection = ko.observable(configuration.defaultSortDirection);
            self.data = ko.observableArray(configuration.data);
			self.pageToGo = ko.observable();
            self.sortedData = ko.computed(function () {
                var exp = self.sortField();
                var dir = self.sortDirection();
                if (exp && dir) {
                    return self.data().sort(function (a, b) {
                        return dir == "ASC" ? a[exp].localeCompare(b[exp]) : b[exp].localeCompare(a[exp]);
                    });
                } else {
                    return self.data();
                }
            });
            self.checkedCount = ko.observable(0);
            self.translate = function () {
                $(".ko-grid").translate();
                if ($("#pblist tr").length >0 ){
                    $("#pblist-checkall").removeClass("disable");
                }else{
                    $("#pblist-checkall").addClass("disable");
                }
            };

            self.clearCheck = function () {
                $("#ko_grid_checkAll").removeAttr("checked");
                $("#pblist-checkall").removeClass("checkbox_selected");
                $("p:checkbox[target='pblist-checkall']").removeAttr("checked");
                $("p[id^='chk__'] ").removeClass("checkbox_selected");
                $("p[id^='chk__'] :checkbox").removeAttr("checked");
                self.checkedCount(0);
                self.translate();
            };

            self.searchText = ko.computed(function () {
                self.clearCheck();
                var text = "";
                if (!self.searchInitStatus()) {
                    text = $.trim(self.searchKey());
                }
                return text;
            });

            self.afterSearchData = ko.computed(function () {
                var key = $.trim(self.searchText()).toLowerCase();
                if (key == "") {
                    return self.sortedData();
                }
                else {
                    return _.filter(self.sortedData(), function (item) {
                        for (var i = 0; i < self.searchColumns.length; i++) {
                            var col = self.searchColumns[i];
                            if (item[col].toLowerCase().indexOf(key) != -1) {
                                return true;
                            }
                        }
                        return false;
                    });
                }
            });
            self.currentPageIndex = ko.observable(0);
            self.pageSize = configuration.pageSize || 5;
            // If you don't specify columns configuration, we'll use scaffolding
            self.columns = configuration.columns || getColumnsForScaffolding(ko.utils.unwrapObservable(self.afterSearchData()));
            self.rowClickHandler = configuration.rowClickHandler;
            self.hasRowClickHandler = !!configuration.rowClickHandler;
            self.deleteHandler = configuration.deleteHandler;
            self.idName = configuration.idName;
            self.tmplType = configuration.tmplType;
            self.changeTemplateHandler = configuration.changeTemplateHandler;
            self.maxPageIndex = ko.computed(function () {
                return Math.ceil(ko.utils.unwrapObservable(self.afterSearchData()).length / self.pageSize) - 1;
            });
            self.radioClickExtend = configuration.radioClickHandler;
            self.radioChecked4Column = configuration.radioChecked4Column;
            self.radioChecked4Value = configuration.radioChecked4Value;

            self.fixCurrentPageIndex = function (oldIndex) {
                if (oldIndex < 0) return 0;
                var maxIndex = self.maxPageIndex();
                return oldIndex > maxIndex ? maxIndex : oldIndex;
            };

            self.pagerStart = ko.computed(function () {
                var index = self.fixCurrentPageIndex(self.currentPageIndex());
                var maxIndex = self.maxPageIndex();
                var retIndex = 0;
                if (index < self.midNumber || maxIndex <= self.allNumber) {
                    retIndex = 1;
                } else if (index + self.sideNumber >= maxIndex) {
                    retIndex = maxIndex - self.midNumber;
                } else {
                    retIndex = index - self.sideNumber;
                }
                return retIndex;
            });

            self.pagerEnd = ko.computed(function () {
                var index = self.fixCurrentPageIndex(self.currentPageIndex());
                var maxIndex = self.maxPageIndex();
                var retIndex = 0;
                if (index + self.sideNumber >= maxIndex || maxIndex <= self.allNumber) {
                    retIndex = maxIndex - 1;
                } else if (index < self.midNumber) {
                    retIndex = self.midNumber;
                } else {
                    retIndex = index + self.sideNumber;
                }
                if (maxIndex - retIndex == 2) {
                    retIndex = maxIndex -1;
                }
                return retIndex;
            });

            self.itemsOnCurrentPage = ko.computed(function () {
                self.translate();
                var pageIndex = self.fixCurrentPageIndex(self.currentPageIndex());
                var startIndex = self.pageSize * pageIndex;
                return self.afterSearchData().slice(startIndex, startIndex + self.pageSize);
            });

            self.changePage = function (pageIndex) {
                var pageIndex = self.fixCurrentPageIndex(pageIndex);
                self.currentPageIndex(pageIndex);
                self.clearCheck();
            };

            self.nextPage = function () {
                var pageIndex = self.fixCurrentPageIndex(self.currentPageIndex() + 1);
                self.currentPageIndex(pageIndex);
                self.clearCheck();
            };

            self.previousPage = function () {
                var pageIndex = self.fixCurrentPageIndex(self.currentPageIndex() - 1);
                self.currentPageIndex(pageIndex);
                self.clearCheck();
            };

            self.clearAllChecked = function () {
                $("#pblist-checkall").trigger("click");
                if ($("#pblist-checkall").hasClass("checkbox_selected")) {
                    $("#pblist-checkall").trigger("click");
                }
            }

            self.clickCheckAll = function () {
                if ($("#pblist-checkall").hasClass("checkbox_selected")) {
                    self.checkedCount(0);
                } else {
                    var checked = $("#pblist :checkbox").length;
                    self.checkedCount(checked);
                }
            };

            self.clickCheck = function (index) {
                var checkbox = $("#chk__" + index+" :checkbox");
                if (checkbox.attr("checked")) {
                    checkbox.removeAttr("checked");
                } else {
                    checkbox.attr("checked", "checked");
                }
                checkCheckbox(checkbox);

                var checked = $("#pblist p.checkbox_selected :checkbox").length;
                self.checkedCount(checked);
            };

            self.selectedItems = function (type) {
                var checks;
                if (self.tmplType == 'card') {
                    checks = $("#pblist :checkbox[checked='checked']");
                }
                else {
                    checks = $("#pblist :checkbox[checked='checked']");
                }

                var items = [];
                if (type == "primary") {
                    checks.each(function () {
                        items.push($(this).attr("primaryValue"));
                    });
                } else {
                    checks.each(function () {
                        items.push($(this).val());
                    });
                }
                return items;
            };

            self.selectedIds = function () {
                return  self.selectedItems("id");
            };

            self.selectedPrimaryValue = function () {
                return  self.selectedItems("primary");
            };

            self.radioSelectValue = function () {
                if ($.browser.msie && event && event.srcElement && event.srcElement.type == "radio") {
                    return event.srcElement.value;
                }
                return $("#pblist [name='ko_grid_radio']:checked").val();
            }

            self.radioSelectedPrimaryValue = function () {
                if ($.browser.msie && event && event.srcElement && event.srcElement.type == "radio") {
                    return event.srcElement.attribute("primaryValue");
                }
                return $("#pblist [name='ko_grid_radio']:checked").attr("primaryValue");
            }

            self.radioClick = function () {
                self.checkedCount(self.checkedCount() + 1);
            }

            self.clearRadioSelect = function () {
                $("#pblist [name='ko_grid_radio']:checked").removeAttr("checked");
                self.checkedCount(0);
            }

            self.setRadioSelect = function (val) {
                $("#pblist [name='ko_grid_radio'][value='" + val + "']").attr("checked", "checked");
                self.checkedCount(1);
            }

            self.sort = function (exp) {
                if (exp == undefined) {
                    return;
                }
                var sortExp = self.sortField();
                var dir = "ASC";
                if (exp == sortExp) {
                    dir = (self.sortDirection() == "ASC") ? "DESC" : "ASC";
                }
                self.sortField(exp);
                self.sortDirection(dir);

                self.data(self.data().sort(function (a, b) {
                    return dir == "ASC" ? a[exp].localeCompare(b[exp]) : b[exp].localeCompare(a[exp]);
                }));

                self.currentPageIndex(0);
                self.clearCheck();

                $(".ko-grid thead th.ko-grid-th-asc").removeClass("ko-grid-th-asc").addClass("ko-grid-th-sortable");
                $(".ko-grid thead th.ko-grid-th-desc").removeClass("ko-grid-th-desc").addClass("ko-grid-th-sortable");
                if (dir == "ASC") {
                    $("#ko_grid_th_" + exp).removeClass().addClass("ko-grid-th-asc");
                } else {
                    $("#ko_grid_th_" + exp).removeClass().addClass("ko-grid-th-desc");
                }
            };

            self.ellipsisText = function (txt) {
                if (!txt) return "";
                if ((txt.length * 2) < self.ellipsisLength) {
                    return txt;
                }
                var len = 0;
                for (var i = 0; i < txt.length; i++) {
                    if (txt.charCodeAt(i) > 256) {
                        len += 2;
                    } else {
                        len++;
                    }
                    if (len >= self.ellipsisLength) {
                        return txt.substring(0, i) + "...";
                    }
                }
                return txt;
            };
        }
    };

    // Templates used to render the grid
    var templateEngine = new ko.nativeTemplateEngine();

    templateEngine.addTemplate = function (templateName, templateMarkup) {
        if ($('#' + templateName)[0]) {
            $('#' + templateName).remove();
        }
        $('#container').append("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "<" + "/script>");
    };

    // The "simpleGrid" binding
    ko.bindingHandlers.simpleGrid = {
        init:function (element, viewModelAccessor) {

            var viewModel = viewModelAccessor();
            if (viewModel.rowClickHandler == undefined) {
                viewModel.rowClickHandler = function () {
                };
            }
            if (viewModel.deleteHandler == undefined) {
                viewModel.deleteHandler = function () {
                };
            }
            if (viewModel.radioClickExtend == undefined) {
                viewModel.radioClickHandler = function(){
                    viewModel.radioClick();
                    return true;
                }
            } else {
                viewModel.radioClickHandler = function () {
                    viewModel.radioClick();
                    viewModel.radioClickExtend();
                    return true;
                }
            }


            ko.utils.arrayMap(viewModel.columns, function (item) {
                if (item.columnType == undefined) {
                    item.columnType = 'text';
                }
                if (item.sortable == undefined) {
                    item.sortable = false;
                }
                if (item.headerTextTrans == undefined) {
                    item.headerTextTrans = '';
                }
                if (item.display == undefined) {
                    item.display = true;
                }
                if (item.needTrans == undefined) {
                    item.needTrans = false;
                }
            });

            if (viewModel.tmplType == 'card') {
                templateEngine.addTemplate("ko_simpleGrid_grid", "\
                <div class='ko-grid-container'>\
                    <div class='ko-grid-menu' data-bind='visible:showMenu'>\
                        <div class='ko-grid-option'>\
                            <img id='ko_grid_layout' class='cursor-pointer' src='img/list.png' data-bind='click:changeTemplateHandler'/>\
                            <p id=\"pblist-checkall\" target=\"pblist\" class=\"checkbox checkboxToggle\">\
                                <input type='checkbox' id='ko_grid_checkAll' data-bind='visible: tmplType==\"card\"&&data().length>0,click: clickCheckAll' />\
                            </p>\
                        </div>\
                        <div class='clean'></div>\
                    </div>\
                    <div id=\"pblist\" class=\"ko-grid\" data-bind=\"foreach: itemsOnCurrentPage\">\
                        <div class=\"ko-grid-card\" >\
                            <div class=\"ko-grid-card-content\" data-bind=\"foreach: $parent.columns ,click:function(){$root.rowClickHandler($data[$root.idName])}\">\
                                <!-- ko if: display==true -->\
                                <p data-bind=\"attr:{title:typeof rowText == 'function' ? rowText($parent) : $parent[rowText]},text: $root.ellipsisText(typeof rowText == 'function' ? rowText($parent) : $parent[rowText])\"></p>\
                                <!-- /ko -->\
                            </div>\
                            <div class=\"ko-grid-card-delete\" data-bind=\"click:function(){$root.deleteHandler($data[$root.idName]);}\" >Ã</div>\
                            <div class=\"ko-grid-card-check\" ><p class=\"checkbox\"><input type='checkbox' data-bind='value: $data[$root.idName],attr:{primaryValue:$data[$root.primaryColumn]}' target=\"pblist-checkall\"/></p></div>\
                        </div>\
                     <div>\
                </div>");
            } else {
                templateEngine.addTemplate("ko_simpleGrid_grid", "\
                <div class='ko-grid-container'>\
                    <div class='ko-grid-menu' data-bind='visible:showMenu'>\
                        <div class='ko-grid-option'>\
                            <img id='ko_grid_layout' class='cursor-pointer' src='img/card.png'  data-bind='click:changeTemplateHandler'/>\
                        </div>\
                        <div class='clean'></div>\
                    </div>\
                    <table data-bind=\"attr:{'class':className}\" cellspacing=\"0\" cellspadding='0'>\
                    <thead>\
                        <tr data-bind=\"foreach: columns\" >\
                           <!-- ko if: columnType=='checkbox' -->\
                               <th data-bind='attr:{width:width}, visible: display'>\
                                   <p id=\"pblist-checkall\" target=\"pblist\" class=\"checkbox checkboxToggle\" data-bind='click:$root.clickCheckAll'>\
                                       <input type='checkbox' id='ko_grid_checkAll'/>\
                                   </p>\
                               </th>\
                           <!-- /ko --> \
                           <!-- ko if: columnType=='text' || columnType=='image' -->\
                               <!-- ko if: sortable==true -->\
                               <th data-bind=\"visible: display, css: {'ko-grid-th-sortable':rowText!=$root.sortField(),'ko-grid-th-desc':(rowText==$root.sortField() && 'DESC'==$root.sortDirection()),'ko-grid-th-asc': (rowText==$root.sortField() && 'ASC'==$root.sortDirection())},attr:{id:'ko_grid_th_'+rowText,width:width},click:function(event,data){$root.sort(rowText)}\"><a href='#' data-bind=\"attr:{trans: headerTextTrans}\"></a></th>\
                               <!-- /ko --> \
                               <!-- ko if: sortable==false -->\
                               <th nowrap='nowrap' data-bind=\"visible: display, attr:{width:width,trans: headerTextTrans}\"></th>\
                               <!-- /ko --> \
                           <!-- /ko --> \
                           <!-- ko if: columnType=='radio' -->\
                               <th nowrap='nowrap' data-bind=\"visible: display, attr:{width:width,trans: headerTextTrans}\"></th>\
                           <!-- /ko --> \
                        </tr>\
                    </thead>\
                    <tbody id=\"pblist\" data-bind=\"foreach: itemsOnCurrentPage\">\
                        <tr data-bind=\"foreach: $parent.columns,css:{'odd': $index() % 2==1,'even':$index()%2==0 } \">\
                            <!-- ko if: columnType=='checkbox' -->\
                            <td class = 'ko-grid-center'><p class=\"checkbox\" manualControl='true' data-bind='attr:{id:\"chk__\"+ $parent[rowText]},click:function(){$root.clickCheck($parent[rowText])}'><input type='checkbox' data-bind='value: $parent[rowText],attr:{primaryValue:$parent[$root.primaryColumn]}' target=\"pblist-checkall\"/></p></td>\
                            <!-- /ko --> \
                            <!-- ko if: columnType=='radio' -->\
                            <td class = 'ko-grid-center'><input type='radio' name='ko_grid_radio' data-bind='click:$root.radioClickHandler,value: $parent[rowText],attr:{primaryValue:$parent[$root.primaryColumn]}'/></td>\
                            <!-- /ko --> \
                            <!-- ko if: columnType=='text' && !needTrans -->\
                            <td class = 'ko-grid-center' data-bind=\"visible: display, css:{'cursor-pointer':$root.hasRowClickHandler },text: typeof rowText == 'function' ? rowText($parent) : $parent[rowText], click:function(){$root.rowClickHandler($parent[$root.idName])}\"></td>\
                            <!-- /ko --> \
                            <!-- ko if: columnType=='text' && needTrans -->\
                            <td class = 'ko-grid-center' data-bind=\"visible: display, css:{'cursor-pointer':$root.hasRowClickHandler },click:function(){$root.rowClickHandler($parent[$root.idName])}\">\
                                <span data-bind=\"attr: {trans: $parent[rowText]}\"></span>\
                            </td>\
                            <!-- /ko -->\
                            <!-- ko if: columnType=='image' -->\
                            <td class = 'ko-grid-center' data-bind=\"visible: display, css:{'cursor-pointer':$root.hasRowClickHandler },click:function(){$root.rowClickHandler($parent[$root.idName])}\">\
                                <img data-bind=\"attr: {src: $parent[rowText]}\"/>\
                            </td>\
                            <!-- /ko --> \
                        </tr>\
                    </tbody>\
                </table>\
                </div>");
            }
            templateEngine.addTemplate("ko_simpleGrid_pageLinks", "\
                    <div class=\"ko-grid-pageLinks\">\
                        <a class='ko-grid-pager' href='javascript:void(0)' data-bind=\"click:previousPage,enable:$root.fixCurrentPageIndex($root.currentPageIndex())>0,visible:$root.afterSearchData().length>0,css:{'ko-grid-pager-disabled': $root.fixCurrentPageIndex($root.currentPageIndex())==0}\">&lt;&lt;</a>\
                        <a href='javascript:void(0)' data-bind=\"visible:$root.afterSearchData().length>0,text: 1, click: function() { $root.changePage(0); }, css: {'ko-grid-pager-selected': 0 == $root.fixCurrentPageIndex($root.currentPageIndex()),'ko-grid-pager':0 != $root.fixCurrentPageIndex($root.currentPageIndex()) }\"></a>\
                        <span data-bind='visible:pagerStart()>2'>...</span>\
                        <!-- ko foreach: ko.utils.range(pagerStart,pagerEnd) -->\
                            <a href='javascript:void(0)' data-bind=\"text: $data + 1, click: function() { $root.changePage($data); }, disable:$data == $root.fixCurrentPageIndex($root.currentPageIndex()) ,css: {'ko-grid-pager-selected': $data == $root.fixCurrentPageIndex($root.currentPageIndex()),'ko-grid-pager':$data != $root.fixCurrentPageIndex($root.currentPageIndex()) }\"></a>\
                        <!-- /ko -->\
                        <span data-bind='visible:pagerEnd()<maxPageIndex()-2'>...</span>\
                        <a href='javascript:void(0)' data-bind=\"visible:maxPageIndex()>0,text: maxPageIndex()+1, click: function() { $root.changePage(maxPageIndex());}, css: {'ko-grid-pager-selected':  maxPageIndex() == $root.fixCurrentPageIndex($root.currentPageIndex()),'ko-grid-pager': maxPageIndex() != $root.fixCurrentPageIndex($root.currentPageIndex()) }\"></a>\
                        <a class='ko-grid-pager' href='javascript:void(0)' data-bind=\"click:nextPage,enable:$root.fixCurrentPageIndex($root.currentPageIndex())<maxPageIndex(),visible:$root.afterSearchData().length>0,css:{'ko-grid-pager-disabled': $root.fixCurrentPageIndex($root.currentPageIndex())==maxPageIndex()}\">&gt;&gt;</a>\
                        <span style='display:none;'><span>(</span><span id='ko_simpleGrid_recordCount' data-bind='text:$root.afterSearchData().length'></span><span>)</span></span>\
						<label class=\"marginleft10\" trans=\"page\"></label>\
						<input id=\"ko-grid-input-page\" type=\"text\" data-bind=\"value:pageToGo,valueUpdate: 'afterkeydown'\" />\
						<input type=\"button\" class=\"btn-1 btn-ex\" trans=\"go\" data-bind=\"click:function() { $root.changePage(parseInt(pageToGo())-1); pageToGo(''); },enable: /^[0-9]+$/.test(pageToGo()) && (parseInt(pageToGo())-1) <= maxPageIndex() && (parseInt(pageToGo())-1) >= 0\"/>\
                    </div>");

            return { 'controlsDescendantBindings':true };
        },
        // This method is called to initialize the node, and will also be called again if you change what the grid is bound to
        update:function (element, viewModelAccessor, allBindingsAccessor) {
            var viewModel = viewModelAccessor(), allBindings = allBindingsAccessor();

            // Empty the element
            while (element.firstChild)
                ko.removeNode(element.firstChild);

            // Allow the default templates to be overridden
            var gridTemplateName = allBindings.simpleGridTemplate || "ko_simpleGrid_grid",
                pageLinksTemplateName = allBindings.simpleGridPagerTemplate || "ko_simpleGrid_pageLinks";

            // Render the main grid
            var gridContainer = element.appendChild(document.createElement("DIV"));
            ko.renderTemplate(gridTemplateName, viewModel, { templateEngine:templateEngine }, gridContainer, "replaceNode");

            // Render the page links
            if (viewModel.showPager) {
                var pageLinksContainer = element.appendChild(document.createElement("DIV"));
                ko.renderTemplate(pageLinksTemplateName, viewModel, { templateEngine:templateEngine }, pageLinksContainer, "replaceNode");
            }
        }
    };
})();/**
 * @module language
 * @class language
 */
define(['knockout',
        'service',
        'jquery',
        'config/config',
        'underscore'],
function(ko, service, $, config, _) {

    /**
     * æ ¹æ®è¯­è¨é¡¹å è½½è¯­è¨èµæºå¹¶ç¿»è¯é¡µé¢ä¸çbodyé¨å
     * @method setLocalization
     * @param {String} locale è¯­è¨é¡¹:zh-cn
     */
    function setLocalization(locale){
        $.i18n.properties({
            name:'Messages',
            path:'i18n/',
            mode:'map',
            cache: true,
            language:locale,
            callback: function() {
                jQuery.validator.messages = $.i18n.map;
                $('body').translate();
            }
        });
    }

    /**
     * LanguageVM
     * @class LanguageVM
     */
    function LanguageVM() {
        var self = this;
        var currentLan = getLanguage();
        var languages = _.map(config.LANGUAGES, function(item) {
            return new Option(item.name, item.value);
        });

        document.title = config.WEBUI_TITLE;
        if($('#webui_title')[0]) {
            $('#webui_title').html(config.WEBUI_TITLE);
        }

        self.languages = ko.observableArray(languages);
        self.currentLan = ko.observable(currentLan.Language);

        /**
         * è¯­è¨åæ¢äºä»¶å¤ç
         * @event langChangeHandler
         */
        self.langChangeHandler = function(data, event) {
            clearValidateMsg();

            service.setLanguage({Language: self.currentLan()}, function() {
                setLocalization(self.currentLan());
            });
        };

        //init language
        setLocalization(self.currentLan());
    }

    /**
     * è·åè¯­è¨é¡¹
     * @method getLanguage
     */
    function getLanguage() {
        return service.getLanguage();
    }

    /**
     * åå§åè¯­è¨VMå¹¶ç»å®
     * @method init
     */
    function init() {
        ko.applyBindings(new LanguageVM(), $('#language')[0]);
    }

    return {
        init: init
    };
});
<form id="frmLan">
    <div class="form-body">
        <div class="form-title" trans="router_setting"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" for="txtIpAddress" trans="ip_address"></label>
                <div class="span8">
                <input id="txtIpAddress" name="txtIpAddress" type="text" data-bind="value: ipAddress" class="required" maxlength="15"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" for="txtSubnetMask" trans="subnet_mask"></label>
                <div class="span8">
                <input id="txtSubnetMask" name="txtSubnetMask"  type="text" data-bind="value: subnetMask" class="required" maxlength="15"/>
                </div>
            </div>
            <div class="row-fluid" data-bind="visible: showMacAddress() && hasWifi()">
                <label class="span4 side-right" trans="mac_address"></label>
                <div class="span8">
                <label id="txtMacAddress" class="label-content" data-bind="text: macAddress"></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="dhcp_server"></label>
                <div class="span8">
                <input type="radio" name="dhcpServer" id="dhcpEnable" data-bind="checked: dhcpServer" value="1"/>
                <label for="dhcpEnable" trans="enable"></label>
                <input type="radio" name="dhcpServer" id="dhcpDisable" data-bind="checked: dhcpServer" value="0"/>
                <label for="dhcpDisable" trans="disable"></label>
                </div>
            </div>
            <div data-bind='visible: dhcpServer() == "1"'>
                <div class="row-fluid">
                    <label class="span4 side-right" trans='dhcp_ip_pool' for="txtDhcpIpPoolStart"></label>
                    <div class="span8">
                    <input id='txtDhcpIpPoolStart' name="txtDhcpIpPoolStart" type="text" data-bind="value: dhcpStart" class="required rangeInput" maxlength="15"/>
                    -
                    <input id='txtDhcpIpPoolEnd' name="txtDhcpIpPoolEnd" type="text" data-bind="value: dhcpEnd" class="required rangeInput" maxlength="15"/>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtDhcpLease" trans="dhcp_lease"></label>
                        <div class="span8">
                    <input id="txtDhcpLease" name="txtDhcpLease"  type="text" data-bind="value: dhcpLease" class="required" maxlength="5"/>
                    <label trans="hours" id="leaseLabel"></label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
            <input type="button" data-bind="click: clear" class="btn-1 " trans="cancel"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="lan_note_info"></li>
                <li trans="lan_note_ip_address"></li>
                <li trans="lan_note_subnet_mask"></li>
                <li trans="lan_note_dhcp_server"></li>
                <li trans="lan_note_dhcp_ip_pool"></li>
                <li trans="lan_note_dhcp_lease_time"></li>
                <li trans="lan_note"></li>
            </ul></div>
    </div>
</form>/**
 * Routerè®¾ç½®
 * @module lan
 * @class lan
 */
define([ 'jquery', 'knockout', 'config/config', 'service'],
    function ($, ko, config, service) {

        function LanVM() {
            var self = this;

            var info = getLanInfo();
            self.ipAddress = ko.observable(info.ipAddress);
            self.subnetMask = ko.observable(info.subnetMask);
            self.macAddress = ko.observable(info.macAddress);
            self.dhcpServer = ko.observable(info.dhcpServer);
            self.dhcpStart = ko.observable(info.dhcpStart);
            self.dhcpEnd = ko.observable(info.dhcpEnd);
            self.dhcpLease = ko.observable(info.dhcpLease);
            self.showMacAddress = ko.observable(config.SHOW_MAC_ADDRESS);
            self.hasWifi = ko.observable(config.HAS_WIFI);

            self.refreshStatus = function() {
                var connInfo = service.getConnectionInfo();
                if(connInfo.connectStatus == 'ppp_disconnected') {
                    $('#frmLan input').each(function() {
                        $(this).attr("disabled", false);
                    });
                }
                else {
                    $('#frmLan input').each(function() {
                        $(this).attr("disabled", true);
                    });

                    clearValidateMsg();
                }
            };

            self.clear = function() {
                clearTimer();
                init();
                clearValidateMsg();
            };

            self.save = function() {
                showLoading();
                var params = {};
                params.ipAddress = self.ipAddress();
                params.subnetMask = self.subnetMask();
                params.dhcpServer = self.dhcpServer();
                params.dhcpStart = self.dhcpStart();
                params.dhcpEnd = self.dhcpEnd();
                params.dhcpLease = self.dhcpLease();

                service.setLanInfo(params, function(result) {
                    if (result.result == "success") {
                        successOverlay();
                        self.clear();
                    } else {
                        errorOverlay();
                    }
                });
            };

            self.refreshStatus();
        }

        function getLanInfo() {
            return service.getLanInfo();
        }

        function init() {
            var container = $('#container');
            ko.cleanNode(container[0]);
            var vm = new LanVM();
            ko.applyBindings(vm, $('#container')[0]);

            addInterval(vm.refreshStatus, 1000);

            $('#frmLan').validate({
                submitHandler:function () {
                    vm.save();
                },
                rules:{
                    txtIpAddress: {
                        lanip_check: true,
                        ipRange: true
                    },
                    txtSubnetMask: {
                        ipv4: true,
                        subnetmask_check: true
                    },
                    txtDhcpIpPoolStart: {
                        lanip_check: true,
                        dhcp_check: "start",
                        dhcpCompare: "#txtDhcpIpPoolEnd"
                    },
                    txtDhcpIpPoolEnd: {
                        lanip_check: true,
                        dhcp_check: "end",
                        dhcpCompare: "#txtDhcpIpPoolStart"
                    },
                    txtDhcpLease: {
                        digits: true,
                        range: [1, 65535]
                    }
                },
                groups: {
                    lanip_check: "txtDhcpIpPoolStart txtDhcpIpPoolEnd"
                },
                errorPlacement: function(error, element) {
                    if (element.attr("name") == "txtDhcpIpPoolStart")
                        error.insertAfter("#txtDhcpIpPoolEnd");
                    else if(element.attr("name") == "txtDhcpLease") {
                        error.insertAfter("#leaseLabel");
                    }
                    else
                        error.insertAfter(element);
                }
            });

        }

        $.validator.addMethod("subnetmask_check", function (value, element, param) {
            var result = validateNetmask(value);
            return this.optional(element) || result;
        });

        $.validator.addMethod("dhcp_check", function (value, element, param) {
            var dhcpIp =  param == "start" ?  $('#txtDhcpIpPoolStart').val() : $('#txtDhcpIpPoolEnd').val();
            var result = validateGateway($('#txtIpAddress').val(), $('#txtSubnetMask').val(), dhcpIp);
            return this.optional(element) || result;
        });

        $.validator.addMethod("dhcpCompare", function (value, element, param) {
            var result;
            if(param == "#txtDhcpIpPoolStart") {
                result = validateStartEndIp($('#txtIpAddress').val(), $('#txtSubnetMask').val(), $(param).val(), value);
            }
            else {
                result = validateStartEndIp($('#txtIpAddress').val(), $('#txtSubnetMask').val(), value, $(param).val());
            }
            return result != 1;
        });

        $.validator.addMethod("ipRange", function (value, element, param) {
            var result = validateStartEndIp(value, $('#txtSubnetMask').val(), $('#txtDhcpIpPoolStart').val(), $('#txtDhcpIpPoolEnd').val());
            return result != 2;
        });

        //from 4.0
        function validateNetmask(netmask) {
            var array = new Array();
            array = netmask.split(".");

            if (array.length != 4)
            {
                return false;
            }

            array[0] = parseInt(array[0]);
            array[1] = parseInt(array[1]);
            array[2] = parseInt(array[2]);
            array[3] = parseInt(array[3]);

            if (array[3] != 0)
            {
                if (array[2] != 255 || array[1] != 255 || array[0] != 255)
                {
                    return false;
                }
                else
                {
                    if (!isNetmaskIPValid(array[3]))
                    {
                        return false;
                    }
                }
            }

            if (array[2] != 0)
            {
                if (array[1] != 255 || array[0] != 255)
                {
                    return false;
                }
                else
                {
                    if (!isNetmaskIPValid(array[2]))
                    {
                        return false;
                    }
                }
            }

            if (array[1] != 0)
            {
                if (array[0] != 255)
                {
                    return false;
                }
                else
                {
                    if (!isNetmaskIPValid(array[1]))
                    {
                        return false;
                    }
                }
            }
            if(array[0]!=255)
            {
                return false;
            }
            if ( "0.0.0.0" == netmask || "255.255.255.255" == netmask)
            {
                return false;
            }

            return true;
        }

        function isNetmaskIPValid(ip) {
            if (ip == 255 || ip == 254 || ip == 252 || ip == 248
                || ip == 240 || ip == 224 || ip == 192 || ip == 128 || ip == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        function validateGateway(wanIp, netmaskIp, gatewayIp) {
            var i1,i2,i3, wip, nip, gip;
            var lan4, mask4, pool4, net_no, lo_broadcast;

            i1=wanIp.indexOf('.');
            i2=wanIp.indexOf('.',(i1+1));
            i3=wanIp.indexOf('.',(i2+1));
            wip = hex(wanIp.substring(0,i1)) + hex(wanIp.substring((i1+1),i2)) +hex(wanIp.substring((i2+1),i3))+hex(wanIp.substring((i3+1),wanIp.length));
            wip = '0x'+wip;
            lan4 = wanIp.substring((i3+1),wanIp.length)-0;

            i1=netmaskIp.indexOf('.');
            i2=netmaskIp.indexOf('.',(i1+1));
            i3=netmaskIp.indexOf('.',(i2+1));
            nip = hex(netmaskIp.substring(0,i1)) + hex(netmaskIp.substring((i1+1),i2)) +hex(netmaskIp.substring((i2+1),i3)) +hex(netmaskIp.substring((i3+1),netmaskIp.length));
            nip = '0x'+nip;
            mask4 = netmaskIp.substring((i3+1),netmaskIp.length)-0;

            i1=gatewayIp.indexOf('.');
            i2=gatewayIp.indexOf('.',(i1+1));
            i3=gatewayIp.indexOf('.',(i2+1));
            gip = hex(gatewayIp.substring(0,i1)) + hex(gatewayIp.substring((i1+1),i2)) +hex(gatewayIp.substring((i2+1),i3)) +hex(gatewayIp.substring((i3+1),gatewayIp.length));
            gip = '0x'+gip;
            pool4 = gatewayIp.substring((i3+1),gatewayIp.length)-0;

            if (Op_AND_4Byte(wip, nip) != Op_AND_4Byte(gip, nip)) {
                return false;
            }

            net_no = (lan4 & mask4);
            lo_broadcast =  (lan4 & mask4) + (255-mask4);

            return !(pool4==net_no || pool4==lo_broadcast);
        }

        function hex(val) {
            var h = (val-0).toString(16);
            if(h.length==1) h='0'+h;
            return h.toUpperCase();
        }

        function Op_AND_4Byte(v1, v2) {
            var i;
            var var1 = [];
            var var2 = [];
            var result='0x';

            for (i=2,j=0;i<10;i+=2,j++) {
                var1[j]='0x'+v1.substring(i,i+2);
                var2[j]='0x'+v2.substring(i,i+2);
            }

            for (i=0;i<4;i++) {
                result = result + hex(var1[i]&var2[i]);
            }

            result = result-0;
            return result;
        }


        function validateStartEndIp(lan_ipaddr, netip, startip, endip) {
            i1=startip.indexOf('.');
            i2=startip.indexOf('.',(i1+1));
            i3=startip.indexOf('.',(i2+1));
            sip = hex(startip.substring(0,i1)) + hex(startip.substring((i1+1),i2)) +hex(startip.substring((i2+1),i3))+hex(startip.substring((i3+1),startip.length));
            sip = '0x'+sip;

            i1=endip.indexOf('.');
            i2=endip.indexOf('.',(i1+1));
            i3=endip.indexOf('.',(i2+1));
            eip = hex(endip.substring(0,i1)) + hex(endip.substring((i1+1),i2)) +hex(endip.substring((i2+1),i3))+hex(endip.substring((i3+1),endip.length));
            eip = '0x'+eip;

            i1=lan_ipaddr.indexOf('.');
            i2=lan_ipaddr.indexOf('.',(i1+1));
            i3=lan_ipaddr.indexOf('.',(i2+1));

            var compLanIp = '0x' + hex(lan_ipaddr.substring(0,i1)) + hex(lan_ipaddr.substring((i1+1),i2)) +hex(lan_ipaddr.substring((i2+1),i3))+hex(parseInt(lan_ipaddr.substring((i3+1),lan_ipaddr.length)) + 18);
            lan_ipaddr = hex(lan_ipaddr.substring(0,i1)) + hex(lan_ipaddr.substring((i1+1),i2)) +hex(lan_ipaddr.substring((i2+1),i3))+hex(lan_ipaddr.substring((i3+1),lan_ipaddr.length));
            lan_ipaddr = '0x'+lan_ipaddr;

            if(sip>eip) {
                //alert("Invalid start and end IP address, end IP should be larger than start IP.");
                return 1;
            }


            if(parseInt(compLanIp) >= parseInt(sip) && parseInt(lan_ipaddr) <= parseInt(eip)) {
                return 2;
            }

            return 0;
        }

        return {
            init:init
        }
    }
);
/**
 * login æ¨¡å
 * @module login
 * @class login
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore', 'config/menu', "logout"],
    function ($, ko, config, service, _, menu, logout) {

        var pageState = {LOGIN:0, WAIT_PIN:1, WAIT_PUK:2, PUK_LOCKED:3, LOGGEDIN:4, LOADING:5};
        var timer = startLoginStatusInterval();
        var loginLockTimer = 0;
        /**
         * è·åç½ç»ãSIMãWIFIç­ç¶æ
         * @method getStatusInfo
         */
        var getStatusInfo = function () {
            return service.getStatusInfo();
        };
        function startLoginStatusInterval() {
            return setInterval(function () {
                var info = getStatusInfo();
                if (!info.isLoggedIn) {
                    gotoLogin();
                    return;
                }
                lastLoginStatus = getStatusInfo().isLoggedIn ? "1" : "0";
            }, 1000);
        }

        /**
         * loginViewModel
         * @class loginVM
         */
        function loginVM() {
            var self = this;
            var type_2g = ["GSM", "GPRS", "EDGE"];
            var type_3g = ["UMTS", "WCDMA"];
            var type_h = ["HSUPA", "HSPA+","HSDPA"];
            var statusInfo= getStatusInfo();
            var data = service.getLoginData();
            var loginStatus = service.getLoginStatus();
            self.adImages = config.AD_IMAGES;
            self.password = ko.observable();
            self.PIN = ko.observable();
            self.PUK = ko.observable();
            self.newPIN = ko.observable();
            self.confirmPIN = ko.observable();
            self.pinNumber = ko.observable(data.pinnumber);
            self.pukNumber = ko.observable(data.puknumber);
            self.showEntrance = ko.observable(false);
            self.showSdCardTitle = ko.observable();
            self.loginCount = ko.observable(0);
            self.loginSecuritySupport = ko.observable(config.LOGIN_SECURITY_SUPPORT);
            if (checkConnectedStatus(statusInfo.connectStatus)) {
                self.speedTime = ko.observable(transUnit(parseInt(statusInfo.data_counter.currentReceived, 10) + parseInt(statusInfo.data_counter.currentSent, 10), false)+" / "+transSecond2Time(statusInfo.data_counter.currentConnectedTime));
                var networkTypeTmp = statusInfo.networkType.toLowerCase();
                if($.inArray(statusInfo.networkType.toUpperCase(),type_h)!= -1){
                    self.connect_Status = ko.observable($.i18n.prop("h_connected"));
                }else if($.inArray(statusInfo.networkType.toUpperCase(),type_3g)!= -1){
                    self.connect_Status = ko.observable($.i18n.prop("3g_connected"));
                }else if($.inArray(statusInfo.networkType.toUpperCase(),type_2g)!= -1){
                    self.connect_Status = ko.observable($.i18n.prop("2g_connected"));
                }else if (networkTypeTmp == ''||networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service'||networkTypeTmp == 'limited service' || networkTypeTmp == 'no service') {
                    if(networkTypeTmp==""||networkTypeTmp=="limited service"){
                        networkTypeTmp = "limited_service";
                    }else if(networkTypeTmp=="no service"){
                        networkTypeTmp = "no_service";
                    }
                    self.connect_Status = ko.observable($.i18n.prop("network_type_" + networkTypeTmp));
                }
            } else {
                self.speedTime=ko.observable("0MB / "+transSecond2Time(0));
                var simstatus = statusInfo.simStatus == "modem_sim_undetected" || statusInfo.simStatus == "modem_sim_destroy";
                var pinstatus = statusInfo.simStatus == "modem_waitpin";
                var pukstatus = statusInfo.simStatus == "modem_waitpuk";
                var netlockstatus = statusInfo.simStatus == "modem_imsi_waitnck";
                if(simstatus){
                    self.connect_Status = ko.observable($.i18n.prop("no_sim"));
                }else if(pinstatus){
                    self.connect_Status = ko.observable($.i18n.prop("pin_lock"));
                }else if(pukstatus){
                    self.connect_Status = ko.observable($.i18n.prop("puk_lock"));
                }else if(netlockstatus){
                    self.connect_Status = ko.observable($.i18n.prop("network_lock"));
                }else{
                    if(statusInfo.connectStatus == 'ppp_disconnected'){
                        self.connect_Status = ko.observable($.i18n.prop("disconnected"));
                    } else if(statusInfo.connectStatus == 'ppp_connecting'){
                        self.connect_Status = ko.observable($.i18n.prop("connecting"));
                    } else {
                        self.connect_Status = ko.observable($.i18n.prop("disconnecting"));
                    }
                }
            }
            var smsInfo = service.getSmsCapability();
            self.messageInfo = ko.observable(statusInfo.smsUnreadCount+" / "+(smsInfo.nvUsed+smsInfo.simUsed));
            self.imagePath = ko.observable("img/4.png");
            self.wifiStatusImg = ko.observable(getWifiStatusImg(statusInfo.wifiStatus,statusInfo.attachedDevices.length));
            self.wifiText = ko.observable($.i18n.prop("wifi_devices_connected"));
            self.batteryText = ko.observable("");
            self.accountLocked = ko.computed(function () {
                return self.loginCount() == config.MAX_LOGIN_COUNT;
            });
            self.leftSeconds = ko.observable(0);
            self.leftUnlockTime = ko.computed(function () {
                var formatted = transSecond2Time(self.leftSeconds());
                return formatted.substring(formatted.indexOf(':') + 1, formatted.length);
            });

            service.getSDConfiguration({}, function (data) {
                self.showEntrance(data.sd_status == "1" && data.share_status == "1" && data.sd_mode == "0");
                if(data.sd_status == "1" && data.sd_mode == "0"){
                    self.showSdCardTitle($.i18n.prop("browse_sdcare_title1"));
                }else{
                    self.showSdCardTitle($.i18n.prop("browse_sdcare_title2"));
                }
            });

            var state = computePageState(loginStatus, data);
            self.pageState = ko.observable(state);
            if (state == pageState.LOADING) {
                addTimeout(refreshPage, 500);
            }
            $("#txtPwd").focus();
            $("#txtPwd").live("keyup",function(){
                if($.trim($("#txtPwd").val()).length>0){
                    $("#txtRequire").addClass("hide");
                    $("#txtRequire").html("");
                }else{
                    $("#txtRequire").removeClass("hide");
                    $("#txtRequire").html("required");
                }
            });
            /**
             * login äºä»¶å¤ç
             * @event login
             */
            self.login = function () {
                self.password($("#txtPwd").val());
                if($.trim(self.password())==""){
                    /*showAlert("required", function () {
                        $("#txtPwd").focus();
                    });*/
                    $("#txtRequire").removeClass("hide");
                    $("#txtRequire").html("required");
                    $("#txtPwd").focus();
                    return;
                }
                if(config.LOGIN_SECURITY_SUPPORT && self.loginCount() == config.MAX_LOGIN_COUNT){
                    showAlert("password_error_account_lock_time", function () {
                        $("#txtPwd").focus();
                    });
                    return false;
                }
                self.pageState(pageState.LOADING);
                window.clearInterval(timer);

                service.login({
                    password:self.password()
                }, function (data) {
                    setTimeout(function () {
                        timer = startLoginStatusInterval();
                    }, 1300);
                    if (data.result) {
                        self.pageState(pageState.LOGGEDIN);
                        if(config.LOGIN_SECURITY_SUPPORT){
                            self.loginCount(0);
                            clearInterval(loginLockTimer);
                        }
                        if (config.UPGRADE_TYPE != "NONE") {
                            var state = service.getNewVersionState();
                            if (data.hasNewVersion) {
                                config.HAS_OTA_NEW_VERSION = true;
                            } else {
                                var upgradeState = {};
                                upgradeState = service.getCurrentUpgradeState();
                                if (upgradeState.current_upgrade_state == 'upgrade_pack_redownload') {
                                    config.HAS_OTA_NEW_VERSION = true;
                                }
                            }
                        }
                        window.location.hash = "#home";
                        menu.rebuild();
                        logout.init();
                    } else {
                        self.password("");
                        if(config.LOGIN_SECURITY_SUPPORT){
                            self.checkLoginData(function(){
                                if (self.loginCount() == config.MAX_LOGIN_COUNT) {
                                    showAlert("password_error_five_times", function () {
                                        $("#txtPwd").val("");
                                        $("#txtPwd").focus();
                                    });
                                    self.startLoginLockInterval();
                                } else {
                                    showAlert({msg: 'password_error_left', params: [config.MAX_LOGIN_COUNT - self.loginCount()]}, function () {
                                        $("#txtPwd").val("");
                                        $("#txtPwd").focus();
                                    });
                                }
                            });
                        }else {
                            showAlert("password_error", function () {
                                $("#txtPwd").val("");
                                $("#txtPwd").focus();
                            });
                        }
                        self.pageState(pageState.LOGIN);
                    }
                });
            };

            /**
             * å¯å¨åè®¡æ¶å®æ¶å¨ã
             * @method startLoginLockInterval
             */
            self.startLoginLockInterval = function () {
                loginLockTimer = setInterval(function () {
                    service.getLoginData({}, function (data) {
                        if (data.login_lock_time <= 0 || data.psw_fail_num_str == 5) {
                            self.loginCount(0);
                            clearInterval(loginLockTimer);
                        }
                        self.leftSeconds(data.login_lock_time);
                    });
                }, 1000);
            };

            self.checkLoginData = function(cb){
                service.getLoginData({}, function(r){
                    var failTimes = parseInt(r.psw_fail_num_str, 10);
                    self.loginCount(config.MAX_LOGIN_COUNT - failTimes);
                    self.leftSeconds(r.login_lock_time);
                    if($.isFunction(cb)){
                        cb();
                    } else if (self.loginCount() == config.MAX_LOGIN_COUNT) {
                        self.startLoginLockInterval();
                    }
                });
            };

            self.checkLoginData();


            /**
             * å·æ°é¡µé¢ç¶æ
             *
             * @method refreshPage
             */
            function refreshPage() {
                var data = service.getLoginData();
                var loginStatus = service.getLoginStatus();
                var state = computePageState(loginStatus, data);
                if (state == pageState.LOADING) {
                    addTimeout(refreshPage, 500);
                } else {
                    self.pageState(state);
                    if(state==0){
                        $("#container").css({'margin-top':'0px', 'margin-bottom':'0px'});
                    }
                    self.pinNumber(data.pinnumber);
                    self.pukNumber(data.puknumber);
                }
            }

            /**
             * æ ¹æ®ç»å½ç¶æåSIMå¡ç¶æè®¾ç½®é¡µé¢ç¶æ
             * @method computePageState
             */
            function computePageState(loginStatus, data) {
                if (loginStatus.status == "loggedIn") {
                    return pageState.LOGGEDIN;
                } else {
                    var state = data.modem_main_state;
                    if ($.inArray(state, config.TEMPORARY_MODEM_MAIN_STATE) != -1) {
                        return pageState.LOADING;
                    }else{
                        return pageState.LOGIN;
                    }
                }
            }
        }
        function refreshHomeData(vm){
            var info = getStatusInfo();
            if (checkConnectedStatus(info.connectStatus)) {
                vm.speedTime(transUnit(parseInt(info.data_counter.currentReceived, 10) + parseInt(info.data_counter.currentSent, 10), false)+" / "+transSecond2Time(info.data_counter.currentConnectedTime));
            } else {
                vm.speedTime("0MB / "+transSecond2Time(0));
            }
            setImagePath(vm,info);
            setConnectedStatus(vm,info);
            setWifiImage(vm,info);
        }
        /**
         * æ ¹æ®wifiç¶æè·åwifiçå¾çèµæº
         * @method getWifiStatusImg
         */
        function getWifiStatusImg(status, deviceSize) {
            if (status) {
                if (deviceSize == 0) {
                    return "img/wifi_0.png";
                } else {
                    return "img/wifi_" + deviceSize + ".png";
                }
            } else {
                return "img/wifi_0.png";
            }
        }
        /**
         * å°çµéè½¬åä¸ºå¯¹åºå¾ç
         * @method convertBatteryPers
         * @param vm
         * @param status
         */
        function convertBatteryPers(pers, status) {
            var txt = ""
            if ("0" == status) {
                txt = pers+"% Left";
            } else {
                if(parseInt(pers)<100){
                    txt = "Charging "+parseInt(pers)+"% complete";
                }else{
                    txt = "Charging complete";
                }
            }
            return txt;
        }
        //è®¾ç½®èç½ç¶æå¾ç
        function setImagePath(self,statusInfo){
            if(statusInfo.signalImg=="1"){
                self.imagePath("img/5.png");
            }else if(statusInfo.signalImg=="2"){
                self.imagePath("img/6.png");
            }else if(statusInfo.signalImg=="3"){
                self.imagePath("img/7.png");
            }else if(statusInfo.signalImg=="4"){
                self.imagePath("img/8.png");
            }else if(statusInfo.signalImg=="5"){
                self.imagePath("img/9.png");
            }else {
                self.imagePath("img/4.png");
            }

        }
        //è®¾ç½®èç½ç¶ææå­
        function setConnectedStatus(self,statusInfo){
            if(checkConnectedStatus(statusInfo.connectStatus)){
                var type_2g = ["GSM", "GPRS", "EDGE"];
                var type_3g = ["UMTS", "WCDMA"];
                var type_h = ["HSUPA", "HSPA", "HSPA+", "DC-HSPA+","HSDPA"];
                var networkTypeTmp = statusInfo.networkType.toLowerCase();
                if($.inArray(statusInfo.networkType.toUpperCase(),type_h)!= -1){
                    self.connect_Status($.i18n.prop("h_connected"));
                }else if($.inArray(statusInfo.networkType.toUpperCase(),type_3g)!= -1){
                    self.connect_Status($.i18n.prop("3g_connected"));
                }else if($.inArray(statusInfo.networkType.toUpperCase(),type_2g)!= -1){
                    self.connect_Status($.i18n.prop("2g_connected"));
                }else if (networkTypeTmp == ''||networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service'||networkTypeTmp == 'limited service' || networkTypeTmp == 'no service') {
                    if(networkTypeTmp==""||networkTypeTmp=="limited service"){
                        networkTypeTmp = "limited_service";
                    }else if(networkTypeTmp=="no service"){
                        networkTypeTmp = "no_service";
                    }
                    self.connect_Status($.i18n.prop("network_type_" + networkTypeTmp));
                }
            }else{
                var simstatus = statusInfo.simStatus == "modem_sim_undetected" || statusInfo.simStatus == "modem_sim_destroy";
                var pinstatus = statusInfo.simStatus == "modem_waitpin";
                var pukstatus = statusInfo.simStatus == "modem_waitpuk";
                var netlockstatus = statusInfo.simStatus == "modem_imsi_waitnck";
                if(simstatus){
                    self.connect_Status($.i18n.prop("no_sim"));
                }else if(pinstatus){
                    self.connect_Status($.i18n.prop("pin_lock"));
                }else if(pukstatus){
                    self.connect_Status($.i18n.prop("puk_lock"));
                }else if(netlockstatus){
                    self.connect_Status($.i18n.prop("network_lock"));
                }else{
                    self.connect_Status($.i18n.prop("disconnected"));
                }

            }
        }
        //è®¾ç½®ç­ä¿¡ä¿¡æ¯
        function setMessageInfo(self){
            var statusInfo = getStatusInfo();
            var smsInfo = service.getSmsCapability();
            self.messageInfo (statusInfo.smsUnreadCount+" / "+(smsInfo.nvUsed+smsInfo.simUsed));
        }
        //è®¾ç½®wifiå¾çåçµæ± çµé
        function setWifiImage(self,info){
            self.wifiStatusImg(getWifiStatusImg(info.wifiStatus, info.attachedDevices.length));
            self.batteryText(convertBatteryPers(info.batteryPercent, info.batteryStatus));
        }
        /**
         * ç»å½é¡µèæ¯é«åº¦èªéåº
         * @method resizeLoginPage
         */
        function resizeLoginPage(vm) {
            if (window.location.hash != '#login') {
                return false;
            }
            var mainContainer = $("#mainContainer");
            var windowH = $(window).height();
            var statusH = $("#topStatus").outerHeight(true);
            var footerH = $("#footer").outerHeight(true);
            var containerHeight = windowH - statusH - mainContainer.height() - footerH;
            if (containerHeight > 0) {
                var h = windowH - statusH - footerH - 5;
                mainContainer.height(h + 'px');
                var container = $("#container");
                var margin = (h - container.height()) / 2;
                container.css({'margin-bottom':margin + 'px'});
            }
        }

        /**
         * åå§åViewModel
         *
         * @method init
         */
        function init() {
            var info = service.getStatusInfo();
            if (info.isLoggedIn) {
                window.location.hash = '#home';
                return;
            }

            var container = $('#container')[0];
            ko.cleanNode(container);
            var vm = new loginVM();
            ko.applyBindings(vm, container);
            resizeLoginPage(vm);
            refreshHomeData(vm);
            addInterval(function() {
                refreshHomeData(vm);
            }, 1000);
            setInterval(function(){
                setMessageInfo(vm);
            },1500);
            var throttleTimeout;
            $(window).bind('resize', function () {
                if ($.browser.msie) {
                    if (!throttleTimeout) {
                        throttleTimeout = setTimeout(function () {
                            resizeLoginPage();
                            throttleTimeout = null;
                        }, 50);
                    }
                } else {
                    resizeLoginPage();
                }
            });
            $("#txtPwd").keyup(function(event){
				if(event.keyCode == 13){
					vm.login();
				}
			});
            $("#btnLogin").bind("click",function(){
                vm.login();
            });
        }

        function gotoLogin() {
            if (window.location.hash != config.defaultRoute && _.indexOf(config.GUEST_HASH, window.location.hash) == -1) {
                if (!manualLogout && lastLoginStatus == "1") {
                    manualLogout = false;
                    lastLoginStatus = 'UNREAL';
                    showAlert('need_login_again', function () {
                        window.location = "index.html";
                    });
                }
                else if (lastLoginStatus == 'UNREAL') {
                    //do nothing, only popup need_login_again alert one time
                    return;
                }
                else {
                    window.location = "index.html";
                }

            }
        }

        return {
            init:init,
            gotoLogin:gotoLogin
        };
    });/**
 * Logout æ¨¡å
 * @module Logout
 * @class Logout
 */

define(['knockout', 'service', 'jquery', 'config/config', 'underscore'],
    function (ko, service, $, config, _) {

        /**
         * logoutViewModel
         * @class logoutVM
         */
        function logoutVM() {
            var self = this;

            var isLoggedIn = getIsLoggedin();
            self.loggedIn = ko.observable(isLoggedIn);

            self.showLogout = function () {
                if (config.HAS_LOGIN == false) {
                    return false;
                } else {
                    return self.loggedIn()
                }
            };
            /**
             * éåºç³»ç»
             * @event logout
             */
            self.logout = function () {
                showConfirm("confirm_logout", function () {
                    manualLogout = true;
                    service.logout();
                });
            };
        }

        /**
         * è·åæ¯å¦ç»å½
         * @method getIsLoggedin
         */
        function getIsLoggedin() {
            var loginStatus = service.getLoginStatus();
            return (loginStatus.status == "loggedIn");
        }

        /**
         * åå§å ViewModelï¼å¹¶è¿è¡ç»å®
         * @method init
         */
        function init() {
            ko.applyBindings(new logoutVM(), $('#logout')[0]);
        }

        return {
            init:init
        };
    });
ï»¿window.zte_web_ui_is_test = false;
/**
 * è®¾å®å¬ç¨æ¨¡åå«å
 * @config require.config
 */
require.config({
    paths: {
        text: 'lib/require/text',
        tmpl: '../tmpl',
        underscore: 'lib/underscore/underscore',
        knockout: 'lib/knockout/knockout',
        jquery: 'lib/require/require-jquery',
        jq_validate: 'lib/jquery/jquery.validate',
        jq_additional: 'lib/jquery/additional-methods',
        jq_i18n: 'lib/jquery/jquery.i18n.properties-1.0.9',
        jq_translate: 'lib/jquery/translate',
        jq_tmpl: 'lib/jquery/jquery.tmpl.min',
        knockoutbase: 'lib/knockout/knockout-2.1.0',
        jq_simplemodal: 'lib/jquery/jquery.simplemodal-1.4.2',
        jq_slideshow: 'lib/jquery/jquery.slideshow.lite',
        base64: 'lib/base64'
    },

    shim: {
        jq_additional: ['jq_validate'],
        jq_translate: ['jq_i18n'],
        knockoutbase: ['jq_tmpl']

    }
});

//preload device config
require(['config/config'], function (config) {
    var devicePath = 'config/' + config.DEVICE;
    require([devicePath + '/menu', devicePath + '/config']);
});

/**
 * å è½½appæ¨¡ååä¾èµé¡ºåºçç¬¬ä¸æ¹js
 * @module main
 */
require([
    'app',
    zte_web_ui_is_test ? 'simulate' : '',
    'jq_additional',
    'jq_translate',
    'jq_simplemodal',
    'jq_slideshow',
    'util',
    'base64'
],
    function (app, simulate) {
        if (zte_web_ui_is_test) {
            window.simulate = simulate;
        }
        app.init();
    });define(['knockout',
    'underscore',
    'jquery'
    , 'service'
    , 'config/config'],
    function (ko, _, $, service, config) {
        var displayMenuWhenLogout = false;
        var menuVM;
        var menu = [];

        require(['config/' + config.DEVICE + '/menu'], function(otherMenu) {
            menu = otherMenu;
        });

        //Menu vm
        function MenuVM() {
            var self = this;

            var isLoggedIn = getIsLoggedin();
            self.loggedIn = ko.observable(isLoggedIn);

            self.showMenu = ko.observable(isLoggedIn || displayMenuWhenLogout);

            var mainMenu = _.filter(menu, function (item) {
                return (item.level == '1' && ((item.requireLogin && self.loggedIn()) || !item.requireLogin) && item.hash != "#login");
            });

            self.mainMenu = ko.observableArray(mainMenu);
            self.secondMenu = ko.observableArray([]);
            //self.thirdMenu = ko.observableArray([]);
            self.curThirdMenu;

            self.getThirdMenu = function (data) {
                self.curThirdMenu = getSubMenu(data);
            };

            self.thirdMenu = function () {
                return self.curThirdMenu;
            };

            self.changeMenu = function (data) {
                var secondMenu = getSubMenu(data);
                if (secondMenu.length == 0) {
                    $("#container").addClass("fixContainerWidth");
                }
                else {
                    $("#container").removeClass("fixContainerWidth");
                }

                self.secondMenu(secondMenu);
                return true;
            };

            function getSubMenu(data) {
                return _.filter(menu, function (item) {
                    return ((item.parent && item.parent == data.hash) && ((item.requireLogin && self.loggedIn()) || !item.requireLogin));
                });
            }
        }

        function refreshMenu() {
            var currentHash = window.location.hash;
            var rootItem = _.find(menu, function (item) {
                return item.hash == currentHash;
            });

            while (rootItem.parent) {
                rootItem = _.find(menu, function (item) {
                    return item.hash == rootItem.parent;
                });
            }
            if (!rootItem.parent) {
                $("#list-nav li").removeClass("active");
                var mid = rootItem.hash.substring(1, rootItem.hash.length);
                $("#list-nav li[mid=" + mid + "]").addClass("active");
            }

            menuVM.changeMenu(rootItem);
        }

        function activeSubMenu() {
            var currentHash = window.location.hash;
            var rootItem = _.find(menu, function (item) {
                return item.hash == currentHash;
            });
            if (rootItem.level == 1) {
                renderSubMenu("two", rootItem);
            }
            if (rootItem.level == 2) {
                renderSubMenu("three", rootItem);
                //forward/backward support
                triggerMenuClick(rootItem.hash, rootItem.level);

            }
            if (rootItem.level == 3) {
                //forward/backward support
                triggerMenuClick(rootItem.parent, rootItem.level);
                $(".menu-three-level").removeClass("active");
                $(".menu-three-level." + rootItem.hash.substring(1)).addClass("active");

            }
        }

        function renderSubMenu(level, baseItem) {
            var levelItem = _.find(menu, function (item) {
                return item.parent == baseItem.hash && item.path == baseItem.path;
            });
            $(".menu-" + level + "-level").removeClass("active");
            if (levelItem) {
                if (level == "two") {
                    renderSubMenu("three", levelItem);
                    //forward/backward support
                    triggerMenuClick(levelItem.hash, level);
                }
                $(".menu-" + level + "-level." + levelItem.hash.substring(1)).addClass("active");
            }
        }

        /**
         * not using live binding for performance consideration
         * @method triggerMenuClick
         * @param {String} hash
         */
        function triggerMenuClick(hash, level) {
            $obj = $(".menu-two-level." + hash.substring(1));
            var levelArr = ['3', 'three', '2', 'two'];
            if (_.indexOf(levelArr, level) != -1 && $obj.hasClass('active')) {
                return;
            }

            $obj.siblings().removeClass('active');
            $obj.addClass('active');

            $obj.siblings().not('.menu-two-level').slideUp();
            $obj.next().has('ul li').slideDown();
        }

        function init() {
            menuVM = new MenuVM();
            ko.applyBindings(menuVM, $('#nav')[0]);
            calcMainMenuWidth(menuVM.mainMenu().length);
            ko.applyBindings(menuVM, $('#left')[0]);
        }

        function findMenu(hashVal) {
            hashVal = hashVal || window.location.hash;
            var loggedIn = getIsLoggedin();
            return _.filter(menu, function (item) {
                return (hashVal == item.hash && ((item.requireLogin && loggedIn) || !item.requireLogin));
            });
        }

        function rebuild() {
            var loggedIn = getIsLoggedin();
            var mainMenu = _.filter(menu, function (item) {
                return (item.level == '1' && ((item.requireLogin && loggedIn) || !item.requireLogin) && item.hash != "#login");
            });
            menuVM.mainMenu(mainMenu);
            menuVM.loggedIn(loggedIn);

            calcMainMenuWidth(menuVM.mainMenu().length);
            menuVM.showMenu(loggedIn || displayMenuWhenLogout);
            $("#nav").translate();
        }

        function calcMainMenuWidth(mainMenuLength) {
            var mainMenuWidth = 960/mainMenuLength;
            $('ul#list-nav li').each(function() {
                $(this).css('width', mainMenuWidth+'px');
            });
        }

        function getIsLoggedin() {
            var loginStatus = service.getLoginStatus();
            return (loginStatus.status == "loggedIn");
        }

        /**
         * å¤æ­ç®å½ä¸­æ¯å¦éç½®äºç¸åºçæ¨¡åè·¯å¾
         * @method checkIsMenuExist
         * @param {String} path æä»¶è·¯å¾
         */
        function checkIsMenuExist(path) {
            for (var i = 0; i < menu.length; i++) {
                if (menu[i].path == path) {
                    return true;
                }
            }
            return false;
        }

        return {
            init:init,
            refreshMenu:refreshMenu,
            findMenu:findMenu,
            activeSubMenu:activeSubMenu,
            rebuild:rebuild,
            checkIsMenuExist:checkIsMenuExist
        };
    });
ï»¿define(function () {
    var needLogin = true;
    var menu = [
        {
            hash: '#httpshare_guest',
            path: 'sd/httpshare',
            level: '',
            requireLogin: false,
            checkSIMStatus: false
        },


        // level 1 menu
        {
            hash: '#login',
            path: 'login',
            level: '1',
            requireLogin: false,
            checkSIMStatus: false
        } ,
        {
            hash: '#home',
            path: 'home',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: true
        } ,
        {
            hash: '#setting',
            path: 'adm/quick_setting',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#sms',
            path: 'sms/smslist',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#phonebook',
            path: 'phonebook/phonebook',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#sd',
            path: 'sd/sd',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#status',
            path: 'status/device_info',
            level: '1',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        // level 2 menu

        {
            hash: '#quick_setting',
            path: 'adm/quick_setting',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#net_setting',
            path: 'network/dial_setting',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#wifi',
            path: 'wifi/wifi_basic',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#device_setting',
            path: 'adm/password',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#firewall',
            path: 'firewall/port_filter',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#router_setting',
            path: 'adm/lan',
            level: '2',
            parent: '#setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#group_all',
            path: 'phonebook/phonebook',
            level: '2',
            parent: '#phonebook',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        /*{
         hash:'#group_common',
         path:'phonebook/phonebook',
         level:'2',
         parent:'#phonebook',
         requireLogin:needLogin,
         checkSIMStatus:false
         },
         {
         hash:'#group_family',
         path:'phonebook/phonebook',
         level:'2',
         parent:'#phonebook',
         requireLogin:needLogin,
         checkSIMStatus:false
         },
         {
         hash:'#group_friend',
         path:'phonebook/phonebook',
         level:'2',
         parent:'#phonebook',
         requireLogin:needLogin,
         checkSIMStatus:false
         },
         {
         hash:'#group_colleague',
         path:'phonebook/phonebook',
         level:'2',
         parent:'#phonebook',
         requireLogin:needLogin,
         checkSIMStatus:false
         },*/
        {
            hash: '#device_info',
            path: 'status/device_info',
            level: '2',
            parent: '#status',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#traffic_statistics',
            path: 'status/traffic_statistics',
            level: '2',
            parent: '#status',
            requireLogin: false,
            checkSIMStatus: false
        },
        /*{
         hash:'#traffic_alert',
         path:'status/traffic_alert',
         level:'2',
         parent:'#status',
         requireLogin:needLogin,
         checkSIMStatus:false
         }, */
        /*{
         hash:'#USSD',
         path:'ussd/ussd',
         level:'2',
         parent:'#status',
         requireLogin:needLogin,
         checkSIMStatus:true
         },*/
        /*{
         hash:'#STK',
         path:'stk/stk',
         level:'2',
         parent:'#status',
         requireLogin:needLogin,
         checkSIMStatus:true
         },*/
        {
            hash: '#sdcard',
            path: 'sd/sd',
            level: '2',
            parent: '#sd',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#httpshare',
            path: 'sd/httpshare',
            level: '2',
            parent: '#sd',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#smslist',
            path: 'sms/smslist',
            level: '2',
            parent: '#sms',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#sim_messages',
            path: 'sms/sim_messages',
            level: '2',
            parent: '#sms',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#sms_setting',
            path: 'sms/sms_setting',
            level: '2',
            parent: '#sms',
            requireLogin: needLogin,
            checkSIMStatus: true
        },

        /*       {
         hash:'#ap_station',
         path:'wifi/ap_station',
         level:'2',
         parent:'#setting',
         requireLogin:needLogin,
         checkSIMStatus:false
         }
         // level 3 menu
         ,*/
        {
            hash: '#dial_setting',
            path: 'network/dial_setting',
            level: '3',
            parent: '#net_setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#net_select',
            path: 'network/net_select',
            level: '3',
            parent: '#net_setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#apn_setting',
            path: 'network/apn_setting',
            level: '3',
            parent: '#net_setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#wifi_basic',
            path: 'wifi/wifi_basic',
            level: '3',
            parent: '#wifi',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#wifi_advance',
            path: 'wifi/wifi_advance',
            level: '3',
            parent: '#wifi',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#wps',
            path: 'wifi/wps',
            level: '3',
            parent: '#wifi',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#password_management',
            path: 'adm/password',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#pin_management',
            path: 'adm/pin',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin,
            checkSIMStatus: true
        },
        {
            hash: '#restore',
            path: 'adm/restore',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#restart',
            path: 'adm/restart',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#sleep_mode',
            path: 'wifi/sleep_mode',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        /*       {
         hash:'#dlna_setting',
         path:'adm/dlna',
         level:'3',
         parent:'#device_setting',
         requireLogin:needLogin
         },
         {
         hash:'#fastboot',
         path:'adm/fastboot',
         level:'3',
         parent:'#device_setting',
         requireLogin:needLogin
         },*/
        {
            hash: '#port_filter',
            path: 'firewall/port_filter',
            level: '3',
            parent: '#firewall',
            requireLogin: needLogin,
            checkSIMStatus: false
        },

        {
            hash: '#port_forward',
            path: 'firewall/port_forward',
            level: '3',
            parent: '#firewall',
            requireLogin: needLogin
        },

        /*   {
         hash:'#port_map',
         path:'firewall/port_map',
         level:'3',
         parent:'#firewall',
         requireLogin:needLogin,
         checkSIMStatus:false
         },*/

        {
            hash: '#system_security',
            path: 'firewall/system_security',
            level: '3',
            parent: '#firewall',
            requireLogin: needLogin
        },

        {
            hash: '#upnp',
            path: 'firewall/upnp_setting',
            level: '3',
            parent: '#firewall',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#dmz',
            path: 'firewall/dmz_setting',
            level: '3',
            parent: '#firewall',
            requireLogin: needLogin,
            checkSIMStatus: false
        },
        {
            hash: '#update_management',
            path: 'update/update_info',
            level: '3',
            parent: '#device_setting',
            requireLogin: needLogin
        }

    ];

    return menu;
});
ï»¿#menu ä¸­æ
home = Connection
phonebook = Phonebook
sms = SMS
sd = SD Card
setting = Settings
status = Information
net_select = Network Selection
dial_setting = WAN Connection Mode
apn_setting = APN
wifi_advance = Advanced Settings
management = Management
net_setting = Network Settings
quick_setting = Quick Settings

device_info = Device Information
traffic_statistics = Record
traffic_alert = Data Limit Settings

wifi = Wi-Fi Settings
wifi_basic = Basic Settings
device_setting = Device Settings
sim = SIM Card
device = Device
router_setting = Router Settings

wps = WPS
sleep_mode = Power Save
lan = LAN

firewall = Firewall
system_security = System Security
port_forward = Port Forwarding
port_filter = Port Filtering
fastboot = Fast Boot
display_password = Display Password

#validate
phonenumbers_check = Input 5 phone numbers at most, and separate them by ';'
required = Required
remote = Please fix this field
url = Please input a valid URL
date = Please input a valid date
dateISO = Please input a valid date (ISO)
number = Please input a valid digit
digits = Please input integer only
creditcard = Please input a valid credit card number
equalTo = Please input the same value again
accept = Please input a value with a valid extension
maxlength = Please input no more than {0} characters
minlength = Please input at least {0} characters
rangelength = Please input a value between {0} and {1} characters in length
range = Please input a value between {0} and {1}
max = Please input a value less than or equal to {0}
min = Please input a value greater than or equal to {0}
ssid = Please input a valid SSID
email_check = Please input a valid email
ipv4 = Please input a valid IP address
ipv6 = Please enter a valid IPv6 address
name_check = Please input a valid name
phonenumber_check = Please input a valid phone number
pin_check = Please input 4 to 8 digits
puk_check = Please input 8 digits.
password_check = Please input a valid password
subnetmask_check = Invalid subnet mask
dhcp_check = DHCP {0} IP is not in the range of LAN subnet
start = start
end = end
dhcpCompare = Invalid IP address. Start IP shouldn't be greater than end IP
ipRange = IP pool can't contain LAN IP address (DHCP start IP should be greater than LAN IP address, i.e., 19 at least)
lanip_check = Please input a valid IP address
ip_check = Please input a valid IP address
dmz_ip_check = Please input a valid IP address
wps_pin_check = Invalid PIN number
browse_sdcard = View SD card
browse_sdcare_title1 = Web Share Mode
browse_sdcare_title2 = USB Mode
portCompare = Invalid port range
comment_check = Invalid character
check_file_path = The folder name contains invalid characters
apn_check = Please input a valid APN
ppp_username_check = Please input a valid username
ppp_password_check = Please input a valid password
unlock_code_check =  Please input a valid unlock code. The code must be 0-9, a-f or A-F, and its length must be 16 characters.
apn_profile_name_check = The APN profile name contains invalid characters
dlna_name_check = The Device Name must be 0-9, a-z, A-Z or _
wifi_password_check = Please input a valid password
wifi_wep_password_check = Please input 5 or 13 ASCII characters or input 10 or 26 Hex characters.
range_except = Input a value between {0} and {1}, except for that between 32000 and 32007

#common
copyright = Copyright &copy; 1998-2013 ZTE Corporation. All rights reserved
enable = Enable
disable = Disable
apply = Apply
cancel = Cancel
clear = Clear
reset = Reset
add = Add
add_new = Add New
save = Save
new = New
view = View
select = Select
edit = Edit
delete = Delete
delete_all = Delete All
success_info = Success
connect_success_info = You have successfully connected.
disconnect_success_info = You have successfully disconnected.
error_info = Failure
connect = Connect
disconnect = Disconnect
connected = Connected
disconnected = Disconnected
connecting = Connectingâ¦
disconnecting = Disconnectingâ¦
confirm = Confirm
prompt = Prompt
info = Information
alert = Alert
update_alert = Software Updates
yes = Yes
no = No
ok = OK
back = Back
exit = Exit
next_step = Next
prev_step = Previous
next_page = &gt;&gt;
prev_page = &lt;&lt;
root = Root
create = Create
speed = Speed
upload = Upload
download = Download
uploaded = Uploaded
downloaded = Downloaded
on = On
off = Off
need_login_again = You''re logged out of your account. Please login again.
modify = Change
content = Content
time = Time
processing = Processing...
saving = Saving...
deleting = Deleting...
scanning = Scanning...
sending = Sending...
creating = Creating...
uploading = Uploading...
waiting = Please wait.
leave_page_info = You have unsaved changes. Are you sure you want to continue?
colon = :
page = Page:
go = GO
#security
security_policy = Security Policy
security_mode = Security Mode
security_mode_OPEN = OPEN
security_mode_WPA2PSK = WPA2(AES)-PSK
security_mode_WPAPSKWPA2PSK = WPA-PSK/WPA2-PSK
wpa = WPA
pass_phrase = Pass Phrase

#station
station_info = Device Information
station_number = No.
host_name = Host Name

#Wifi Basic
wifi_switch = Wi-Fi Switch
multi_ssid_enable = Multi SSID Switch
multi_ssid_1 = SSID 1
multi_ssid_2 = SSID 2
multi_ssid_enable_confirm = If enable multi-SSID, Internet Wi-Fi will be disabled. Continue?
multi_ssid_max_access_number_alert = The combined max accesss number of SSID1 and SSID2 can''t be more than {0}!
network_band_selection = Band Selection 
network_mode=Network Mode
network_name=Network Name (SSID)
broadcast_network_name=Broadcast Network Name (SSID)
country_region_code = Country/Region Code
frequency_channel = Frequency (Channel)
rate = Rate
max_station_number = Max Station Number
wifi_basic_note = When clicking Apply, any connected Wi-Fi devices will need to reconnect.
multi_ssid_same = SSID1 and SSID2 can''t be the same value.
network_mode_2 = 802.11 n only
network_mode_4 = 802.11 b/g/n
network_mode_5 = 802.11 a only
frequency_channel_0 = Auto
frequency_channel_1 = (Channel 1)
frequency_channel_2 = (Channel 2)
frequency_channel_3 = (Channel 3)
frequency_channel_4 = (Channel 4)
frequency_channel_5 = (Channel 5)
frequency_channel_6 = (Channel 6)
frequency_channel_7 = (Channel 7)
frequency_channel_8 = (Channel 8)
frequency_channel_9 = (Channel 9)
frequency_channel_10 = (Channel 10)
frequency_channel_11 = (Channel 11)
frequency_channel_12 = (Channel 12)
frequency_channel_13 = (Channel 13)
frequency_channel_14 = (Channel 14)
frequency_channel_15 = (Channel 15)
frequency_channel_16 = (Channel 16)
frequency_channel_17 = (Channel 17)
frequency_channel_18 = (Channel 18)
frequency_channel_19 = (Channel 19)
frequency_channel_20 = (Channel 20)
frequency_channel_21 = (Channel 21)
frequency_channel_22 = (Channel 22)
frequency_channel_23 = (Channel 23)
frequency_channel_24 = (Channel 24)
frequency_channel_25 = (Channel 25)
frequency_channel_26 = (Channel 26)
frequency_channel_36 = (Channel 36)
frequency_channel_40 = (Channel 40)
frequency_channel_44 = (Channel 44)
frequency_channel_48 = (Channel 48)
frequency_channel_149 = (Channel 149)
frequency_channel_153 = (Channel 153)
frequency_channel_157 = (Channel 157)
frequency_channel_161 = (Channel 161)
frequency_channel_165 = (Channel 165)
rate_0 = Auto
rate_1 = 1 Mbps
rate_2 = 2 Mbps
rate_3 = 5.5 Mbps
rate_4 = 6 Mbps
rate_5 = 6.5 Mbps
rate_6 = 9 Mbps
rate_7 = 11 Mbps
rate_8 = 12 Mbps
rate_9 = 13 Mbps
rate_10 = 18 Mbps
rate_11 = 19.5 Mbps
rate_12 = 24 Mbps
rate_13 = 26 Mbps
rate_14 = 36 Mbps
rate_15 = 39 Mbps
rate_16 = 48 Mbps
rate_17 = 52 Mbps
rate_18 = 54 Mbps
rate_19 = 58.5 Mbps
rate_20 = 65 Mbps
cannot_operate_when_wifi_connected = You can''t enable multi SSID when Wi-Fi is connected!
network_mode_select_2 = 802.11 n only
network_mode_select_4 = 802.11 b/g/n
network_mode_select_0 = 802.11 b only
network_mode_select_1 = 802.11 g only
network_mode_select_3 = 802.11 b/g
network_modes_band_select_2 = 802.11 n only
network_modes_band_select_4 = 802.11 a/n
network_modes_band_select_5 = 802.11 a only
network_modes_band_select_0 = 802.11 b only
network_modes_band_select_1 = 802.11 g only
network_modes_band_select_3 = 802.11 b/g

#net select
auto_select = Automatic
manual_select = Manual
auto_select_type_WCDMA_preferred = Automatic
auto_select_type_LTE_preferred = Automatic
auto_select_type_NETWORK_auto = Automatic
auto_select_type_Only_LTE = 4G Only
auto_select_type_Only_WCDMA = 3G Only
auto_select_type_Only_GSM = 2G Only
search = Search
searching_net = Searching, please wait...
registering_net = Registering, please wait...
network_list = Network List
register = Register
auto = Auto
unknown = Unknown
available = Available
current = Current
forbidden = Forbidden
net_select_note_automatic = Automatic: The device will search available network automatically.
net_select_note_manual = Manual: The device will search available network manually.
net_status = Status
mccmnc = MCCMNC
option = Option
networktype = Network Type
register_forbidden_network_info = Your sim card does not allow connection to this network.
#home
current_flux = Current Data
total_flux = Total Used Data
connected_time = Connected Time
flux_up = Upload
flux_down = Download
traffic_current_connection = Current
traffic_current_month_data = Total
traffic_total_traffic = Total Traffic
traffic_used_data_month = Data usage of this month:
traffic_used_time_month = The online time of this month:
traffic_data_approximated = Data usage is approximate only. For actual usage, please refer to your network operator.
traffic_used_month = Used:
traffic_left_month = Left:
traffic_exceeded_month = Exceeded:
traffic_total_month = Limit:
traffic_apply_volume_limit = Data Use Limit
traffic_data_limit_type = Limit by
traffic_data = Data
traffic_time = Time
traffic_limit_data_month = Monthly
traffic_alert_when_data_reach = Remind me
traffic_limit_time_month = Monthly
traffic_alert_when_time_reach = Remind me
traffic_million_byte = MB
traffic_percent = %
traffic_limit_disconnect_msg = Your data/time used reaches {0} percent. Do you want to disconnect from network?
traffic_limit_connect_msg = Your data/time used reaches {0} percent. Do you still want to connect to network?
traffic_beyond_disconnect_msg = Your data/time used exceeds limit. Do you want to disconnect from network?
traffic_beyond_connect_msg = Your data/time used exceeds limit. Do you still want to connect to network?
traffic_note = Set a reminder when you reach your target data usage limit.
traffic_record_note = *Note: The displayed data is an estimate of your actual usage, and should be used as a guide only.
device_connection_status = Device & connection status:
clear = Clear
4g_connected = 4G Connected
h_connected = H Connected
3g_connected = 3G Connected
2g_connected = 2G Connected
block = Block
#APN
apn_currentApn = Current APN
apn_mode = Mode
apn_auto_apn = Auto
apn_manual_apn = Manual
apn_profile = Profile
apn_profile_name = Profile Name
apn = APN
apn_ipv4_apn = IPv4 APN
apn_ipv6_apn = IPv6 APN
apn_dns_mode = DNS Mode
apn_dns_mode_ipv4 = IPv4 DNS Mode
apn_dns_mode_ipv6 = IPv6 DNS Mode
apn_auto_dns = Auto
apn_manual_dns = Manual
apn_dns1 = DNS 1
apn_dns2 = DNS 2
apn_dns1_ipv4 = IPv4 DNS 1
apn_dns2_ipv4 = IPv4 DNS 2
apn_dns1_ipv6 = IPv6 DNS 1
apn_dns2_ipv6 = IPv6 DNS 2
apn_authentication = Authentication
apn_authentication_ipv4 = IPv4 Authentication
apn_authentication_ipv6 = IPv6 Authentication
apn_user_name = User Name
apn_user_name_ipv4 = IPv4 User Name
apn_user_name_ipv6 = IPv6 User Name
apn_password = Password
apn_password_ipv4 = IPv4 Password
apn_password_ipv6 = IPv6 Password
apn_pdp_type = PDP Type
set_default = Set as default
apn_save_profile_exist = Profile Name already exists, please select another name.
apn_delete_cant_delete_default = You can''t delete the default profile!
apn_delete_confirm = Are you sure you want to delete?
apn_cant_modify_status = Can''t change the current APN setting when the network is {0}!
apn_cant_modify_current = You can''t change the APN that is in use!
apn_cant_delete_current = You can''t delete the current profile!
apn_profile_full = You can only add {0} items at most!

#Status bar
network_status = Network Status
connection_status = Connection status
battery = Battery
charging = Charging
sim_status = SIM Status
sim_status_modem_waitpin = Invalid SIM card
sim_status_modem_waitpuk = Invalid SIM card
sim_status_modem_sim_undetected = Invalid SIM card
sim_status_modem_undetected = Invalid SIM card
sim_status_modem_imsi_waitnck = SIM Locked
sim_status_modem_sim_destroy = Invalid SIM card
sim_status_modem_destroy = Invalid SIM card
sim_status_modem_init_complete = Valid SIM card
sim_status_modem_ready = SIM is ready
wifi_status = Wi-Fi Status
wifi_status_on = Wi-Fi on
wifi_status_off = Wi-Fi off
wifi_status1 = Number of users:1
wifi_status2 = Number of users:2
wifi_status3 = Number of users:3
wifi_status4 = Number of users:4
wifi_status5 = Number of users:5
wifi_status6 = Number of users:6
wifi_status7 = Number of users:7
wifi_status8 = Number of users:8
wifi_status9 = Number of users:9
wifi_status10 = Number of users:10
enable_pin = Enable PIN
remaining_time = Remaining Time
signal = Signal
network_type = Network type
network_type_limited_service = Limited Service
network_type_no_service = No Service
spn_title = Service Provider
network_provider = Network
roaming_status = Roaming status
sim_status_ready = SIM is ready
sim_status_waitpin = Ready to input PIN
sim_status_waitpuk = Ready to input PUK
sim_status_undetected = No SIM card detected
sim_status_waitnck = Ready to input NCK
sim_status_destroy = SIM is corrupted
signal_strength = Signal strength
signal_strength_label = Signal Strength
battery_level = Battery level

#dial_setting
dial_note = WAN Connection Status
dial_mode = WAN Connection Mode
dial_roam_info = The Roaming Setting is disabled. To enable it, please go to setting page and click in the checkbox.
dial_setting_note_automatic = Automatic: The device will automatically connect to network when it is powered on.
dial_setting_note_manual = Manual: The device will connect to network manually.
dial_roaming_remind = Check here to connect to the internet while roaming.
dial_romaing_info = Note:Telstra customers travelling outside Australia may incur additional data charges whilst roaming.

#phonebook
search = Search
save_location = Save Location
save_location_0 = SIM Card
save_location_1 = Device
group_all = Phonebook
group_null = -
group_common = Common
group_family = Family
group_friend =  Friend
group_colleague = Colleague
name = Name
mobile_phone_number = Mobile Number
home_phone_number = Home Number
office_phone_number = Office Number
mail = Email
group = Group
no_data_selected = Please select an item!
confirm_data_delete = Are you sure you want to delete?
phonbook_confirm_data_delete= Are you sure you want to delete?
too_many_data_selected = Too many numbers are selected! Please select one number!
delete_fail_try_again = Delete failed, please try again.
max_send_number = You can enter 5 phone numbers at most!
send = Send
send_sms = Send Message
new_message = New SMS
send_numbers = Number
contents = Contents
device_full =  Phonebook space on your device is full!
sim_full = SIM card is full!
phonebook_init_fail = The phone book failed to initialize!<br/>Please check SIM card and restart the device.
sim_removed = SIM card was removed!
change_device_to_sim_confirm = Information may be lost, and whether there is a need to continue to deposit?

#SMS
smslist = Device SMS
sms_setting = SMS Settings
sim_messages = USIM SMS
refresh = Refresh
forward = Forward
draft = Draft
send_fail_try_again = Send failed.
sms_content_required = Please type a SMS.
sms_contact_required = Please add a contact.
select_some_options = Enter up to 5 contact names
select_an_option = Select an Option
chat_input_placehoder = Please type message here
sms_chat_input_confirm = Please press Enter or enter ";" to complete
sms_capacity_will_full = SMS capacity will be full, please delete some SMS
sms_capacity_is_full = SMS capacity is full, please delete some SMS
sms_capacity_is_full_for_send = SMS capacity is full, please delete some SMS to receive or send message.
sms_capacity_will_full_just = SMS capacity will be full, you could send {0} SMS(s)
sms_init_fail = SMS failed to initialize!<br/>Please check SIM card and restart the device.
sms_resending = Resending SMS...
sms_resend_fail = SMS resend failure.
sms_stop_sending = Stop Sending
sms_unread_count = Unread SMS
sms_delivery_report_1 = SMS is delivered.
sms_delivery_report_2 = SMS is undelivered.
sms_delivery_report_3 = Sending SMS...
sms_report = Delivery Report
sms_cancel_sending = Cancelling...
sms_save_draft_success = SMS is saved as a draft
sms_save_draft_failed = Draft save failed
sms_to_save_draft = SMS was modified, save it as a draft?
sms_no_recipient = Your SMS doesn''t have any recipients, and this SMS will be discarded.
phone_number_invalid = Phone number invalid
messages = Messages
no_message = No message

#login
network_lock = Network lock
no_sim = No USIM
puk_lock = PUK lock
pin_lock = PIN lock
password = Admin Login:
puk = PUK
login = OK
logout = Logout
new_pin = New PIN
confirm_pin = Confirm New PIN
puk_locked = Your SIM card is locked permanently. Please contact your operator.
password_error = Password is incorrect!
password_error_left = Password is incorrect!<br/>You have {0} attempt left.
password_error_account_lock = Your account is locked. <br/>Remaining time:
password_error_five_times = You''ve input 5 times incorrectly. Retry in 5 minutes.
password_error_account_lock_time = Your account is locked. <br/>Please try later.
enter_pin = SIM card is locked, please input PIN to unlock.
enter_puk = SIM card is PIN-locked, please input PUK to unlock.
last_enter_pin = Final attempt. If incorrect again, your SIM card will be locked!
last_enter_puk = Final attempt. If incorrect again, your SIM card will be corrupted!
attempts_left = Attempts Left:
pin_error = PIN is incorrect!
puk_error = PUK is incorrect!
confirm_logout = Do you want to logout?

#advanced password
password_management = Account Management
current_password = Current Password
new_password = New Password
confirm_password = Confirm New Password
current_password_error = Current password is incorrect!
password_note_info = You can change login password on this page.
password_note_valid = The password can''t be empty and must contain at most 32 characters.
password_note_input = The password contains 0-9 a-z A-Z ! # $ * + , - . % : = ? @ [ ] ^ _ { | } ~

#advanced pin
pin = PIN
current_pin = Current PIN
pin_management = USIM PIN Management
pin_status = USIM PIN Status
modify_pin = Change PIN
cannot_operate_when_connected = Can''t operate when connecting to network!
cannot_change_pin_when_connected = Can''t change PIN when connecting to network!
pin_note_info = You can change USIM PIN status and PIN code on this page.
pin_note_times = SIM card will be locked if you''ve continuously typed incorrect PIN 3 times. And you have to type PUK to unlock.
pin_note_operator = PIN code and PUK code may be offered together with a SIM card. If not, contact your operator. Please change default PIN code as soon as possible.

#lan
lan_setting = LAN Interface Setup
ip_address = IP Address
subnet_mask = Subnet Mask
mac_address = MAC Address
dhcp_server = DHCP Server
dhcp_ip_pool = DHCP IP Pool
dhcp_lease = DHCP Lease Time
hours = hour(s)
lan_note = Your settings will take effect after restarting your device.
lan_note_info = uFi is set as a Dynamic Host Configuration Protocol (DHCP) server by default, providing IP address from DHCP IP Pool for all PC connections to LAN.
lan_note_ip_address = IP Address: IP address for LAN interface.
lan_note_subnet_mask = Subnet Mask: Subnet mask for IP address.
lan_note_dhcp_server = DHCP Server: Enable or disable DHCP Server.
lan_note_dhcp_ip_pool = DHCP IP Pool: Allocate start and end IP address for IP pool.
lan_note_dhcp_lease_time = DHCP Lease Time: Define validity of the leased IP address; and new IP address will be relocated .

#sms_setting
sms_validity = Validity
sms_validity_twelve_hours = 12 Hours
sms_validity_one_day = 1 Day
sms_validity_one_week = 1 Week
sms_validity_largest = Maximum
center_number = Centre Number
delivery_report = Delivery Report

#restore
restore = Reset
restore_title = Reset Factory Settings
restore_button = Reset Factory Settings
restore_confirm = The parameters will be reset to factory defaults! The device will be restarted!
restore_when_connected = Please disconnect from WAN first!
restoring = Resetting factory settings
restore_note_info = Click Reset to reset all settings to defaults, and the device will restart automatically.

#wps
wps_note_all = You can enable Wi-Fi Protected Setup(WPS) by PIN(PIN code) or PBC(push-button) mode on this page. If your client device supports WPS, there''s no need to enter password manually when WPS is available.
wps_note_pin = PIN: Enter PIN that is generated by wireless access client.
wps_note_pbc = PBC: Select PBC or press PBC button on the device.
wps_note_wait = The device will wait for receiving the access request of wireless access client within 2 minutes.
wps_pin = PIN
wps_pbc = PBC
wps_wifi_off = You can''t operate when Wi-Fi is off!
wps_auth_open = Current encryption type isn''t NONE, can''t enable WPS.
wps_on_info = WPS is enabled now, can''t operate!
wps_ssid_broadcast_disable = You can''t operate when SSID broadcast is disabled!
wps_auth_open_mode = Current encryption type is OPEN, can''t enable WPS.

#sleep mode
wifi_sleep = Wi-Fi Sleep Settings
sleep_time = Sleep Time
sleep_mode_-1 = Never Sleep
sleep_mode_5 = 5 Minutes
sleep_mode_10 = 10 Minutes
sleep_mode_20 = 20 Minutes
sleep_mode_30 = 30 Minutes
sleep_mode_60 = 1 Hour
sleep_mode_120 = 2 Hours
wifi_sleep_note_info = Sleep Time: When there''s no Wi-Fi connection in specific time, Wi-Fi will be unavailable, and the system will turn to sleep mode for power-saving.

#system security
remote_management = Remote Management (via WAN)
ping_from_wan = Ping From WAN Filter

#portforward
protocol_TCP&UDP = TCP+UDP
protocol_TCP = TCP
protocol_UDP = UDP
virtual_server_setting = Virtual Server Settings
port_forward_setting = Port Forwarding Settings
port_forward_list = Current Virtual Servers in system
port_range = Port Range
protocol = Protocol
comment = Comment
ipExam = (e.g., 192.168.0.101)
rules_max = The rule number exceeds {0}.
rule_exist = This rule already exists.
rule_max_note = The maximum number of rules is 10.
rule_max_note_v4v6 = The maximum of rules for IPv4 and IPv6 is 10 respectively.

rules_max_v4v6 =  The {0} rule number exceeds {1}.
rule_exist_v4v6 = This {0} rule already exists.

#quick setting
step_number_1 = 1
step_number_2 = 2
step_number_3 = 3
step_number_4 = 4
step_number_5 = 5
step_number_6 = 6
step_name_1 = 1.Quick Setup
step_name_2 = 2.PPP Profile Configuration
step_name_3 = 3.PPP Authentication
step_name_4 = 4.SSID Configuration
step_name_5 = 5.Security Configuration
step_name_6 = 6.Configuration as Follows
step1_exp1 = The wizard will show you how to set up gateway safely: Click "Next" to continue, click "Previous" & "Next" to navigate, and click "Apply" to save settings.
step1_exp2 = Set basic parameters in this wizard. For advanced parameters, set them in other menu.
apn_settings = APN Settings
step2_auto_apn_explain = If you select Auto APN, the third step, i.e., PPP Authentication, will be skipped.
step2_profile_name_explain = Profile Name: The default profile that you use currently.
ppp_authentication = PPP Authentication
step3_authentication_apn_explain1 = Authentication: It is provided by your Internet Service Provider (ISP). Password Authentication Protocol (PAP) provides a simple method without encryption for the peer to establish its identity using a 2-way handshake. Challenge-Handshake Authentication Protocol (CHAP) is used to periodically verify the identity of the peer using a 3-way handshake.
step3_authentication_apn_explain2 = User Name: It is used to obtain authentication from the ISP when connection is established.
step3_authentication_apn_explain3 = Password: It is used to obtain authentication from the ISP when connection is established.
step3_username_password_explain = Click "Set as default" to set this profile as the default profile.
ssid_title = SSID
ssid_name = Network Name(SSID)
ssid_broadcast = Broadcast Network Name (SSID)
step4_ssid_explain = Network Name: Service Set Identifier (SSID). Enter name of your wireless local area network (WLAN), which is less than 32 characters.
step4_ssid_broadcast_explain1 = SSID Broadcast: Disable or Enable (Default) this function. Once enabled, the router will broadcast SSID, and other devices can discover and connect to it.
step4_ssid_broadcast_explain2 = Disable: The gateway disables broadcasting and hides the name of your network.
step5_encryption_mode_info = Security Mode:
step5_encryption_mode_explain1 = OPEN: Authentication and encryption won''t be performed. There are risks that private information may be intercepted, or network may be used by unauthorized individuals. This encryption scheme isn''t recommended.
step5_encryption_mode_explain2 = WPA2(AES)-PSK: It is the secure version of WPA with implementation of the 802.11i standard.
step5_encryption_mode_explain3 = WPA-PSK/WPA2-PSK: WPA Pre-Shared Key (WPA-PSK). WPA2-PSK is the secure version of WPA with implementation of the 802.11i standard.
step5_encryption_mode_explain4 = Pass Phrase: The pass-phrase contains 0-9 a-z A-Z ! # ( ) + - . / % = ? @ ^ _  { | } ~
step6_apply_explain = You need to reconnect wireless network when committing.
quick_setting_wifi_off_confirm = Wi-Fi is off, the settings for Wi-Fi won''t take effect. Continue?

#SD Card
sdcard = SD Card
httpshare = Web Share
sd_card_mode = Mode
sd_card_share_setting = Share Setting
sd_card_share_usb_mode = USB
sd_card_share_http_share_mode = Web Share
sd_card_status = Status
sd_card_file_to_share = File to Share
sd_card_access_type = Access Type
sd_card_path_to_share = Path to Share
sd_card_entire_sd_card = Entire SD Card
sd_card_custom_setting = Custom 
sd_card_read_write = Read/Write
sd_card_readonly = Read Only
sd_card_share_setting_no_sdcard = No SD Card!
sd_card_share_setting_exist = The folder/file already exists!
sd_card_share_setting_noexist = The folder/file does not exist!
sd_card_status_info_0 = No SD Card!
sd_card_status_info_1 = SD Card already exists and can be used now
sd_card_status_info_2 = SD Card already exists, but it is invalid now! Please retry in 5 minutes. If still invalid, please check SD Card!
sd_card_invalid_chars_cant_download = The file name contains invalid characters and can not be downloaded! (< > " '' & + / \\ : * | # ? ~ ` are invalid characters)
note_not_support_fs_ntfs = In Web Share Mode, the device will only supports FAT file system!
note_web_share_mode = Web Share Mode: Share the SD card with all connected users via the Web browser.USB Access to the SD card will be  disabled in this mode.
note_usb_access = USB Mode:Only user connected via USB can access the SD card by the removable drive mapping.Shared access via the web browser will be disabled in this mode.
note_http_share_usb_access = USB Mode:Only user connected via USB can access the SD card by the removable drive mapping.Shared access via the web browser will be disabled in this mode.
note_http_share_cannot_access = You can''t access this page!
note_path_to_share_example = Path to Share: You can input the sharing path, such as /Picture. By typing only a slash in Path to Share filed, you agree to share entire SD card.
note_upload_not_refresh = When you''re in process of downloading or uploading the file, please don''t refresh the page!
note_upload_single_file_2g = The single file upload can not be above 2G.
note_uploading_not_refresh = Uploading, please don''t refresh the page!
note_invalid_file_path = Path to Share can''t be a dot, and can''t contain following characters: < > " '' & + / \\ : * | # ? ~ `
browse_btn = Browse
change_btn = Change
no_file_selected = No file selected...
sd_no_file_selected = Please select a file
sd_name = Name
sd_path = Path:
sd_rename = Rename
sd_download = Download
sd_file_size = File Size
sd_update_time = Updated Time
no_sdcard = No SD Card!
sd_card_folder_name_is_null = Please enter a name
get_file_list_failure = Get file list failed
create_folder_failure = Create folder failed
delete_folder_failure = Delete folder/file failed
sd_card_path_too_long = File path too long
back_to_login = Back to Login
sd_config_changed_reload = The settings for SD card share are changed, and the page will reload.
sd_upload_space_not_enough = The space is not enough!
sd_upload_data_lost = Upload failed, please retry.
sd_share_path_is_invalid = Path to Share is invalid, please set the share path
sd_share_path_cant_rename = The folder was shared and cannot be renamed.
sd_share_path_cant_delete = The folder "{0}" was shared and cannot be deleted.
sd_share_path_invalid = The shared path does not exist.

#port filter
filter_basic_setting = Basic Settings
port_filter_enabled = MAC/IP/Port Filtering
default_policy = Default Policy
default_policy_note = You can set firewall policies to protect your network from viruses, worms and malicious activities on the Internet.
default_policy_note_filter = Only when filtering is enabled, the filter policy is available.
accepted = Accepted
dropped = Dropped
port_filter_setting = MAC/IP/Port Filtering Settings
mac_address = MAC Address
macExam = (e.g., 00:1E:90:FF:FF:FF)
dest_ip_address = Dest. IP Address
source_ip_address = Source IP Address
port_filter_action = Action
filter_accept = Accept
filter_drop = Drop
protocol_None = NONE
protocol_ICMP = ICMP
port_filter_list = Current MAC/IP/Port filtering rules in system
dest_port_range = Dest. Port Range
source_port_range = Source Port Range
filter_accept_note = Others would be accepted.
filter_drop_note = Others would be dropped.
filter_optional = Please input any IP, MAC or/and port value
mac_check = Invalid MAC address
filter_ip_setting = IP Settings
filter_ipv4 = IPv4
filter_ipv6 = IPv6
ip_type = IP Type
source_ipv6_address = Source IPv6 Address
dest_ipv6_address = Dest. IPv6 Address
port_filter_note_mac_address = MAC Address: Set MAC address to be filtered.
port_filter_note_source_ip_address = Source IP Address: Set source IP address to be filtered.
port_filter_note_dest_ip_address = Dest IP Address: Set dest IP address to be filtered.
port_filter_note_protocol = Protocol: Set protocol to be used for filtering.
port_filter_note_source_port_range = Source Port Range: Set source port numbers to be filtered.
port_filter_note_dest_port_range = Dest Port Range: Set dest port numbers to be filtered.
port_filter_note_action = Action: Set to handle the packet if it matches with the rule.
port_filter_note_comment = Comment: Enter comment for filter settings. It contains 0-9 a-z A-Z ! # ( ) + - . / % = ? @ ^ _ { | } ~ .
port_filter_note_info = The filter policies are matched one by one with the rules. And if met this provision, it won''t continue to match the rules listed below.

#wifi_range
wifi_range_settings = Wi-Fi Performance Settings
wifi_range = Wi-Fi Performance
wifi_short_mode = Short Wi-Fi Range
wifi_medium_mode = Medium Wi-Fi Range
wifi_long_mode = Long Wi-Fi Range
wifi_range_note_info = Battery life varies with Wi-Fi range and sleep time.
wifi_range_note_range = Wi-Fi Range:
wifi_range_note_short = Short Wi-Fi Range: Increases battery life.
wifi_range_note_medium = Medium Wi-Fi Range: Intermediate battery life and Wi-Fi range.
wifi_range_note_long = Long Wi-Fi Range: Extend coverage of mobile hotspot and still connect to your Wi-Fi network, which will decrease battery life.
wifi_devices_connected = Wi-Fi devices connected
#upnp
upnp = UPnP
upnp_setting = UPnP Settings
upnp_note_info = Universal Plug and Play (UPnP) is a set of networking protocols that allows networked devices, such as PC, printers, Internet gateways, Wi-Fi access points and mobile devices, to seamlessly discover each other''s presence on the network and establish functional network services for data sharing, communications, and entertainment.
upnp_note_info_mf65 = If you change the settings, the device will restartã
upnp_info = Device must restart to apply the new settings.
#dmz
dmz = DMZ
dmz_setting = DMZ Settings
dmz_note_info = If a terminal device can''t run network applications via this uFi, please enter IP address of the terminal device in the entry box when DMZ is enabled.
dmz_note_function = You can configure DMZ address, enable or disable DMZ on this page.

#Device Information
max_access_num = Max Access Number
lan_domain = LAN Domain
sim_serial_number = SIM Card Number
software_version = Software Version
firmware_version = Firmware Version
hardware_version = Hardware Version
imei = IMEI
imsi = IMSI
wan_ip_address = WAN IP Address
ipv6_wan_ip_address = WAN IPv6 Address
network_name_ssid1 = Network Name (SSID1)
pass_phrase_ssid1 = Pass Phrase (SSID1)
max_access_num_ssid1 = Max Access Number (SSID1)
network_name_ssid2 = Network Name (SSID2)
pass_phrase_ssid2 = Pass Phrase (SSID2)
max_access_num_ssid2 = Max Access Number (SSID2)

#port map
port_map = Port Mapping
port_map_basic = Basic Settings
port_map_setting = Port Mapping Settings
source_port = Src. Port
dest_port = Dest. Port
port_map_list = Current Port Mapping Rules in System
port_map_note_info = Configure a Port Mapping to enable external computers to access WWW, FTP or other services provided by LAN.
port_map_note_port = Src. Port/Dest Port: The port of the computer that provides services.
port_map_note_dest_ip_address = Dest. IP Address: Specify a computer located at LAN to provide services.
port_map_note_protocol = Protocol: Protocols applied by services.
port_map_note_comment = Comment: Type comment for Port Mapping rule. It contains 0-9 a-z A-Z ! # ( ) + - . / % = ? @ ^ _ { | } ~ .


#USSD Info
USSD = USSD
ussd_send_to = Send to
ussd_send = Send
ussd_cancel = Cancel
ussd_reply_to = Reply to
ussd_reply = Reply
ussd_contents = Contents
ussd_timeout = Network Timeout!
ussd_operation_timeout = Operation Timeout!
ussd_no_service = No Network Service!
ussd_retry = Operation Failed! Please Retry!
ussd_unsupport = USSD is unsupported!
ussd_info_error = Get Information Error!
ussd_fail = Operation Failed!
ussd_error_input = Error Input!

#dlna setting
dlna_setting = DLNA Settings
dlna_language = Language
dlna_language_chinese = Chinese
dlna_language_english = English
dlna_device_name = Device Name
dlna_media_type = Shared Media Type
dlna_media_info = Share Settings
dlna_audio = Music
dlna_image = Image
dlna_video = Video
dlna_rescan = Rescan
dlna_note_info = You can set Digital Living Network Alliance(DLNA) when SD card is available or HTTP Share Mode is enabled.
dlna_note_httpshare = You can set Digital Media Server (DMS) language, device name, and media type which you want to share on this page.
dlna_note_rescan = In order to allow DLNA multimedia database to be synchronized with SD card, please rescan.

#nosimcard
no_sim_card_title = System Information
no_sim_card_message = No SIM Card or SIM Card invalid!

#network_locked
network_locked = The network is locked!
network_locked_explain = This device is network locked. Please contact your service provider to get unlock code.
network_locked_times_explain =  Attempts left for unlock code input:
network_locked_enter_explain = Please input unlock code.
network_locked_zero_times = This device is network locked. Please contact your service provider.

#update_info
update_info = Software Updates
update_no_info = Your device is up to date.
update_new_version_found = New version available
update_current_version = Current Version
update_new_version = New Version
update_link_prompt = Click the following links to download update tools.<br/>Additional data charges my occur.
update_skip_btn = Apply
update_id_skip_info = If you don''t want to update, please click &quot;Skip&quot;.
update_remind = Remind me when new version found.
update_management = Software Updates
update_log = Bug Fixed
update_note = Note
update_notice = New version found. For more details go to Settings->Device Settings->Update management
update_note_info = Click the link to download update tool.
update_note_install = Extract update tool and then run it to start updating.
update_note_linux = Can''t upgrade online in Linux. Please upgrade in Windows or on a Mac.
update_check_new_version = Check
update_check_new_version_desc = Click "Check" to check for new updates now.
update_new_version_checking = Checking for new updates,please wait
update_manual_check_roaming_confirm = The device is in roaming status and extra charges may apply. Do you want to check update now?
#AP_Station
ap_station = Internet Wi-Fi
ap_station_switch = Internet Wi-Fi Switch
ap_station_wlan_mode = Preferred Network
ap_station_wifi_prior = Wi-Fi
ap_station_3g_prior = WWAN
ap_station_current_status = Current Status
ap_station_wlan_connected = Wi-Fi connected
ap_station_wan_connected = WAN connected
ap_station_no_connection = No connection
ap_station_hotspot_list = Wi-Fi Hotspot
ap_station_connect = Connect
ap_station_disconnect = Disconnect
ap_station_add_hotspot = Add Wi-Fi Hotspot
ap_station_edit_hotspot = Edit Wi-Fi Hotspot
ap_station_show_password = Display Password
ap_station_encrypt_type = Encryption Type
ap_station_wep_keys = WEP Keys
ap_station_encrypt_type_none = NO ENCRYPTION
ap_station_encrypt_type_wep = WEP
ap_station_wep_key_type_ascii = ASCII
ap_station_wep_key_type_hex = HEX
ap_station_cipher = WPA Algorithms
ap_station_cipher_TKIP = TKIP
ap_station_cipher_AES = AES
ap_station_cipher_AUTO = AUTO
ap_station_security_mode_OPEN = OPEN
ap_station_security_mode_WPAPSKWPA2PSK = WPA-PSK/WPA2-PSK
ap_station_security_mode_SHARED = SHARED
ap_station_security_mode_WPAPSK = WPA-PSK
ap_station_security_mode_WPA2PSK = WPA2-PSK
ap_station_security_mode_EAPAKASIM = EAP-AKA/SIM
ap_station_clear = Clear
ap_station_wep_default_key = Default Key
ap_station_wep_key = Key
ap_station_wep_key_0 = Key 1
ap_station_wep_key_1 = Key 2
ap_station_wep_key_2 = Key 3
ap_station_wep_key_3 = Key 4
ap_station_exceed_list_max = The max number of AP is {0}!
ap_station_search_hotspot_fail = Search hotspot failure!
ap_station_connect_change_alert = Will disconnect from WAN. Continue?
ap_station_update_fail = Operate failed. The hotspot is in connection.
ap_station_enable_confirm = If enable Internet Wi-Fi, multi-SSID will be disabled. Continue?

#fastboot
fastboot_setting = Fast Boot Settings
fastboot_note = If enable Fast Boot function, your device will start in a short time.

#notes
wifi_channel_bandwidth = Channel Bandwidth

home_note = The table shows the information of connected wireless device(s).

sms_setting_note_validity = Validity: Set the expiration time to keep outgoing messages.
sms_setting_note_center_number = Centre Number: The SMS Centre number is set by your provider; if you are unsure please contact your provider for support.
sms_setting_note_delivery_report = Delivery Report: Enables or Disables notification of your SMS delivery status.

apn_note_whole_page = You can set the Access Point Name(APN) on this page.
apn_note_mode = Mode: If a fixed APN is provided by your service provider, select Manual APN. Otherwise, please select Auto APN, and the device will automatically obtain parameters.
apn_note_profile = Profile: It contains one or more profile names.
apn_note_pdp_type = PDP Type: IPv4/IPv6/IPv4&IPv6.
apn_note_profile_name = Profile Name: It refers to the name that you assign to the new profile.
apn_note_apn = APN: Access Point Name. The APN contains 0-9 a-z A-Z . - and it can''t start with and end with .or -.
apn_note_dns_mode = DNS Mode: If a fixed IP address is provided by your service provider, select Manual DNS. Otherwise, please select Auto DNS, and the device will automatically obtain parameters.
apn_note_authentication = Authentication: It is provided by your Internet Service Provider(ISP).Password Authentication Protocol (PAP) provides a simple method without encryption for the peer to establish its identity using a 2-way handshake. Challenge-Handshake Authentication Protocol (CHAP) is used to periodically verify the identity of the peer using a 3-way handshake.
apn_note_username = User Name: User name is used to obtain authentication from the ISP when the connection is established.
apn_note_password = Password: Password is used to obtain authentication from the ISP when the connection is established.
apn_note_set_default = Click "Set as default" to set this profile as the default profile.

wifi_basic_note_whole_page = You can set the Wi-Fi basic characters on this page.
wifi_basic_note_multi_ssid_switch = Multi SSID Switch: 2 SSID can be used at the same time. If enable Internet Wi-Fi, multi-SSID will be disabled.
wifi_basic_note_network_name = Network Name: Service Set Identifier (SSID). Enter a string less than 32 characters as the name for your wireless local area network (WLAN).
wifi_basic_note_network_name_input = The network name contains 0-9 a-z A-Z ! # ( ) + - . / % = ? @ ^ _ { | } ~ and space, and it can''t start and end with space.
wifi_basic_note_broadcast = Broadcast Network Name(SSID): Disable or Enable (Default) this function. Once enabled, the router will broadcast SSID, nd other devices can discover and connect to it.
wifi_basic_note_security_mode = Security Mode:
wifi_basic_note_no_encryption = OPEN: Authentication and encryption won''t be performed. There are risks that private info will be intercepted or network will be used by unauthorized individuals. This encryption scheme isn''t recommended.
wifi_basic_note_wpa_psk_aes = WPA2(AES)-PSK: It is the secure version of WPA with implementation of the 802.11i standard.
wifi_basic_note_wpa_psk = WPA-PSK/WPA2-PSK: WPA Pre-Shared Key (WPA-PSK). WPA2-PSK is the secure version of WPA with implementation of the 802.11i standard.
wifi_basic_note_pass_phrase = Pass Phrase: The pass-phrase contains 0-9 a-z A-Z ! # ( ) + - . / % = ? @ ^ _ { | } ~
wifi_basic_note_max_station_number = Max Device Number: Choose the maximum number of devices connecting to AP.

wifi_advanced_note_whole_page = You can set Wi-Fi advanced characters on this page.
wifi_advanced_note_band_selection = Band Selection: Select the band which is 2.4GHz or 5GHz.
wifi_advanced_note_network_mode = Network Mode: If all of the wireless devices are connected to this device in the same transmission mode, performance will be improved by selecting appropriate wireless mode.
wifi_advanced_note_country_code = Country/Region Code: Select the right country code. When using the device internationally, please change the country/region code.
wifi_advanced_note_frequency = Frequency (Channel): Select appropriate channel to optimize the performance and coverage of your wireless network.
wifi_advanced_note_apply = When clicking Apply, any connected Wi-Fi devices will need to reconnect.

ap_station_note_info = Please make sure that the IP address of Wi-Fi hotspot you''ve connected isn''t in the range of this device IP address, or you won''t have access to Internet via the Wi-Fi hotspot.
ap_station_note_disable_info = If enable multi-SSID, Internet Wi-Fi will be disabled.

#restart
restart = Restart
restart_button = Restart Device
restart_confirm = The device will be restarted!
restarting = Restarting Device

#diconneted_operate_note
diconneted_operate_note = To change current setting, please disconnect from network.

#ota_update
ota_update = Update Management
ota_title = Update
ota_no_new_version = No new version found.
ota_new_version = Found new version. Do you want to update?
ota_connect_server = Connecting to server
ota_connect_server_successfully = Connected to server successfully
ota_downloading = Downloading...
ota_download_failed = Download failed
ota_no_network = No network
ota_network_disconnected = Please connect to network before updating!
ota_interrputed_alert = Found new version. Please login to update!
ota_interrputed = Resume the downloading task which was interrputed before?
ota_download_success = Download completed, and the device will restart. Please wait...
ota_update_success = Updated successfully!
ota_update_failed = Update failed.
ota_connect_server_failed = Unable to connect to server.
ota_download_warning = Make sure there's enough battery; Don't force stop during download process.
ota_update_warning = Attention: Don't force stop during update process.
ota_cancel = Update has been cancelled!
ota_pkg_exceed = The update package is too large!
ota_have_cancel = You have already cancelled!
ota_roamming = You are roaming now, can not update!
ota_low_battery = Download completed and battery is low. The device will restart after battery is fully charged!
ota_md5_error = Check update package failed.
ota_version = Version:
ota_update_setting = Cycle Settings
ota_auto_update_switch = Auto-check New Version
ota_update_interval_day = Auto-check Cycle
ota_roaming_setting = Roaming Settings
ota_update_roaming_remind = Check this option, the device will update when roaming and you will incur roaming charges.
ota_update_manual = Check New Version
ota_check_new_version = Check
ota_check_new_version_desc = Click Check button for checking new version immediately.
ota_check_roaming_alert = Your device is in roaming now, and data roaming is disabled. To enable it, go to Settings > Device Settings > Update Management > Roaming Settings.
ota_update_every_day = Every day
ota_update_15_day = 15 days
ota_update_30_day = 30 days
ota_new_version_checking = Checking new version...
ota_update_running = Update is ongoing...
ota_check_fail = Check new version failed!
#STK
stk_info = STK information
version_stk_no_info = This version is not sport STK.
simcard_stk_no_info = This SIM card is not sport STK.
input_please = Please input:
max_number = Max Number:
min_number = Min Number:

#redirect_notice
redirect_new_message = You have new SMS.
redirect_new_version = New software is available for your USB-modem, which will improve the performance and stability of your mobile broadband service.
redirect_other = No connection.

#Ethernet Dial
ethernet_settings = Ethernet Settings
ethernet_dial_mode = Dial Mode
static_ip_address = IP Address
static_subnet_mask = Subnet Mask
static_gateway = Gateway
static_prefer_dns = Prefer DNS
static_standby_dns = Standby DNS
static_username = User Name
static_password = Password
ethernet_setting = Ethernet Settings
ethernet_mode_pppoe = PPPoE
ethernet_mode_static = Static
ethernet_mode_dhcp = DHCP
eth_connect_status = Connection Status
eth_auto_dial = Auto Connection
no_eth_insert = No Ethernet port insert!
pppoe_save_info = Save User Information
ethernet_info = Ethernet Information
ethernet_ip_address = Ethernet IP Address
ethernet_subnet_mask = Ethernet Subnet Mask
ethernet_gateway = Ethernet Gateway
ethernet_prefer_dns = Ethernet Prefer DNS
ethernet_standby_dns = Ethernet Standby DNS<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 12">
<meta name=Originator content="Microsoft Word 12">
<link rel=File-List href="MF65%20manual_2.2_files/filelist.xml">
<link rel=Edit-Time-Data href="MF65%20manual_2.2_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>MF65 Help</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Shirley</o:Author>
  <o:LastAuthor>MikeB</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>4</o:TotalTime>
  <o:LastPrinted>2010-07-29T04:51:00Z</o:LastPrinted>
  <o:Created>2013-09-17T06:41:00Z</o:Created>
  <o:LastSaved>2013-09-17T06:41:00Z</o:LastSaved>
  <o:Pages>14</o:Pages>
  <o:Words>3200</o:Words>
  <o:Characters>18242</o:Characters>
  <o:Company>ZTE</o:Company>
  <o:Lines>152</o:Lines>
  <o:Paragraphs>42</o:Paragraphs>
  <o:CharactersWithSpaces>21400</o:CharactersWithSpaces>
  <o:Version>12.00</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:PixelsPerInch>120</o:PixelsPerInch>
 </o:OfficeDocumentSettings>
</xml><![endif]-->
<link rel=themeData href="MF65%20manual_2.2_files/themedata.thmx">
<link rel=colorSchemeMapping
href="MF65%20manual_2.2_files/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:DrawingGridHorizontalSpacing>5.25 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>7.8 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-AU</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:BalanceSingleByteDoubleByteWidth/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:DontVertAlignCellWithSp/>
   <w:DontBreakConstrainedForcedTables/>
   <w:DontVertAlignInTxbx/>
   <w:Word11KerningPairs/>
   <w:CachedColBalance/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="false"
  DefSemiHidden="false" DefQFormat="false" LatentStyleCount="267">
  <w:LsdException Locked="false" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" Priority="99" Name="footer"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" Priority="99" Name="page number"/>
  <w:LsdException Locked="false" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" Priority="99" Name="No List"/>
  <w:LsdException Locked="false" Priority="99" SemiHidden="true"
   Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="99" SemiHidden="true" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" QFormat="true"
   Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" QFormat="true"
   Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" QFormat="true"
   Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" QFormat="true"
   Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" QFormat="true"
   Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" QFormat="true"
   Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" SemiHidden="true"
   UnhideWhenUsed="true" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="TOC Heading"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:SimSun;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 9 6 1 1 1 1 1;
	mso-font-alt:SimHei;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-2147482945 953122042 22 0 262145 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520081665 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Akkurat-Light;
	panose-1:2 0 5 3 3 0 0 2 0 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-2147483473 1073750090 0 0 1 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
@font-face
	{font-family:"\@SimHei";
	panose-1:2 1 6 9 6 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-2147482945 953122042 22 0 262145 0;}
@font-face
	{font-family:"Arial Black";
	panose-1:2 11 10 4 2 1 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"Harmony Display";
	panose-1:2 11 4 0 4 2 0 0 0 3;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-2147483609 0 0 0 1 0;}
@font-face
	{font-family:GravurCondensed-Regular;
	panose-1:2 0 5 6 8 0 0 2 0 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-2147483481 0 0 0 9 0;}
@font-face
	{font-family:Harmony-Display;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"Times New Roman";
	mso-font-charset:77;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
h1
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 1 Char";
	mso-style-next:Normal;
	margin-top:17.0pt;
	margin-right:0cm;
	margin-bottom:16.5pt;
	margin-left:21.6pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-21.6pt;
	line-height:240%;
	mso-pagination:lines-together;
	page-break-after:avoid;
	mso-outline-level:1;
	mso-list:l2 level1 lfo2;
	tab-stops:list 21.6pt;
	font-size:22.0pt;
	font-family:"Times New Roman","serif";
	mso-font-kerning:22.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
h2
	{mso-style-name:"Heading 2\,heading 2+ Indent\: Left 0\.25 in\,\C911\C81C\BAA9\,H2\,Underrubrik1\,prop2\,h2\,\4E8C\7EA7\,2nd\.\.\.\,2nd level\,2\,Header 2\,l2\,Titre2\,Head 2\,sect 1\.2\,DO NOT USE_h2\,chn\,Chapter Number\/Appendix Letter\,Title2\,DO\,heading 2\,\8282\540D\,???\,??";
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 2 Char\,heading 2+ Indent\: Left 0\.25 in Char\,\C911\C81C\BAA9 Char\,H2 Char\,Underrubrik1 Char\,prop2 Char\,h2 Char\,\4E8C\7EA7 Char\,2nd\.\.\. Char\,2nd level Char\,2 Char\,Header 2 Char\,l2 Char\,Titre2 Char\,Head 2 Char\,sect 1\.2 Char\,DO NOT USE_h2 Char\,chn Char\,Title2 Char";
	mso-style-next:Normal;
	margin-top:13.0pt;
	margin-right:0cm;
	margin-bottom:13.0pt;
	margin-left:28.8pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-28.8pt;
	line-height:170%;
	mso-pagination:lines-together;
	page-break-after:avoid;
	mso-outline-level:2;
	mso-list:l2 level2 lfo2;
	tab-stops:list 28.8pt;
	font-size:16.0pt;
	font-family:"Arial","sans-serif";
	mso-fareast-font-family:SimHei;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:normal;}
h3
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Heading 3 Char";
	mso-style-next:"Normal Indent\,\8868\6B63\6587\,\6B63\6587\975E\7F29\8FDB\,\9996\884C\7F29\8FDB\,\6B63\6587\4E0D\7F29\8FDB\,\6B63\6587\FF08\9996\884C\7F29\8FDB\4E24\5B57\FF09\FF0B\884C\8DDD\FF1A1\.5\500D\884C\8DDD\,\6B63\6587\7F29\8FDB Char\,\6807\98984\,\7279\70B9\,\6BB51\,ALT+Z\,\56FE\53F7\6807\6CE8\,\6B63\6587-\6BB5\524D3\78C5\,Normal Indent Char Char Char\,Normal Indent Char Char Char Char\,\6B63\6587\7F29\8FDB Char Char Char Char Char\,\6B63\6587\7F29\8FDB Char Char Char\,???1\,?????\,????\,??\(??????\)+??\:1\.5???\,???? Cha";
	margin-top:3.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:36.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-36.0pt;
	mso-pagination:lines-together;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-list:l2 level3 lfo2;
	tab-stops:list 36.0pt;
	mso-layout-grid-align:none;
	font-size:8.0pt;
	mso-bidi-font-size:10.5pt;
	font-family:"Arial Black","sans-serif";
	mso-bidi-font-family:SimSun;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:normal;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-para-margin-top:.2gd;
	mso-para-margin-right:0cm;
	mso-para-margin-bottom:0cm;
	mso-para-margin-left:0cm;
	mso-para-margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	tab-stops:right dotted 270.0pt;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;
	mso-no-proof:yes;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:30.05pt;
	margin-bottom:.0001pt;
	mso-para-margin-top:0cm;
	mso-para-margin-right:0cm;
	mso-para-margin-bottom:0cm;
	mso-para-margin-left:.86gd;
	mso-para-margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-21.0pt;
	mso-char-indent-count:-2.0;
	line-height:13.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:none;
	tab-stops:27.0pt right dotted 270.0pt;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Arial","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	mso-no-proof:yes;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:63.0pt;
	margin-bottom:.0001pt;
	mso-para-margin-top:0cm;
	mso-para-margin-right:0cm;
	mso-para-margin-bottom:0cm;
	mso-para-margin-left:2.57gd;
	mso-para-margin-bottom:.0001pt;
	text-align:center;
	text-indent:-36.0pt;
	mso-char-indent-count:-3.0;
	mso-pagination:none;
	tab-stops:54.0pt right dotted 270.0pt;
	font-size:12.0pt;
	font-family:"Arial","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-GB;
	mso-fareast-language:ZH-CN;
	mso-no-proof:yes;}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{mso-style-name:"Normal Indent\,\8868\6B63\6587\,\6B63\6587\975E\7F29\8FDB\,\9996\884C\7F29\8FDB\,\6B63\6587\4E0D\7F29\8FDB\,\6B63\6587\FF08\9996\884C\7F29\8FDB\4E24\5B57\FF09\FF0B\884C\8DDD\FF1A1\.5\500D\884C\8DDD\,\6B63\6587\7F29\8FDB Char\,\6807\98984\,\7279\70B9\,\6BB51\,ALT+Z\,\56FE\53F7\6807\6CE8\,\6B63\6587-\6BB5\524D3\78C5\,Normal Indent Char Char Char\,Normal Indent Char Char Char Char\,\6B63\6587\7F29\8FDB Char Char Char Char Char\,\6B63\6587\7F29\8FDB Char Char Char\,???1\,?????\,????\,??\(??????\)+??\:1\.5???\,???? Cha";
	mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	mso-char-indent-count:2.0;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-link:"Comment Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-unhide:no;
	mso-style-link:"Header Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	tab-stops:center 8.0cm right 16.0cm;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-link:"Footer Char";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:none;
	tab-stops:center 207.65pt right 415.3pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.MsoCommentReference
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:10.5pt;}
a:link, span.MsoHyperlink
	{mso-style-unhide:no;
	color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-unhide:no;
	color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-link:"Document Map Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	background:navy;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"Comment Text";
	mso-style-link:"Comment Subject Char";
	mso-style-next:"Comment Text";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:9.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{mso-style-priority:34;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-type:export-only;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 1";
	mso-ansi-font-size:14.0pt;
	mso-bidi-font-size:14.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#365F91;
	mso-themecolor:accent1;
	mso-themeshade:191;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char\,heading 2+ Indent\: Left 0\.25 in Char\,\C911\C81C\BAA9 Char\,H2 Char\,Underrubrik1 Char\,prop2 Char\,h2 Char\,\4E8C\7EA7 Char\,2nd\.\.\. Char\,2nd level Char\,2 Char\,Header 2 Char\,l2 Char\,Titre2 Char\,Head 2 Char\,sect 1\.2 Char\,DO NOT USE_h2 Char\,chn Char\,Title2 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 2\,heading 2+ Indent\: Left 0\.25 in\,\C911\C81C\BAA9\,H2\,Underrubrik1\,prop2\,h2\,\4E8C\7EA7\,2nd\.\.\.\,2nd level\,2\,Header 2\,l2\,Titre2\,Head 2\,sect 1\.2\,DO NOT USE_h2\,chn\,Chapter Number\/Appendix Letter\,Title2\,DO\,heading 2\,\8282\540D\,???\,??";
	mso-ansi-font-size:16.0pt;
	mso-bidi-font-size:16.0pt;
	font-family:"Arial","sans-serif";
	mso-ascii-font-family:Arial;
	mso-fareast-font-family:SimHei;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.Heading2Char1
	{mso-style-name:"Heading 2 Char1\,heading 2+ Indent\: Left 0\.25 in Char1\,\C911\C81C\BAA9 Char1\,H2 Char1\,Underrubrik1 Char1\,prop2 Char1\,h2 Char1\,\4E8C\7EA7 Char1\,2nd\.\.\. Char1\,2nd level Char1\,2 Char1\,Header 2 Char1\,l2 Char1\,Titre2 Char1\,Head 2 Char1\,sect 1\.2 Char1\,DO NOT USE_h2 Char1\,chn Char1";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 2\,heading 2+ Indent\: Left 0\.25 in\,\C911\C81C\BAA9\,H2\,Underrubrik1\,prop2\,h2\,\4E8C\7EA7\,2nd\.\.\.\,2nd level\,2\,Header 2\,l2\,Titre2\,Head 2\,sect 1\.2\,DO NOT USE_h2\,chn\,Chapter Number\/Appendix Letter\,Title2\,DO\,heading 2\,\8282\540D\,???\,??";
	mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Heading 3";
	mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:major-latin;
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:major-fareast;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:major-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:major-bidi;
	color:#4F81BD;
	mso-themecolor:accent1;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;}
span.CommentTextChar
	{mso-style-name:"Comment Text Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Comment Text";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:Header;
	mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.FooterChar
	{mso-style-name:"Footer Char";
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:Footer;
	mso-ansi-font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.DocumentMapChar
	{mso-style-name:"Document Map Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Document Map";
	mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	font-family:"Tahoma","sans-serif";
	mso-ascii-font-family:Tahoma;
	mso-hansi-font-family:Tahoma;
	mso-bidi-font-family:Tahoma;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
span.CommentSubjectChar
	{mso-style-name:"Comment Subject Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-parent:"Comment Text Char";
	mso-style-link:"Comment Subject";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Balloon Text";
	mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	font-family:"Tahoma","sans-serif";
	mso-ascii-font-family:Tahoma;
	mso-hansi-font-family:Tahoma;
	mso-bidi-font-family:Tahoma;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;}
p.Heading3Arial, li.Heading3Arial, div.Heading3Arial
	{mso-style-name:"Heading 3 + Arial\,12 pt\,Left\:  0 pt\,First line\:  0 pt\,After\:  0 pt";
	mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	line-height:11.0pt;
	mso-line-height-rule:exactly;
	mso-pagination:none;
	mso-layout-grid-align:none;
	text-autospace:none;
	font-size:10.5pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:SimSun;
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-GB;
	mso-fareast-language:ZH-CN;}
p.CharChar, li.CharChar, div.CharChar
	{mso-style-name:"Char Char";
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"Document Map";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:17.85pt;
	margin-bottom:.0001pt;
	line-height:21.8pt;
	mso-line-height-rule:exactly;
	mso-pagination:none;
	mso-outline-level:4;
	background:navy;
	mso-layout-grid-align:none;
	font-size:12.0pt;
	font-family:"Tahoma","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.CharChar2CharCharCharChar, li.CharChar2CharCharCharChar, div.CharChar2CharCharCharChar
	{mso-style-name:"Char Char2 Char Char Char Char";
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"Document Map";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:17.85pt;
	margin-bottom:.0001pt;
	line-height:21.8pt;
	mso-line-height-rule:exactly;
	mso-pagination:none;
	mso-outline-level:4;
	background:navy;
	mso-layout-grid-align:none;
	font-size:12.0pt;
	font-family:"Tahoma","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.CharChar2, li.CharChar2, div.CharChar2
	{mso-style-name:"Char Char2";
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"Document Map";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:17.85pt;
	margin-bottom:.0001pt;
	line-height:21.8pt;
	mso-line-height-rule:exactly;
	mso-pagination:none;
	mso-outline-level:4;
	background:navy;
	mso-layout-grid-align:none;
	font-size:12.0pt;
	font-family:"Tahoma","sans-serif";
	mso-fareast-font-family:SimSun;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:1.0pt;
	mso-ansi-language:EN-US;
	mso-fareast-language:ZH-CN;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;
	mso-fareast-font-family:SimSun;}
 /* Page Definitions */
 @page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;
	mso-footnote-separator:url("MF65%20manual_2.2_files/header.htm") fs;
	mso-footnote-continuation-separator:url("MF65%20manual_2.2_files/header.htm") fcs;
	mso-endnote-separator:url("MF65%20manual_2.2_files/header.htm") es;
	mso-endnote-continuation-separator:url("MF65%20manual_2.2_files/header.htm") ecs;}
@page WordSection1
	{size:419.55pt 21.0cm;
	margin:1.0cm 21.25pt 1.0cm 1.0cm;
	mso-header-margin:14.2pt;
	mso-footer-margin:14.2pt;
	mso-header:url("MF65%20manual_2.2_files/header.htm") h1;
	mso-even-footer:url("MF65%20manual_2.2_files/header.htm") ef1;
	mso-footer:url("MF65%20manual_2.2_files/header.htm") f1;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:457993520;
	mso-list-type:hybrid;
	mso-list-template-ids:-1456310976 134807567 134807577 134807579 134807567 134807577 134807579 134807567 134807577 134807579;}
@list l0:level1
	{mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1
	{mso-list-id:906499551;
	mso-list-type:hybrid;
	mso-list-template-ids:-1496166932 201916417 201916419 201916421 201916417 201916419 201916421 201916417 201916419 201916421;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l1:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2
	{mso-list-id:1219241841;
	mso-list-template-ids:1789326082;}
@list l2:level1
	{mso-level-style-link:"Heading 1";
	mso-level-text:%1;
	mso-level-tab-stop:21.6pt;
	mso-level-number-position:left;
	margin-left:21.6pt;
	text-indent:-21.6pt;
	font-family:"Arial","sans-serif";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-font-weight:bold;
	mso-ansi-font-style:normal;}
@list l2:level2
	{mso-level-style-link:"Heading 2";
	mso-level-text:"%1\.%2";
	mso-level-tab-stop:28.8pt;
	mso-level-number-position:left;
	margin-left:28.8pt;
	text-indent:-28.8pt;}
@list l2:level3
	{mso-level-style-link:"Heading 3";
	mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	margin-left:36.0pt;
	text-indent:-36.0pt;}
@list l2:level4
	{mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:43.2pt;
	mso-level-number-position:left;
	margin-left:43.2pt;
	text-indent:-43.2pt;}
@list l2:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:50.4pt;
	mso-level-number-position:left;
	margin-left:50.4pt;
	text-indent:-50.4pt;}
@list l2:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:57.6pt;
	mso-level-number-position:left;
	margin-left:57.6pt;
	text-indent:-57.6pt;}
@list l2:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:64.8pt;
	mso-level-number-position:left;
	margin-left:64.8pt;
	text-indent:-64.8pt;}
@list l2:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	margin-left:72.0pt;
	text-indent:-72.0pt;}
@list l2:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:79.2pt;
	mso-level-number-position:left;
	margin-left:79.2pt;
	text-indent:-79.2pt;}
@list l3
	{mso-list-id:1778793862;
	mso-list-type:hybrid;
	mso-list-template-ids:281164392 313398166 134807555 134807557 134807553 134807555 134807557 134807553 134807555 134807557;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:14.2pt;
	mso-level-number-position:left;
	margin-left:14.2pt;
	text-indent:-14.2pt;
	font-family:Symbol;}
@list l3:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4
	{mso-list-id:1936162076;
	mso-list-type:hybrid;
	mso-list-template-ids:-573955098 201916417 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	font-family:Symbol;}
@list l4:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l4:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5
	{mso-list-id:2085104286;
	mso-list-type:hybrid;
	mso-list-template-ids:858944292 313398166 134807555 134807557 134807553 134807555 134807557 134807553 134807555 134807557;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:14.2pt;
	mso-level-number-position:left;
	margin-left:14.2pt;
	text-indent:-14.2pt;
	font-family:Symbol;}
@list l5:level2
	{mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level3
	{mso-level-tab-stop:108.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level5
	{mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level6
	{mso-level-tab-stop:216.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level8
	{mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l5:level9
	{mso-level-tab-stop:324.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-unhide:no;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	mso-pagination:none;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="68610" fill="f" fillcolor="white"
  stroke="f">
  <v:fill color="white" on="f"/>
  <v:stroke on="f"/>
 </o:shapedefaults></xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-AU link=blue vlink=purple style='tab-interval:21.0pt;text-justify-trim:
punctuation'>

<div class=WordSection1>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><a name="_Toc200953871"><b><span lang=EN-US
style='font-size:24.0pt;font-family:GravurCondensed-Regular;mso-bidi-font-family:
Arial;color:#005BAB'>TELSTRA MF65<span style='mso-spacerun:yes'>&nbsp; </span><o:p></o:p></span></b></a></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><b><span
lang=EN-US style='font-size:22.0pt;font-family:"Harmony Display","sans-serif";
mso-bidi-font-family:Arial;color:#005BAB'><o:p>&nbsp;</o:p></span></b></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:20.0pt;font-family:GravurCondensed-Regular;
mso-bidi-font-family:Arial;color:black;text-transform:uppercase'>telstra
pre-paid <o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:20.0pt;font-family:GravurCondensed-Regular;
mso-bidi-font-family:Arial;color:black;text-transform:uppercase'>3G wi-fi<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:20.0pt;font-family:GravurCondensed-Regular;
mso-bidi-font-family:Arial;color:black;text-transform:uppercase'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:20.0pt;font-family:GravurCondensed-Regular;
mso-bidi-font-family:Arial;color:black;text-transform:uppercase'>User Manual<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:11.0pt;font-family:"Harmony Display","sans-serif"'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc200953871'><span
lang=EN-US style='font-size:11.0pt;font-family:"Harmony Display","sans-serif"'><o:p>&nbsp;</o:p></span></span></p>

<span style='font-size:16.0pt;font-family:GravurCondensed-Regular;mso-fareast-font-family:
SimSun;mso-bidi-font-family:"Times New Roman";text-transform:uppercase;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan'><span
style='mso-bookmark:_Toc200953871'><span style='font-size:16.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc200953871'><span style='font-size:16.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Check your system
requirements</span></span><span style='mso-bookmark:_Toc200953871'></span><span
lang=EN-GB style='font-size:16.0pt;font-family:GravurCondensed-Regular;
mso-bidi-font-family:Arial;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Your Wi-Fi router will
connect to any device that supports Wi-Fi, 802.11 b/g/n<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>A web browser is required
to log in to your Wi-Fi router if you wish to make any configuration changes.<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>USB driverless
connection is also supported for Windows, MAC and LINUX operating systems:<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='margin-left:36.0pt;text-align:left;
text-indent:-18.0pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l1 level1 lfo4;tab-stops:297.0pt 306.0pt'><![if !supportLists]><span
style='mso-bidi-font-size:10.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'><span style='mso-list:Ignore'>¡¤<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='mso-bidi-font-size:10.5pt;
font-family:Akkurat-Light;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Windows 8 (not including RT) / 7 / XP / Vista<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='margin-left:36.0pt;text-align:left;
text-indent:-18.0pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l1 level1 lfo4;tab-stops:297.0pt 306.0pt'><![if !supportLists]><span
style='mso-bidi-font-size:10.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'><span style='mso-list:Ignore'>¡¤<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='mso-bidi-font-size:10.5pt;
font-family:Akkurat-Light;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>MAC OS X 10.5.11 and above<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='margin-left:36.0pt;text-align:left;
text-indent:-18.0pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l1 level1 lfo4;tab-stops:297.0pt 306.0pt'><![if !supportLists]><span
style='mso-bidi-font-size:10.5pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'><span style='mso-list:Ignore'>¡¤<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='mso-bidi-font-size:10.5pt;
font-family:Akkurat-Light;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Linux<o:p></o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:15.75pt 84.0pt'><a
name="_Toc200953874"></a><a name="_Toc187810645"><span style='mso-bookmark:
_Toc200953874'><span style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;
mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Using
the USB connection requires administrator rights to install and run the
software.<o:p></o:p></span></span></a></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>We suggest you switch
off your anti-virus software before connecting the router - In some cases
protection software can prevent automatic installation. <o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>It is possible to start
the installation process manually by clicking the <span class=SpellE>Autorun</span>
icon when it appears.<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Get to know your prepaid wi-fi hotspot</span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:9.0pt;font-family:Akkurat-Light;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shapetype id="_x0000_t75"
 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
 filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="Picture_x0020_1" o:spid="_x0000_i1071" type="#_x0000_t75"
 alt="Overview" style='width:365.25pt;height:286.5pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image001.png" o:title="Overview"
  cropleft="1005f"/>
</v:shape><![endif]--><![if !vml]><img width=609 height=478
src="MF65%20manual_2.2_files/image002.gif" alt=Overview v:shapes="Picture_x0020_1"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Insert your USIM Card</span></span></span><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><b><span lang=EN-GB
style='font-size:16.0pt;font-family:"Harmony Display","sans-serif";mso-fareast-font-family:
SimHei;mso-bidi-font-family:Arial;mso-font-kerning:0pt;mso-ansi-language:EN-GB'><o:p></o:p></span></b></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l0 level1 lfo6;tab-stops:list 0cm 36.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'> </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Slide the back cover down to access the USIM and
memory card slots.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l0 level1 lfo6;tab-stops:list 0cm 36.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'> </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Insert your USIM card carefully as shown:<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span style='font-size:
11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="_x0000_i1070" type="#_x0000_t75" alt="SIM+T flash" style='width:370.5pt;
 height:246pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image003.png" o:title="SIM+T flash"/>
</v:shape><![endif]--><![if !vml]><img width=618 height=410
src="MF65%20manual_2.2_files/image004.gif" alt="SIM+T flash" v:shapes="_x0000_i1070"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l0 level1 lfo6;tab-stops:list 0cm 36.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'> </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>If you want to add a memory card you can do it
now. Your USB device supports up to 32GB microSD(HC)&#8482; memory.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l0 level1 lfo6;tab-stops:list 0cm 36.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'> </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Insert the battery with the gold contacts lined
up with the gold springs and slide the cover back on.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l0 level1 lfo6;tab-stops:list 0cm 36.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'> </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>You are now ready to power up your device and
you¡¯ll be on-line in no time.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-US
style='font-size:11.0pt'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><b style='mso-bidi-font-weight:
normal'><span lang=EN-US style='font-size:11.0pt;font-family:Akkurat-Light'>Notes<o:p></o:p></span></b></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:106.3pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 191.4pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Adding a memory card is optional<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:106.3pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 191.4pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>microSD&#8482; up to 2GB are FAT 16 format.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:106.3pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 191.4pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
class=SpellE><span lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>microSDHC</span></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>&#8482; up to 32GB are FAT 32 format.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-US
style='font-size:11.0pt;font-family:"Harmony Display","sans-serif"'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-US
style='font-size:11.0pt;font-family:"Harmony Display","sans-serif"'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left;background:#B3B3B3'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Handy
hint<o:p></o:p></span></b></span></span></p>

<p class=MsoNormal align=left style='text-align:left;background:#B3B3B3'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Remember to keep your plastic SIM card holder. It
has a record of your PIN number which you should keep handy.<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>power up your wi-fi hotspot</span></span></span><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-family:"Harmony Display","sans-serif";mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press and hold the Power key for 3-4 seconds until the
lights flash.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The Wi-Fi hotspot will start up in a few seconds.
Check the condition of your Wi-Fi hotspot as shown by the LED indicators.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>LED INDICATORS<o:p></o:p></span></span></span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='margin-left:5.4pt;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-yfti-tbllook:1184;mso-padding-alt:0cm 5.4pt 0cm 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1069" type="#_x0000_t75" alt="BAttery_Red" style='width:20.25pt;
   height:12pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image005.png" o:title="BAttery_Red"/>
  </v:shape><![endif]--><![if !vml]><img width=34 height=20
  src="MF65%20manual_2.2_files/image006.jpg" alt="BAttery_Red" v:shapes="_x0000_i1069"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Flashing<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Battery is discharged, &lt; 12 %<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:1;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1068" type="#_x0000_t75" alt="BAttery_Red" style='width:20.25pt;
   height:12pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image005.png" o:title="BAttery_Red"/>
  </v:shape><![endif]--><![if !vml]><img width=34 height=20
  src="MF65%20manual_2.2_files/image006.jpg" alt="BAttery_Red" v:shapes="_x0000_i1068"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Solid<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Battery is low, &lt; 23 %<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:2;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1067" type="#_x0000_t75" alt="Battery_Green" style='width:20.25pt;
   height:12pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image007.png" o:title="Battery_Green"/>
  </v:shape><![endif]--><![if !vml]><img width=34 height=20
  src="MF65%20manual_2.2_files/image008.jpg" alt="Battery_Green" v:shapes="_x0000_i1067"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Solid<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Battery is OK, &gt;23 %<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:3;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1066" type="#_x0000_t75" alt="Battery_Green" style='width:20.25pt;
   height:12pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image007.png" o:title="Battery_Green"/>
  </v:shape><![endif]--><![if !vml]><img width=34 height=20
  src="MF65%20manual_2.2_files/image008.jpg" alt="Battery_Green" v:shapes="_x0000_i1066"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Flashing<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Battery is charging<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:4;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1065" type="#_x0000_t75" alt="wi-fi_blue" style='width:16.5pt;
   height:16.5pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image009.png" o:title="wi-fi_blue"/>
  </v:shape><![endif]--><![if !vml]><img width=28 height=28
  src="MF65%20manual_2.2_files/image010.jpg" alt="wi-fi_blue" v:shapes="_x0000_i1065"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Solid<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Wi-Fi is on<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:5;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1064" type="#_x0000_t75" alt="wi-fi_blue" style='width:16.5pt;
   height:16.5pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image009.png" o:title="wi-fi_blue"/>
  </v:shape><![endif]--><![if !vml]><img width=28 height=28
  src="MF65%20manual_2.2_files/image010.jpg" alt="wi-fi_blue" v:shapes="_x0000_i1064"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Flashing<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>WPS is enabled, available for 2 minutes<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:6;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="Picture_x0020_3" o:spid="_x0000_i1063" type="#_x0000_t75" alt="wi-fi_off"
   style='width:16.5pt;height:18.75pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image011.png" o:title="wi-fi_off"/>
  </v:shape><![endif]--><![if !vml]><img width=28 height=31
  src="MF65%20manual_2.2_files/image012.jpg" alt="wi-fi_off" v:shapes="Picture_x0020_3"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Off<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Wi-Fi is off<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:7;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1062" type="#_x0000_t75" alt="Signal_red" style='width:18.75pt;
   height:18.75pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image013.png" o:title="Signal_red"/>
  </v:shape><![endif]--><![if !vml]><img width=31 height=31
  src="MF65%20manual_2.2_files/image014.jpg" alt="Signal_red" v:shapes="_x0000_i1062"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Solid<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Not registered on the network<o:p></o:p></span></span></span></p>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Check you SIM status using the web interface. No
  USIM, PIN, PUK or Network locked USIM will result in this status.<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:8;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1061" type="#_x0000_t75" alt="Signal_green" style='width:18.75pt;
   height:18.75pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image015.png" o:title="Signal_green"/>
  </v:shape><![endif]--><![if !vml]><img width=31 height=31
  src="MF65%20manual_2.2_files/image016.jpg" alt="Signal_green" v:shapes="_x0000_i1061"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Solid<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Network is registered<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:9;mso-yfti-lastrow:yes;height:17.0pt'>
  <td width=65 valign=top style='width:48.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  style='font-size:11.0pt;font-family:"Calibri","sans-serif";mso-ascii-theme-font:
  minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
   id="_x0000_i1060" type="#_x0000_t75" alt="Signal_green" style='width:18.75pt;
   height:18.75pt;visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image015.png" o:title="Signal_green"/>
  </v:shape><![endif]--><![if !vml]><img width=31 height=31
  src="MF65%20manual_2.2_files/image016.jpg" alt="Signal_green" v:shapes="_x0000_i1060"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;font-family:"Calibri","sans-serif";
  mso-ascii-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=125 valign=top style='width:93.6pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Flashing<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width=289 valign=top style='width:216.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;height:17.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
  _Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
  style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Network data in use (Connected)<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
</table>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>connect devices by wi-fi<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Your Prepaid Wi-Fi hotspot can connect up to five
devices via Wi-Fi providing internet access for all your devices on the go.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>On the devices you wish to connect make sure
Wi-Fi is switched on, then search for Wi-Fi devices. <o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>The Wi-Fi router will show up as <span
class=SpellE>TPPWF_xxxxxx</span>, click on this device to connect.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Consult your security card and enter the default
security key which is case sensitive. Any letters entered must be in upper case
(capitals).<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><br>
</span></span></span><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Connection example for Windows 7 computer:<o:p></o:p></span></b></span></span></p>

<p class=MsoNormalIndent align=left style='margin-left:21.3pt;text-align:left;
text-indent:-21.3pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l0 level2 lfo6;tab-stops:list 14.2pt left 297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>On
your task bar, next to the clock, click on the Network Interface icon<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='margin-left:21.3pt;text-align:left;
text-indent:-21.3pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l0 level2 lfo6;tab-stops:list 14.2pt left 297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Click
on the Wireless device <span class=SpellE>TPPWF_xxxxxx</span><o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='margin-left:21.3pt;text-align:left;
text-indent:-21.3pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l0 level2 lfo6;tab-stops:list 14.2pt left 297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Enter
the password exactly as shown on your security card<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='margin-left:14.2pt;text-align:left;
text-indent:-14.2pt;mso-char-indent-count:0;mso-pagination:widow-orphan;
mso-list:l0 level2 lfo6;tab-stops:list 14.2pt left 297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-fareast-font-family:
Akkurat-Light;mso-bidi-font-family:Akkurat-Light;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>With
Connect Automatically enabled your computer will remember the password and
connect to your Wi-Fi device when it is on and in range.<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;mso-char-indent-count:
0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left;background:#B3B3B3'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Handy
hint<br>
</span></b></span></span><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>It
is also possible to connect via USB connection. See later for details.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>monitor your wi-fi hotspot on your android device<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>You can download the ZTE Wi-Fi Monitor app from
Google Play Store to monitor your Wi-Fi status easily using an Android smart
phone.</span></span></span><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><span style='font-size:16.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Quick References<o:p></o:p></span></span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="93%"
 style='width:93.62%;margin-left:5.4pt;border-collapse:collapse;border:none;
 mso-border-alt:solid windowtext .5pt;mso-yfti-tbllook:480;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.5pt solid windowtext;mso-border-insidev:
 .5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width="31%" valign=top style='width:31.8%;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Browser home page<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="68%" valign=top style='width:68.2%;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'></span></span><a href="http://192.168.0.1"><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;line-height:115%;font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;color:windowtext;mso-ansi-language:EN-GB;
  text-decoration:none;text-underline:none'>http://192.168.0.1</span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span></a><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;line-height:115%;font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width="31%" valign=top style='width:31.8%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Administrator login<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="68%" valign=top style='width:68.2%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>password<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width="31%" valign=top style='width:31.8%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Default SSID<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="68%" valign=top style='width:68.2%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span class=SpellE><span lang=EN-GB
  style='font-size:11.0pt;line-height:115%;font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>TPPWF_xxxxxx</span></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-size:11.0pt;line-height:115%;font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>. <br>
  Supplied on your Security Card.<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width="31%" valign=top style='width:31.8%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Default Security Key<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="68%" valign=top style='width:68.2%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>10 characters which are case sensitive. <br>
  Supplied on your Security Card.<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:4;mso-yfti-lastrow:yes'>
  <td width="31%" valign=top style='width:31.8%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Restore defaults<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="68%" valign=top style='width:68.2%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>From the powered up state:<o:p></o:p></span></span></span></p>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Press &amp; hold the power key and the WPS key
  simultaneously, hold for about 10 seconds.<o:p></o:p></span></span></span></p>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>All passwords and settings will be restored to defaults
  and the router will reboot.<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
</table>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Device homepage<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="_x0000_i1059" type="#_x0000_t75" style='width:468.75pt;height:312pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image017.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=781 height=520
src="MF65%20manual_2.2_files/image018.jpg" v:shapes="_x0000_i1059"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Open a browser and go to 192.168.0.1 to access the device
homepage.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The default administrator login password is ¡®password¡¯<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>homepage icons<o:p></o:p></span></span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="93%"
 style='width:93.62%;margin-left:5.4pt;border-collapse:collapse;border:none;
 mso-border-alt:solid windowtext .5pt;mso-yfti-tbllook:480;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.5pt solid windowtext;mso-border-insidev:
 .5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_8" o:spid="_x0000_i1058"
   type="#_x0000_t75" alt="signal bars" style='width:30pt;height:30pt;
   visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image019.png" o:title="signal bars"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=50 height=50
  src="MF65%20manual_2.2_files/image020.jpg" alt="signal bars" v:shapes="Picture_x0020_8"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Network signal strength. 2G or 3G technology is also
  displayed. No USIM or invalid SIM card (PIN, PUK, or Network locked) will
  result in Disconnected status.<br>
  Check your SIM card is active, valid and inserted correctly. <o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_13" o:spid="_x0000_i1057"
   type="#_x0000_t75" alt="WiFi_connected" style='width:30pt;height:30pt;
   visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image021.png" o:title="WiFi_connected"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=50 height=50
  src="MF65%20manual_2.2_files/image022.jpg" alt="WiFi_connected" v:shapes="Picture_x0020_13"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Number of devices connected via Wi-Fi<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_10" o:spid="_x0000_i1056"
   type="#_x0000_t75" alt="SMS" style='width:30pt;height:30pt;visibility:visible;
   mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image023.png" o:title="SMS"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=50 height=50
  src="MF65%20manual_2.2_files/image024.jpg" alt=SMS v:shapes="Picture_x0020_10"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Number of new SMS messages<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_11" o:spid="_x0000_i1055"
   type="#_x0000_t75" alt="charging" style='width:30pt;height:30pt;
   visibility:visible;mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image025.png" o:title="charging"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=50 height=50
  src="MF65%20manual_2.2_files/image026.jpg" alt=charging v:shapes="Picture_x0020_11"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Charging and Battery status<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:4'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="_x0000_i1054" type="#_x0000_t75"
   alt="data" style='width:30pt;height:30pt;visibility:visible;
   mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image027.png" o:title="data"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=50 height=50
  src="MF65%20manual_2.2_files/image028.jpg" alt=data v:shapes="_x0000_i1054"><![endif]></span></span></span><span
  style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>Data usage and connection time.<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes'>
  <td width="11%" valign=top style='width:11.94%;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
  mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="_x0000_i1053" type="#_x0000_t75"
   alt="SD_Card" style='width:28.5pt;height:28.5pt;visibility:visible;
   mso-wrap-style:square'>
   <v:imagedata src="MF65%20manual_2.2_files/image029.png" o:title="SD_Card"/>
  </v:shape><![endif]--><![if !vml]><img border=0 width=48 height=48
  src="MF65%20manual_2.2_files/image030.gif" alt="SD_Card" v:shapes="_x0000_i1053"><![endif]><o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
  <td width="88%" valign=top style='width:88.06%;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
  mso-char-indent-count:0;line-height:115%;mso-pagination:widow-orphan;
  tab-stops:297.0pt 306.0pt'><span style='mso-bookmark:_Toc187810645'><span
  style='mso-bookmark:_Toc200953874'><span lang=EN-GB style='font-size:11.0pt;
  line-height:115%;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'>microSD memory card status (if fitted)<o:p></o:p></span></span></span></p>
  </td>
  <span style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'></span></span>
 </tr>
</table>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Configure your device using the WEB INTERFACE<o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_5" o:spid="_x0000_i1052" type="#_x0000_t75" style='width:467.25pt;
 height:304.5pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image031.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=779 height=508
src="MF65%20manual_2.2_files/image032.jpg" v:shapes="Picture_x0020_5"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>CONNECTION<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-bookmark:
_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span lang=EN-GB
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The Connection tab shows the summary device status,
how many devices are connected by Wi-Fi and whether you are connected to the
mobile broadband network. <o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>The device will automatically connect to the
network so it shows the Disconnect button status by default. <o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>To change this behaviour press Disconnect first,
then go to Settings &gt; Network Settings &gt; WAN Connection Mode, and select
Manual. <o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-top:0cm;margin-right:1.4pt;
margin-bottom:0cm;margin-left:10.5pt;margin-bottom:.0001pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm left 13.0cm;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>The number of devices connected to your Wi-Fi
hotspot is displayed and you can select to Block unwanted devices if required.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>SETTINGS &gt; QUICK SETTINGS:<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_6" o:spid="_x0000_i1051" type="#_x0000_t75" style='width:364.5pt;
 height:232.5pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image033.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=608 height=388
src="MF65%20manual_2.2_files/image034.jpg" v:shapes="Picture_x0020_6"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Step through the Quick Settings wizard to
quickly review your current default settings.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>NETWORK Settings &gt; WAN Connection Mode:<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><span style='mso-ansi-language:EN-AU;
mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_7"
 o:spid="_x0000_i1050" type="#_x0000_t75" style='width:467.25pt;height:304.5pt;
 visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image035.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=779 height=508
src="MF65%20manual_2.2_files/image036.jpg" v:shapes="Picture_x0020_7"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>The default connection setting will
automatically connect to the network. The setting is greyed out if you are
connected.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Press the Disconnect button to change this
setting and to enable International Roaming if required.<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo9;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>If you make any changes, press Apply to save the
change<o:p></o:p></span></span></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc187810645'><span
style='mso-bookmark:_Toc200953874'><![if !supportLists]><span lang=EN-GB
style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span style='mso-list:
Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>Press the Help icon </span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="_x0000_i1049" type="#_x0000_t75" alt="Help_icon" style='width:12pt;
 height:12pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="_x0000_i1049"><![endif]></span></span></span><span
style='mso-bookmark:_Toc187810645'><span style='mso-bookmark:_Toc200953874'><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><span style='mso-spacerun:yes'>&nbsp;</span>to
get in context tips.<br style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]><o:p></o:p></span></span></span></p>

<span style='mso-bookmark:_Toc200953874'></span><span style='mso-bookmark:_Toc187810645'></span><span
lang=EN-GB style='font-size:10.5pt;mso-bidi-font-size:12.0pt;font-family:"Harmony Display","sans-serif";
mso-fareast-font-family:SimSun;mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA'><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><a name="_Toc200953879"></a><span lang=EN-GB
style='font-family:"Harmony Display","sans-serif";mso-font-kerning:0pt;
mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Network selection:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_14" o:spid="_x0000_i1048" type="#_x0000_t75" alt="Network_Settings"
 style='width:370.5pt;height:153.75pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#4f81bd" o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd"
 o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image039.png" o:title="Network_Settings"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=620 height=259
src="MF65%20manual_2.2_files/image040.jpg" alt="Network_Settings" v:shapes="Picture_x0020_14"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Network
Selection is set to Automatic. You can change to 3G or 2G only.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo9;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
the Disconnect button to change this setting if required.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo9;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>If
you make any changes, press Apply to save the change<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
the Help icon </span><span style='font-size:11.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_12" o:spid="_x0000_i1047"
 type="#_x0000_t75" alt="Help_icon" style='width:12pt;height:12pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="Picture_x0020_12"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><span style='mso-spacerun:yes'>&nbsp;</span>to
get in context tips.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Normally
there is no need to change these settings unless you change service provider.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;
mso-bidi-font-weight:bold'>The device is locked to Telstra. If you use a SIM
card from another provider you may not be able to connect to the network. </span><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;
mso-bidi-font-weight:bold'>Consult Telstra to obtain the unlock code for your
device.</span><span lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; APN:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_4" o:spid="_x0000_i1046" type="#_x0000_t75" alt="apn"
 style='width:393.75pt;height:405pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image041.png" o:title="apn"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=656 height=675
src="MF65%20manual_2.2_files/image042.jpg" alt=apn v:shapes="Picture_x0020_4"><![endif]></span></b><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
the Disconnect button on the device home page to change this setting if
required.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
Add New to create a new APN<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Add
the Profile Name, <span class=SpellE>eg</span> Telstra WAP<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Enter
the correct APN details <span class=SpellE>eg</span> <span class=SpellE>telstra.wap</span><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
Save to save your new APN<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
the Profile drop down box<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Select
the new APN profile<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Click
on ¡®Set as default¡¯ to set the new APN as your preferred setting<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Press
the Help icon </span><span style='font-size:11.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;
mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_26" o:spid="_x0000_i1045"
 type="#_x0000_t75" alt="Help_icon" style='width:12pt;height:12pt;visibility:visible;
 mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="Picture_x0020_26"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><span style='mso-spacerun:yes'>&nbsp;</span>to
get in context tips.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Normally
there is no need to change these settings unless you change service provider.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;
mso-bidi-font-weight:bold'>The device is locked to Telstra. If you use a SIM
card from another provider you may not be able to connect to the network. </span><span
lang=EN-GB style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:EN-GB'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;
mso-bidi-font-weight:bold'>Consult your new carrier to obtain alternate APN
details for your device.</span><span lang=EN-GB style='font-size:11.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Device settings &gt; ACCOUNT MANAGEMENT<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_16"
 o:spid="_x0000_i1044" type="#_x0000_t75" alt="account_management" style='width:369.75pt;
 height:179.25pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image043.png" o:title="account_management"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=619 height=301
src="MF65%20manual_2.2_files/image044.jpg" alt="account_management" v:shapes="Picture_x0020_16"><![endif]></span><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Use the Account Management settings to change the
administrator password if required.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The default password is password. If you have changed
and forgotten the password then you need to restore the device to factory
defaults: From the powered up state press and hold the power key and the WPS
key together for 8 seconds until the power LED goes off. The device will reset.<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Device settings &gt; USIM PIN Management:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_151" o:spid="_x0000_i1043" type="#_x0000_t75" alt="Settings_USIM"
 style='width:282.75pt;height:177.75pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#4f81bd" o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd"
 o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image045.png" o:title="Settings_USIM"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=474 height=299
src="MF65%20manual_2.2_files/image046.jpg" alt="Settings_USIM" v:shapes="Picture_x0020_151"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l5 level1 lfo11;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Disconnect button on the device home page to
change the PIN settings if required.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Enter your current PIN code to change or disable the
PIN<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo9;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>If you make any changes, press Apply to save the
change<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>If you enter the incorrect PIN code three times in
succession you will lock your USIM card. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Contact your service provider to obtain your PUK code<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Settings &gt; Device settings &gt; RESET<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>Press <b style='mso-bidi-font-weight:normal'>Reset</b> to restore your
original factory settings.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Settings &gt; Device settings &gt; RESTART<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>Press <b style='mso-bidi-font-weight:normal'>Restart</b> to power cycle
your device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Settings &gt; Device settings &gt; POWER SAVE</span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="_x0000_i1042" type="#_x0000_t75" alt="powr_save" style='width:357pt;
 height:126pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image047.png" o:title="powr_save"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=598 height=212
src="MF65%20manual_2.2_files/image048.jpg" alt="powr_save" v:shapes="_x0000_i1042"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>If there is no Wi-Fi traffic detected then the device
will switch off Wi-Fi as determined by the Wi-Fi sleep setting.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Device settings &gt; Software updates<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press Check Now to check for updates for your device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Settings &gt; Firewall
&gt; port filtering<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Select Enable to turn on the Port Filtering settings<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>You can apply filters based on MAC Address, Source IP
Address, Destination IP Address and select the action to drop or accept the
packets.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Firewall settings are for advanced users and network
administrators.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Help icon </span><span style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_30" o:spid="_x0000_i1041" type="#_x0000_t75" alt="Help_icon"
 style='width:12pt;height:12pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="Picture_x0020_30"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'>&nbsp;</span>to get in context tips. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_18"
 o:spid="_x0000_i1040" type="#_x0000_t75" alt="Firewall" style='width:309.75pt;
 height:539.25pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image049.png" o:title="Firewall"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=519 height=901
src="MF65%20manual_2.2_files/image050.jpg" alt=Firewall v:shapes="Picture_x0020_18"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Settings &gt; Firewall
&gt; port forwarding<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_19"
 o:spid="_x0000_i1039" type="#_x0000_t75" alt="port_forwarding" style='width:369.75pt;
 height:316.5pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image051.png" o:title="port_forwarding"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=619 height=530
src="MF65%20manual_2.2_files/image052.jpg" alt="port_forwarding" v:shapes="Picture_x0020_19"><![endif]></span><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Select Enable to turn on the port forwarding settings.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Port forwarding can be used to allow a specific
external server or computer access to your machines located on your LAN.
Typical applications will be for multi party gaming, requiring specific control
and communications channels between the remote server and the local machine.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Port forwarding is designated from the LAN side to the
WAN side.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Firewall settings are for advanced users and network
administrators.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Help icon </span><span style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_33" o:spid="_x0000_i1038" type="#_x0000_t75" alt="Help_icon"
 style='width:12pt;height:12pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="Picture_x0020_33"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'>&nbsp;</span>to get in context tips. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Firewall &gt; port MAPPING<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_20"
 o:spid="_x0000_i1037" type="#_x0000_t75" alt="port_mapping" style='width:369pt;
 height:290.25pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image053.png" o:title="port_mapping"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=618 height=486
src="MF65%20manual_2.2_files/image054.jpg" alt="port_mapping" v:shapes="Picture_x0020_20"><![endif]></span><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Select Enable to turn on the port mapping settings.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Port mapping can be used to allow a specific external
server or computer access to your machines located on your LAN. Typical applications
will be for multi party gaming, requiring specific control and communications
channels between the remote server and the local machine.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Port forwarding is designated from the WAN side to the
LAN side and also allows for Port Translation so a port on the WAN side can be
mapped to a different port number on the LAN side.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Firewall settings are for advanced users and network
administrators.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Help icon </span><span style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_147" o:spid="_x0000_i1036" type="#_x0000_t75" alt="Help_icon"
 style='width:12pt;height:12pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="MF65%20manual_2.2_files/image038.gif" alt="Help_icon" v:shapes="Picture_x0020_147"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'>&nbsp;</span>to get in context tips. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Firewall &gt; SYSTEM SECURITY<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Enable or Disable Remote Management (via WAN) and PING<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Firewall settings are for advanced users and network
administrators.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Firewall &gt; UPNp<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Universal Plug and Play is a set of </span><span
lang=EN-US><a href="http://en.wikipedia.org/wiki/Networking_protocol"
title="Networking protocol"><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
color:windowtext;mso-ansi-language:EN-GB;text-decoration:none;text-underline:
none'>networking protocols</span></a></span><span lang=EN-GB style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'> that permits networked </span><span lang=EN-US><a
href="http://en.wikipedia.org/wiki/Peripheral_device" title="Peripheral device"><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;color:windowtext;mso-ansi-language:EN-GB;text-decoration:
none;text-underline:none'>devices</span></a></span><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>, such as personal
computers, printers, Internet gateways, </span><span lang=EN-US><a
href="http://en.wikipedia.org/wiki/Wi-Fi" title=Wi-Fi><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;color:windowtext;mso-ansi-language:EN-GB;text-decoration:
none;text-underline:none'>Wi-Fi</span></a></span><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'> access points and mobile
devices to seamlessly discover each other's presence on the network and
establish functional </span><span lang=EN-US><a
href="http://en.wikipedia.org/wiki/Network_service" title="Network service"><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;color:windowtext;mso-ansi-language:EN-GB;text-decoration:
none;text-underline:none'>network services</span></a></span><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'> for data sharing,
communications, and entertainment.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Enabling UPnP could leave your system vulnerable to
external control so is best left in the Disabled state.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Firewall settings are for advanced users and network
administrators.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; Firewall &gt; dmz<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Enable the DMZ Host to open up all ports for this
particular IP destination.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The DMZ device is not accessible from the Wi-Fi LAN
side but has full access to the internet<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Settings &gt; ROUTER SETTINGS<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape id="Picture_x0020_21"
 o:spid="_x0000_i1035" type="#_x0000_t75" alt="router_settings" style='width:370.5pt;
 height:294.75pt;visibility:visible;mso-wrap-style:square' o:bordertopcolor="#4f81bd"
 o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd" o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image055.png" o:title="router_settings"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=620 height=494
src="MF65%20manual_2.2_files/image056.jpg" alt="router_settings" v:shapes="Picture_x0020_21"><![endif]></span><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></p>

<span style='font-size:16.0pt;font-family:GravurCondensed-Regular;mso-fareast-font-family:
SimSun;mso-bidi-font-family:"Times New Roman";text-transform:uppercase;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</span>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>SMS &gt; Device SMS or USIM SMS<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_23" o:spid="_x0000_i1034" type="#_x0000_t75" alt="SMS"
 style='width:275.25pt;height:130.5pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#4f81bd" o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd"
 o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image057.png" o:title="SMS"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=461 height=220
src="MF65%20manual_2.2_files/image058.jpg" alt=SMS v:shapes="Picture_x0020_23"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click New to write a new SMS<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click in the top box to add Contacts<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>You can enter Contact names in the Contacts field and
the device will search and list applicable matches<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click in the bottom box to type your message<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Send button when done<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Threaded messages (messages sent and received to the
same Contact) are displayed in the main panel.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>View SMS &gt; SMS Settings to enable delivery reports
and to check the SMS centre number (read from your SIM card)<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Phonebook<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_154" o:spid="_x0000_i1033" type="#_x0000_t75" alt="Phonebook"
 style='width:276.75pt;height:105.75pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#4f81bd" o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd"
 o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image059.png" o:title="Phonebook"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=464 height=179
src="MF65%20manual_2.2_files/image060.jpg" alt=Phonebook v:shapes="Picture_x0020_154"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click Phonebook to view your USIM card contacts.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Contacts are automatically read into the device but
you can also copy and save on your device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Select the Contact to view more details, click Edit to
make any changes, then select the Save location as Device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Contacts stored on the device can include additional
fields.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Select New to create a new contact and choose the save
location as Device or SIM card.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>SD CARD<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><b style='mso-bidi-font-weight:
normal'><span style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_22" o:spid="_x0000_i1032" type="#_x0000_t75" alt="SD Card"
 style='width:368.25pt;height:298.5pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#558ed5" o:borderleftcolor="#558ed5" o:borderbottomcolor="#558ed5"
 o:borderrightcolor="#558ed5">
 <v:imagedata src="MF65%20manual_2.2_files/image061.png" o:title="SD Card"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=616 height=500
src="MF65%20manual_2.2_files/image062.jpg" alt="SD Card" v:shapes="Picture_x0020_22"><![endif]></span></b><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Enable Web Share to share the contents of your SD card
with other users connected to your device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Read only or Read / Write access can be configured.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Custom sharing can be enabled to restrict access to
certain paths.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Press the Web Share button to view all the files. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>Information &gt; DEVICE
INFORMATION<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_41" o:spid="_x0000_i1031" type="#_x0000_t75" alt="DeviceInfomation"
 style='width:313.5pt;height:402pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#1f497d" o:borderleftcolor="#1f497d" o:borderbottomcolor="#1f497d"
 o:borderrightcolor="#1f497d">
 <v:imagedata src="MF65%20manual_2.2_files/image063.png" o:title="DeviceInfomation"/>
 <w:bordertop type="single" width="4"/>
 <w:borderleft type="single" width="4"/>
 <w:borderbottom type="single" width="4"/>
 <w:borderright type="single" width="4"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=525 height=672
src="MF65%20manual_2.2_files/image064.jpg" alt=DeviceInfomation v:shapes="Picture_x0020_41"><![endif]></span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>View the device IMEI number, Signal strength and other
details.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Information &gt; Record<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-right:1.4pt;text-align:left;
tab-stops:13.0cm;mso-layout-grid-align:none;text-autospace:none'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><span style='mso-spacerun:yes'>&nbsp;</span></span><span
style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_157" o:spid="_x0000_i1030" type="#_x0000_t75" alt="data_records"
 style='width:4in;height:102pt;visibility:visible;mso-wrap-style:square'
 o:bordertopcolor="#4f81bd" o:borderleftcolor="#4f81bd" o:borderbottomcolor="#4f81bd"
 o:borderrightcolor="#4f81bd">
 <v:imagedata src="MF65%20manual_2.2_files/image065.png" o:title="data_records"/>
 <w:bordertop type="single" width="6"/>
 <w:borderleft type="single" width="6"/>
 <w:borderbottom type="single" width="6"/>
 <w:borderright type="single" width="6"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=482 height=172
src="MF65%20manual_2.2_files/image066.jpg" alt="data_records" v:shapes="Picture_x0020_157"><![endif]></span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>View your data usage on the Record tab.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Data usage is approximate and your carrier may charge
you different data block sizes so their records and charges are likely to be
different.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Typical carrier data is charged in 1MB blocks.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Contact your carrier for more details.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>USB Installation for tethered connection<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>You can also connect your device
via the USB lead provided. The installation software is pre-loaded onto your
USB device. Simply insert the device into your computer and follow the
instructions on-screen.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Example shown for Windows
operating system.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><br>
1. Click on ¡®Open folder¡­¡¯<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp; </span><span style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;&nbsp;</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span>2. Double click Autorun.exe</span><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><br>
</span><span lang=EN-US><span style='mso-spacerun:yes'>&nbsp; </span></span><span
style='mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_2" o:spid="_x0000_i1029" type="#_x0000_t75" style='width:156pt;
 height:182.25pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image067.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=260 height=304
src="MF65%20manual_2.2_files/image068.jpg" v:shapes="Picture_x0020_2"><![endif]></span><span
lang=EN-US><span style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-spacerun:yes'>&nbsp;</span></span><span style='mso-ansi-language:
EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_34" o:spid="_x0000_i1028" type="#_x0000_t75" style='width:154.5pt;
 height:184.5pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image069.png" o:title=""
  cropright="24364f"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=258 height=308
src="MF65%20manual_2.2_files/image070.jpg" v:shapes="Picture_x0020_34"><![endif]></span><span
lang=EN-US><span style='mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
style='mso-tab-count:1'> </span></span><span lang=EN-GB style='font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>3. The installation will
create a short-cut on your desktop and open your browser at the device
homepage.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
16.0pt;font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>USB Installation notes<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The installation will create a new shortcut on your
desktop and a new program listing under Start-Programs<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>If you have problems with the installation please
contact your supplier or see our website, </span><span lang=EN-US><a
href="http://www.zte.com.au/"><span class=SpellE><span style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;color:windowtext;
text-decoration:none;text-underline:none'>zte.com.au</span></span></a></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'> for more assistance and
FAQ¡¯s or call our hotline on 1300 789 475 available between 9am and 5pm AEST.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>If you can¡¯t connect to the internet check your SIM
card is inserted correctly, contact your service provider and check your
account is active.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>To uninstall the application:<br>
Windows users: Programs &gt; Telstra Pre-Paid 3G Wi-Fi &gt; Uninstall<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>MAC Users: <o:p></o:p></span></b></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Double click the Telstra Modem CDROM on the desktop to
install the device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol;mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>¡¤<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>To uninstall, go to
Applications and run Uninstall Telstra Pre-Paid 3G Wi-Fi</span><span
lang=EN-GB style='font-family:"Harmony Display","sans-serif";mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-family:"Harmony Display","sans-serif";mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><a
name="_Toc200953897"><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Help</span></a><span style='font-size:16.0pt;
font-family:GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:
0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click Help button to access this full user guide <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Click the Help icon </span><span style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_166" o:spid="_x0000_i1027" type="#_x0000_t75" alt="Help_icon"
 style='width:15pt;height:15pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image037.png" o:title="Help_icon"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=25 height=25
src="MF65%20manual_2.2_files/image071.gif" alt="Help_icon" v:shapes="Picture_x0020_166"><![endif]></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'>&nbsp;</span>to see in context help<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l3 level1 lfo8;tab-stops:list 0cm 14.2pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Go to <span class=SpellE>zte.com.au</span> for FAQ¡¯s,
product and warranty support<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<h2 align=left style='margin:0cm;margin-bottom:.0001pt;text-align:left;
text-indent:0cm;line-height:normal;mso-list:none;tab-stops:21.0pt'><span
style='font-family:GravurCondensed-Regular;mso-fareast-font-family:SimSun;
mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><br>
BATTERY CHARGING <o:p></o:p></span></h2>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The battery can be charged
by connecting the device to the supplied AC charger or via a USB connection.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The recharge time is
typically 3-4 hours.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The battery cannot be
charged when the internal device temperature exceeds 45&ordm;C. This is a safety
requirement for Lithium Ion batteries. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Under conditions of
extended use, low coverage, high temperature or maximum data throughput, the
battery may not charge, even though the router is connected to the AC charger. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>For these situations it is
recommended that, in addition to the charger being connected, the battery is
fully charged before extended data transfers commence.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<h2 align=left style='margin:0cm;margin-bottom:.0001pt;text-align:left;
text-indent:0cm;line-height:normal;mso-list:none;tab-stops:21.0pt'><a
name="_Toc200953896"></a><a name="_Toc197227945"><span style='mso-bookmark:
_Toc200953896'><span style='font-family:GravurCondensed-Regular;mso-fareast-font-family:
SimSun;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>micro<span
style='text-transform:uppercase'>SD&#8482; MEMORY card</span></span></span></a><span
style='mso-bookmark:_Toc200953896'></span><span style='mso-bookmark:_Toc197227945'></span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:"Harmony Display","sans-serif";
mso-fareast-font-family:SimSun;mso-bidi-font-family:Arial;mso-font-kerning:
0pt;mso-ansi-language:EN-GB'><o:p></o:p></span></b></h2>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>If you use a microSD&#8482; memory card in your device your computer will
display a removable disk drive. You can use the device as an external drive to
store and transfer files.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>microSD&#8482; cards supported to 2GB are FAT 16 format.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span class=SpellE><span lang=EN-GB style='font-size:
11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>microSDHC</span></span><span lang=EN-GB
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>&#8482; cards supported to 32GB
are FAT 32 format.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>If using a memory card use the Safe Removal of Hardware process or Eject
the device. Consult your operating system guidelines.<o:p></o:p></span></p>

<span lang=EN-GB style='font-size:16.0pt;font-family:"Harmony Display","sans-serif";
mso-fareast-font-family:SimSun;mso-bidi-font-family:Arial;mso-font-kerning:
1.0pt;mso-ansi-language:EN-GB;mso-fareast-language:ZH-CN;mso-bidi-language:
AR-SA;mso-bidi-font-weight:bold'><br clear=all style='page-break-before:always'>
</span>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Troubleshooting</span><span lang=EN-GB style='font-size:16.0pt;
font-family:"Harmony Display","sans-serif";mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>If you have any problems with your connection or device please consult
the manual and check this section. If the problem still exists contact your
service provider or check our website for more details at </span><span
lang=EN-US><a href="http://www.zte.com.au/"><span class=SpellE><span
style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
color:windowtext;text-decoration:none;text-underline:none'>zte.com.au</span></span></a></span><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:10.0pt;font-family:
"Harmony Display","sans-serif";mso-bidi-font-family:Arial;mso-font-kerning:
0pt;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="99%"
 style='width:99.28%;margin-left:28.75pt;border-collapse:collapse;border:none;
 mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:
 .5pt solid windowtext'>
 <thead>
  <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;page-break-inside:avoid'>
   <td width="25%" valign=top style='width:25.4%;border-top:solid windowtext 1.0pt;
   border-left:none;border-bottom:solid windowtext 1.0pt;border-right:none;
   mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
   background:silver;padding:0cm 5.4pt 0cm 5.4pt'>
   <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
   none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
   lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
   Arial;mso-font-kerning:0pt;mso-ansi-language:EN-GB'>Problem<o:p></o:p></span></b></p>
   </td>
   <td width="34%" valign=top style='width:34.36%;border-top:solid windowtext 1.0pt;
   border-left:none;border-bottom:solid windowtext 1.0pt;border-right:none;
   mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
   background:silver;padding:0cm 5.4pt 0cm 5.4pt'>
   <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
   none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
   lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
   Arial;mso-font-kerning:0pt;mso-ansi-language:EN-GB'>Possible Causes<o:p></o:p></span></b></p>
   </td>
   <td width="40%" valign=top style='width:40.24%;border-top:solid windowtext 1.0pt;
   border-left:none;border-bottom:solid windowtext 1.0pt;border-right:none;
   mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
   background:silver;padding:0cm 5.4pt 0cm 5.4pt'>
   <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
   none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span
   lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
   Arial;mso-font-kerning:0pt;mso-ansi-language:EN-GB'>Suggested Solution<o:p></o:p></span></b></p>
   </td>
  </tr>
 </thead>
 <tr style='mso-yfti-irow:1;page-break-inside:avoid'>
  <td width="25%" valign=top style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='margin-right:-5.4pt;text-align:left;
  mso-layout-grid-align:none;text-autospace:none'><span lang=EN-GB
  style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>I cannot connect via Wi-Fi<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Security settings,
  password has been changed.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Check the security
  settings SSID and Password shown on your Security Card. If the password has been
  changed reset the router to factory defaults by holding the WPS and Power
  buttons<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;page-break-inside:avoid'>
  <td width="25%" valign=top style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='margin-right:-5.4pt;text-align:left;
  mso-layout-grid-align:none;text-autospace:none'><span lang=EN-GB
  style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>The user interface doesn¡¯t start after the device is plugged in.<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>PC configuration is not
  correct.<o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>(No <span class=SpellE>autorun</span>)<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Start the program
  manually by going Start &gt; Program Files or use the shortcut on the
  desktop.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;page-break-inside:avoid;height:36.7pt'>
  <td width="25%" rowspan=2 style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:36.7pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The device has no signal.<o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>SIM Card is locked<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:36.7pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>You have no <o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>network coverage.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:36.7pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Try moving location until
  you get good reception.<o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Try the USB extender
  cable to move the device to a higher position or different orientation.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;page-break-inside:avoid;height:42.9pt'>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:42.9pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>SIM card requires a PIN
  or PUK number.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:42.9pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Contact your service
  provider to obtain the PIN or PUK key.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;page-break-inside:avoid;height:41.9pt'>
  <td width="25%" style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:41.9pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Data connection failed.<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:41.9pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>You have no <o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>network coverage.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:41.9pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Try moving location until
  you get good reception.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;page-break-inside:avoid;height:3.6pt'>
  <td width="25%" valign=top style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The device cannot connect
  to the internet when overseas<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>You don¡¯t have
  international roaming enabled on your plan.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Consult your service
  provider before you go overseas to enable roaming.<o:p></o:p></span></p>
  <p class=MsoNormal align=left style='text-align:left;text-indent:21.0pt;
  mso-char-indent-count:2.0;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-family:Akkurat-Light;mso-bidi-font-family:Arial;
  mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7;page-break-inside:avoid;height:3.6pt'>
  <td width="25%" style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The microSD&#8482; card cannot
  be read or is not found.<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Re-insert the microSD&#8482;
  card. The maximum capacity is 32GB SDHC card<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Try another microSD&#8482; card
  and make sure the capacity and format is correct.<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8;mso-yfti-lastrow:yes;page-break-inside:avoid;
  height:3.6pt'>
  <td width="25%" style='width:25.4%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The battery goes flat
  even though I am connected to the charger<o:p></o:p></span></p>
  </td>
  <td width="34%" valign=top style='width:34.36%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The internal device
  temperature exceeds 45C so battery charging is shut down for safety reasons.<o:p></o:p></span></p>
  </td>
  <td width="40%" valign=top style='width:40.24%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:3.6pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Switch off the device and
  allow it to cool down. Operate the device in a cooler environment.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='font-size:16.0pt;font-family:GravurCondensed-Regular;text-transform:
uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;mso-fareast-language:
EN-US'>Precautions and Safety Information</span><span lang=EN-GB
style='font-family:"Harmony Display","sans-serif";mso-bidi-font-family:Arial;
mso-font-kerning:0pt;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:10.0pt;font-family:
"Harmony Display","sans-serif";mso-bidi-font-family:Arial;mso-font-kerning:
0pt;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Some electronic devices are susceptible to
electromagnetic interference. The Wi-Fi hotspot is a transmitting device and
may cause interference to sensitive electronic equipment such as audio systems,
vehicle systems and medical equipment. Please consult the manufacturer of the
other device before using the device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Operating of laptop or desktop PCs with the device may
interfere with medical devices like hearing aids and pacemakers. Please keep
the device more than 20 centimetres away from such medical devices. Turn the device
off if necessary. Consult a physician or the manufacturer of the medical device
before using near such devices.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Be aware of regulations when using the device at
places such as oil refineries or chemical factories, where there are explosive
gases or explosive products being processed. Turn off your device as
instructed.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Don¡¯t touch the antenna area unnecessarily whilst
connected. This can affect your device performance and reduce the signal
quality.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Store the device out of the reach of children. The device
may cause injury or get damaged.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The device contains sensitive electronic circuitry. Do
not expose the device to any liquids, high temperatures or shock. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Only use original accessories or accessories that are
authorised by the manufacturer. Using unauthorised accessories may affect your device¡¯s
performance or damage your device.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Avoid using the device in areas that emit
electromagnetic waves or in enclosed metallic structures <span class=SpellE>eg</span>
lifts.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>The device is not waterproof. Please keep it dry and
store it in a cool, dry place.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Don¡¯t use the device immediately after a sudden
temperature change <span class=SpellE>eg</span> from an air conditioned
environment to high temperature and humidity outside. In such cases there could
be condensing moisture inside the device which can cause internal damage.
Unplug the device and leave it for 30 minutes before use.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>Always handle the device with care. Be careful not to
drop or bend the device. <o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-left:10.5pt;text-align:left;
text-indent:-10.5pt;mso-list:l4 level1 lfo13;tab-stops:list 0cm 18.0pt;
mso-layout-grid-align:none;text-autospace:none'><![if !supportLists]><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Symbol;
mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='font-size:11.0pt;
mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-GB'>There are no user serviceable parts inside the device.
Unauthorised dismantling or repair will void the warranty.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><a
name="_Toc200953870"><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>RF SAFETY INFORMATION<o:p></o:p></span></a></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The wireless device has an
internal antenna. For optimum performance with minimum power consumption do not
shield the device or cover with any object. <br>
Covering the antenna affects signal quality and may cause the device to operate
at a higher power level than needed.<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc200953870'><span style='font-size:16.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>RADIO FREQUENCY ENERGY<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The wireless device is a
low-power radio transmitter and receiver. <br>
When switched on it intermittently transmits radio frequency (RF) energy (radio
waves). <br>
The transmit power level is optimized for best performance and automatically
reduces when there is good quality reception. <br>
Maximum power is only used at the edge of network coverage so under most
circumstances the power output is very low. <br>
Under poor network conditions the device transmits at a higher power level and
may get hot.<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc200953870'><span style='font-size:16.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'>SPECIFIC ABSORPTION RATE
(SAR)<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;
mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>The wireless device is
designed to be used in close proximity to the body. We declare that the product
detailed in this manual, and in combination with our accessories, conforms with
the essential requirements of The Radio Communications Standard
(Electromagnetic Radiation Human Exposure) 2003 and the Australian
Communications and Media Authority Section 376 of the Telecommunications Act
1997 when used at a distance of not less than 10mm from the body. The worst
case SAR result is 1.44W/Kg<o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
style='font-size:10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;
mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_135" o:spid="_x0000_i1026" type="#_x0000_t75" alt="a-tick"
 style='width:27pt;height:21.75pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image072.png" o:title="a-tick"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=45 height=36
src="MF65%20manual_2.2_files/image073.jpg" alt=a-tick v:shapes="Picture_x0020_135"><![endif]></span></span><span
style='mso-bookmark:_Toc200953870'><span lang=EN-GB style='font-size:10.0pt;
font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p></o:p></span></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bookmark:_Toc200953870'><span
lang=EN-GB style='font-size:8.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'>N14945<o:p></o:p></span></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><span
style='mso-bookmark:_Toc200953870'><span style='font-size:12.0pt;font-family:
GravurCondensed-Regular;text-transform:uppercase;mso-font-kerning:0pt;
mso-ansi-language:EN-AU;mso-fareast-language:EN-US'><o:p>&nbsp;</o:p></span></span></p>

<span style='mso-bookmark:_Toc200953870'></span>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-GB
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan;
mso-layout-grid-align:none;text-autospace:none'><span lang=EN-GB
style='mso-bidi-font-size:10.5pt;font-family:Akkurat-Light;mso-bidi-font-family:
Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormalIndent align=left style='text-align:left;text-indent:0cm;
mso-char-indent-count:0;mso-pagination:widow-orphan;tab-stops:297.0pt 306.0pt'><a
name="_Toc200953873"><span style='font-size:16.0pt;font-family:GravurCondensed-Regular;
text-transform:uppercase;mso-font-kerning:0pt;mso-ansi-language:EN-AU;
mso-fareast-language:EN-US'>Technical Specifications</span></a><span
style='mso-bookmark:_Toc200953873'></span><span lang=EN-GB style='font-family:
"Harmony Display","sans-serif";mso-bidi-font-family:Arial;mso-font-kerning:
0pt;mso-ansi-language:EN-GB;mso-bidi-font-weight:bold'><o:p></o:p></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="97%"
 style='width:97.54%;border-collapse:collapse;border:none;mso-border-top-alt:
 solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;mso-yfti-tbllook:
 480;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:13.3pt'>
  <td width="28%" rowspan=2 style='width:28.18%;border-top:solid windowtext 1.0pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:none;
  mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:13.3pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;
  mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'>Network compatibility<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-top:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:13.3pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>UMTS 850,
  2100 MHz <o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;height:17.15pt'>
  <td width="71%" style='width:71.82%;border:none;padding:0cm 5.4pt 0cm 5.4pt;
  height:17.15pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>GSM 850,
  900, 1800, 1900 MHz<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;height:11.55pt'>
  <td width="28%" style='width:28.18%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:11.55pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-GB
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;
  mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Dimensions<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border-top:solid windowtext 1.0pt;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:none;
  mso-border-top-alt:solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt;height:11.55pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>102 x 50 x
  13.7mm. Approx 75g<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;height:2.85pt'>
  <td width="28%" rowspan=3 style='width:28.18%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:2.85pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-pagination:widow-orphan'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Data Rates*<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;padding:0cm 5.4pt 0cm 5.4pt;
  height:2.85pt'></td>
 </tr>
 <tr style='mso-yfti-irow:4;height:2.85pt'>
  <td width="71%" style='width:71.82%;border:none;padding:0cm 5.4pt 0cm 5.4pt;
  height:2.85pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  text-indent:.45pt;mso-char-indent-count:.04;tab-stops:0cm;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;
  mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'>HSPA+ Mode up to 21.6Mb/s<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;height:4.15pt'>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:4.15pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>HSPA+ Mode
  up to 5.76Mb/s<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;height:10.8pt'>
  <td width="28%" style='width:28.18%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:10.8pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;
  mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'>Voltage<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:10.8pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>5V <o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7;height:23.05pt'>
  <td width="28%" style='width:28.18%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:23.05pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;
  mso-bidi-font-size:12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:
  Arial;mso-ansi-language:EN-GB'>Current<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:23.05pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Resting:
  100mA rms. Nominal 500mA <span class=SpellE>rms</span><o:p></o:p></span></p>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm;mso-layout-grid-align:none;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Max: 700mA <span
  class=SpellE>rms</span><o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8;height:22.3pt'>
  <td width="28%" style='width:28.18%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:22.3pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Operating
  systems<o:p></o:p></span></p>
  </td>
  <td width="71%" valign=top style='width:71.82%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:22.3pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>Windows 8 (not RT), 7, XP SP3, Vista<o:p></o:p></span></p>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>MAC OS X 10.5 and above<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:9;height:11.55pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:11.55pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Memory card<o:p></o:p></span></p>
  </td>
  <td width="71%" valign=top style='width:71.82%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:11.55pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>Up to 32GB <span class=SpellE>microSDHC</span>&#8482;<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:10;height:12.2pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:12.2pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Operating
  Temperature<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:12.2pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>-5&ordm;C to +45&ordm;C<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:11;height:12.2pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:12.2pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Battery
  capacity<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:12.2pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>1500mAh<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:12;height:12.2pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:12.2pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Charge time<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:12.2pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>3 hours with charger, 4 hours via USB<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:13;height:12.2pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:12.2pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Standby
  time**<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:12.2pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>Up to 100 hours<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:14;mso-yfti-lastrow:yes;height:12.2pt'>
  <td width="28%" valign=top style='width:28.18%;border:none;border-bottom:
  solid windowtext 1.0pt;mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:
  solid windowtext .5pt;mso-border-bottom-alt:solid windowtext .5pt;padding:
  0cm 5.4pt 0cm 5.4pt;height:12.2pt'>
  <p class=MsoNormal align=left style='text-align:left;text-autospace:none'><span
  lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:
  Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>Operation
  time**<o:p></o:p></span></p>
  </td>
  <td width="71%" style='width:71.82%;border:none;border-bottom:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-top-alt:solid windowtext .5pt;
  mso-border-bottom-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt;
  height:12.2pt'>
  <p class=MsoNormal align=left style='margin-right:24.0pt;text-align:left;
  tab-stops:0cm'><span lang=EN-GB style='font-size:11.0pt;mso-bidi-font-size:
  12.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
  EN-GB'>Up to 4 hours use<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:9.0pt;font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'>*</span><span
style='font-size:11.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Harmony-Display;
mso-ansi-language:EN-AU;mso-fareast-language:EN-AU'> Download/upload speeds
will vary due to distance from the cell, local conditions, user numbers, file
source, hardware, software and other factors.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:11.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Harmony-Display;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU'>** Operation and Standby times depend on a number of conditions and are
measured in ideal conditions.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Harmony-Display;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Harmony-Display;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:9.0pt;font-family:Akkurat-Light;
mso-bidi-font-family:Harmony-Display;mso-ansi-language:EN-AU;mso-fareast-language:
EN-AU'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-size:10.0pt;font-family:Akkurat-Light;
mso-ansi-language:EN-AU;mso-fareast-language:EN-AU;mso-no-proof:yes'><!--[if gte vml 1]><v:shape
 id="Picture_x0020_122" o:spid="_x0000_i1025" type="#_x0000_t75" alt="ZTE no Chinese hi-res"
 style='width:18pt;height:11.25pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="MF65%20manual_2.2_files/image074.jpg" o:title="ZTE no Chinese hi-res"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=30 height=19
src="MF65%20manual_2.2_files/image075.jpg" alt="ZTE no Chinese hi-res" v:shapes="Picture_x0020_122"><![endif]></span><span
style='font-size:10.0pt;font-family:Akkurat-Light'><span
style='mso-spacerun:yes'>&nbsp;</span></span><span lang=EN-GB style='font-size:
10.0pt;font-family:Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:
EN-GB'>Copyright &copy; 2013. All rights reserved.<br>
No part of this publication may be excerpted, reproduced, translated or
utilized in any form or by any means, electronic or mechanical, including
photocopying and microfilm, without the prior written permission of ZTE
Corporation.<br>
<br>
The manual is published by ZTE Corporation. We reserve the right to make
modifications on errors or update specifications without prior notice.<br>
<br>
Version 2.2<span style='mso-spacerun:yes'>&nbsp; </span><span style='mso-tab-count:
1'>&nbsp;&nbsp; </span><span style='mso-spacerun:yes'>&nbsp;&nbsp;</span><a
name="stylerid1_2E1_2E1_2E3_2E1">September 2013<o:p></o:p></a></span></p>

<span style='mso-bookmark:stylerid1_2E1_2E1_2E3_2E1'></span>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:9.0pt;font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:9.0pt;font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-GB style='font-size:9.0pt;font-family:
Akkurat-Light;mso-bidi-font-family:Arial;mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
ï»¿<div class="row-fluid paddingtop15 floatleft" id="div-nosimcard">
    <div class="span3" data-bind="visible:isHomePage()">
        <form id="frmHome">
            <div class="row-fluid">
                <div class="span12 table paddingtop15 paddingbottom15 hide">
                    <div class="row-fluid side-center marginbottom10">
                        <img id="imgState" data-bind="attr:{src: imagePath }"/>
                    </div>
                    <div class="row-fluid">
                        <label trans="current_flux" class="span7 side-right"></label>
                        <label class="span5" id="tdCurrentFlux">0B</label>
                    </div>
                    <div class="row-fluid">
                        <label trans="connected_time" class="span7 side-right"></label>
                        <label class="span5" id="tdConnectedTime">00:00:00</label>
                    </div>
                    <div class="row-fluid">
                        <label trans="flux_up" class="span7 side-right"></label>
                        <label class="span5" id="tdUpSpeed">0B/s</label>
                    </div>
                    <div class="row-fluid">
                        <label trans="flux_down" class="span7 side-right"></label>
                        <label class="span5" id="tdDownSpeed">0B/s</label>
                    </div>
                    <div class="row-fluid side-center margintop15 marginbottom10">
                        <input type="submit" class="btn-1 btn_connect disabled" trans="connect" disabled="disabled"/>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div data-bind="attr: {'class': isHomePage()==true?'form-body span9':'form-body span9 fixContainerWidth'}">
        <div class="form-title" trans="no_sim_card_title"></div>
        <div class="content" data-bind="visible:page()==pageState.NO_SIM">
            <div class="colorRed font18" trans="no_sim_card_message"></div>
        </div>
        <form id="frmPIN" data-bind="visible:page()==pageState.WAIT_PIN">
            <div class="form-body">
                <div class="content">
                    <div class="prompt">
                        <p trans="enter_pin"></p>

                        <p class="important-prompt" data-bind="visible:pinNumber()>1">
                            <span trans="attempts_left"></span> <span data-bind='text:pinNumber'></span>
                        </p>

                        <p class="important-prompt" data-bind="visible:pinNumber()==1" trans="last_enter_pin"></p>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for='txtPIN' trans='pin'></label>

                        <div class="span8">
                            <input id='txtPIN' autocomplete="off" name="txtPIN" type="password" class="required"
                                   maxlength='8' data-bind="value:PIN, valueUpdate: 'keypress'"/>
                        </div>
                    </div>
                    <div class="form-buttons">
                        <input id="btnPinApply" class="btn-1 " type="submit" trans="apply"/>
                    </div>
                </div>
            </div>
        </form>
        <form id="frmPUK" data-bind="visible:page()==pageState.WAIT_PUK">
            <div class="form-body">
                <div class="content">
                    <div class="prompt">
                        <p trans="enter_puk"></p>

                        <p class="important-prompt" data-bind="visible:pukNumber()>1">
                            <span trans="attempts_left"></span> <span data-bind='text:pukNumber'></span>
                        </p>

                        <p class="important-prompt" data-bind="visible:pukNumber()==1" trans="last_enter_pin"></p>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for='txtPUK' trans='puk'></label>

                        <div class="span8">
                            <input id='txtPUK' autocomplete="off" name="txtPUK" type="password" class="required"
                                   maxlength='8'
                                   data-bind="value:PUK, valueUpdate: 'keypress'"/>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for='txtNewPIN' trans='new_pin'></label>

                        <div class="span8">
                            <input id='txtNewPIN' autocomplete="off" name="txtNewPIN" type="password" class="required"
                                   maxlength='8'
                                   data-bind="value:newPIN, valueUpdate: 'keypress'"/>
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for='txtConfirmPIN' trans='confirm_pin'></label>

                        <div class="span8">
                            <input id='txtConfirmPIN' autocomplete="off" name="txtConfirmPIN" type="password"
                                   class="required"
                                   maxlength='8' data-bind="value:confirmPIN, valueUpdate: 'keypress'"/>
                        </div>
                        <div class="clear"></div>
                    </div>
                    <div class="form-buttons">
                        <input id="btnPUKApply" class="btn-1 " type="submit" trans="apply"/>
                    </div>
                </div>
            </div>
        </form>
        <div class="content" data-bind="visible:page()==pageState.PUK_LOCKED">
            <div class="colorRed font18" trans="no_sim_card_message"></div>
        </div>
        <div id="divStation" data-bind="visible:hasWifi() && isHomePage()" class="hide">
            <div class="form-title" trans="station_info"></div>
            <div class="content">
                <div class="ko-grid-container marginnone">
                    <table cellPadding="0" cellSpacing="0" id="tabStation" class="ko-grid colorHoverTable marginnone">
                        <thead>
                        <tr>
                            <th trans="station_number"></th>
                            <th trans="host_name"></th>
                            <th trans="mac_address"></th>
                        </tr>
                        </thead>
                        <tbody data-bind="foreach:deviceInfo">
                        <tr data-bind="css:{odd:$index()%2==1, even:$index()%2==0}">
                            <td data-bind="text:hostName==''?'&nbsp;':$index()+1"></td>
                            <td data-bind="text:hostName"></td>
                            <td data-bind="text:macAddress"></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="home_note"></li>
                </ul>
            </div>
        </div>
    </div>
</div>/**
 * sim æ¨¡å
 * @module simVM
 * @class simVM
 */
define(['knockout', 'service', 'jquery', 'config/config', 'home'], function (ko, service, $, config, home) {
    function simVM() {
        var self = this;
        self.pageState = {NO_SIM:0, WAIT_PIN:1, WAIT_PUK:2, PUK_LOCKED:3, LOADING:4};

        self.deviceInfo = ko.observable([]);
        self.hasWifi = ko.observable(config.HAS_WIFI);

        var info = service.getLoginData();
        self.PIN = ko.observable();
        self.PUK = ko.observable();
        self.newPIN = ko.observable();
        self.confirmPIN = ko.observable();
        self.pinNumber = ko.observable(info.pinnumber);
        self.pukNumber = ko.observable(info.puknumber);
		
		self.imagePath = ko.observable("img/disconnect.png");
		self.isHomePage = ko.observable(false);
		if(window.location.hash=="#home"){
			self.isHomePage(true);
		}

        var state = computePageState(info);
        self.page = ko.observable(state);
        if (state == self.pageState.LOADING) {
            addTimeout(refreshPage, 500);
        }
        /**
         * éªè¯è¾å¥PINäºä»¶å¤ç
         *
         * @event enterPIN
         */
        self.enterPIN = function () {
            showLoading();
            self.page(self.pageState.LOADING);
            var pin = self.PIN();
            service.enterPIN({
                PinNumber:pin
            }, function (data) {
                if (!data.result) {
                    hideLoading();
                    showAlert("pin_error", function () {
                        refreshPage();
                    });
                    self.PIN('');
                }
                refreshPage();
                if (self.page() == self.pageState.WAIT_PUK) {
                    hideLoading();
                }
            });
        };
        /**
         * è¾å¥PUKè®¾ç½®æ°PINäºä»¶å¤ç
         *
         * @event enterPUK
         */
        self.enterPUK = function () {
            showLoading();
            self.page(self.pageState.LOADING);
            var newPIN = self.newPIN();
            var confirmPIN = self.confirmPIN();
            var params = {};
            params.PinNumber = newPIN;
            params.PUKNumber = self.PUK();
            service.enterPUK(params, function (data) {
                if (!data.result) {
                    hideLoading();
                    showAlert("puk_error", function () {
                        refreshPage();
                        if (self.page() == self.pageState.PUK_LOCKED) {
                            hideLoading();
                        }
                    });
                    self.PUK('');
                    self.newPIN('');
                    self.confirmPIN('');
                }else{
                    refreshPage();
                    if (self.page() == self.pageState.PUK_LOCKED) {
                        hideLoading();
                    }
                }
            });
        };
        /**
         * å·æ°é¡µé¢ç¶æ
         *
         * @method refreshPage
         */
        function refreshPage() {
            var data = service.getLoginData();
            var state = computePageState(data);
            if (state == self.pageState.LOADING) {
                addTimeout(refreshPage, 500);
            } else {
                self.page(state);
                self.pinNumber(data.pinnumber);
                self.pukNumber(data.puknumber);
            }
        }

        /**
         * æ ¹æ®ç»å½ç¶æåSIMå¡ç¶æè®¾ç½®é¡µé¢ç¶æ
         * @method computePageState
         */
        function computePageState(data) {
            var state = data.modem_main_state;
            if (state == "modem_sim_undetected" || state == "modem_undetected" || state == "modem_sim_destroy") {
                return self.pageState.NO_SIM;
            } else if ($.inArray(state, config.TEMPORARY_MODEM_MAIN_STATE) != -1) {
                return self.pageState.LOADING;
            } else if (state == "modem_waitpin") {
                return self.pageState.WAIT_PIN;
            } else if ((state == "modem_waitpuk" || data.pinnumber == 0) && (data.puknumber != 0)) {
                return self.pageState.WAIT_PUK;
            } else if ((data.puknumber == 0 || state == "modem_sim_destroy")
                && state != "modem_sim_undetected" && state != "modem_undetected") {
                return self.pageState.PUK_LOCKED;
            } else {
                location.reload();
            }
        }


    }

    function init() {
        var container = $('#container')[0];
        ko.cleanNode(container);
        var vm = new simVM();
        ko.applyBindings(vm, container);

        $('#frmPIN').validate({
            submitHandler:function () {
                vm.enterPIN();
            },
            rules:{
                txtPIN:"pin_check"
            }
        });

        $('#frmPUK').validate({
            submitHandler:function () {
                vm.enterPUK();
            },
            rules:{
                txtNewPIN:"pin_check",
                txtConfirmPIN:{equalTo:"#txtNewPIN"},
                txtPUK:"puk_check"
            }
        });

        if (vm.hasWifi()) {
            home.refreshAttachedDevicesInfo(vm);
            addInterval(function () {
                home.refreshAttachedDevicesInfo(vm);
            }, 1000);
        }
    }

    return {
        init:init
    };
});<form id="frmPassword">
    <div class="form-body">
        <div class="form-title" trans="password_management"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="current_password" for="txtCurrentPassword"></label>
                <div class="span8">
                    <input id="txtCurrentPassword" name="txtCurrentPassword" type="password" data-bind="value: currentPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="new_password" for="txtNewPassword"></label>
                <div class="span8">
                    <input id="txtNewPassword" name="txtNewPassword"  type="password" data-bind="value: newPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="confirm_password" for="txtConfirmPassword"></label>
                <div class="span8">
                <input id="txtConfirmPassword" name="txtConfirmPassword" type="password" data-bind="value: confirmPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input id="btnPwdApply" type="submit" class="btn-1 " trans="apply"/>
            <input id="btnPwdCancel" type="button" data-bind="click: cancel" class="btn-1 " trans="cancel"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="password_note_info"></li>
                <li trans="password_note_valid"></li>
                <li trans="password_note_input"></li>
            </ul>
        </div>
    </div>
</form><form id="frmPassword">
    <div class="form-body">
        <div class="form-title" trans="password_management"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="current_password" for="txtCurrentPassword"></label>
                <div class="span8">
                    <input id="txtCurrentPassword" name="txtCurrentPassword" type="password" data-bind="value: currentPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="new_password" for="txtNewPassword"></label>
                <div class="span8">
                    <input id="txtNewPassword" name="txtNewPassword"  type="password" data-bind="value: newPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="confirm_password" for="txtConfirmPassword"></label>
                <div class="span8">
                <input id="txtConfirmPassword" name="txtConfirmPassword" type="password" data-bind="value: confirmPassword" class="required" minlength="4" maxlength="32"/>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input id="btnPwdApply" type="submit" class="btn-1 " trans="apply"/>
            <input id="btnPwdCancel" type="button" data-bind="click: cancel" class="btn-1 " trans="cancel"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="password_note_info"></li>
                <li trans="password_note_valid"></li>
                <li trans="password_note_input"></li>
            </ul>
        </div>
    </div>
</form>/**
 * å¯ç ç®¡ç æ¨¡å
 * @module password
 * @class password
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

    function ($, ko, config, service, _) {

        /**
         * password ViewModel
         * @class passwordModel
         */
        function passwordModel() {
            var self = this;
            self.currentPassword = ko.observable();
            self.newPassword = ko.observable();
            self.confirmPassword = ko.observable();
            /**
             * ä¿®æ¹å¯ç 
             * @event changePassword
             */
            self.changePassword = function () {
                var para = {
                    oldPassword:self.currentPassword(),
                    newPassword:self.newPassword()
                };
                showLoading();
                service.changePassword(para, function (data) {
                    self.cancel();
                    if (data && data.result == true) {
                        successOverlay();
                    } else {
                        if (data && data.errorType == "badPassword") {
                            hideLoading();
                            showAlert("current_password_error",function(){
                                $("#txtCurrentPassword").focus();
                            });
                        } else {
                            errorOverlay();
                        }
                    }
                });
            };
            /**
             * æ¸é¤è¾å¥çå¯ç 
             * @event cancel
             */
            self.cancel = function () {
                self.currentPassword("");
                self.newPassword("");
                self.confirmPassword("");
            };

        }

        /**
         * åå§å ViewModelï¼å¹¶è¿è¡ç»å®
         * @method init
         */
        function init() {
            var vm = new passwordModel();
            ko.applyBindings(vm, $('#container')[0]);

            $('#frmPassword').validate({
                submitHandler:function () {
                    vm.changePassword();
                },
                rules:{
                    txtCurrentPassword:"password_check",
                    txtNewPassword:"password_check",
                    txtConfirmPassword:{ equalTo:"#txtNewPassword"}
                }
            });

        }

        return {
            init:init
        }
    });
<div class="form-body">
    <form id="frmPhoneBook">
        <div id="editArea"
             data-bind="visible: pageState()==1 || pageState()==2 || pageState()==3,attr:{ bookid : index}">
            <div class="form-title" data-bind='attr:{trans:transEditAreaTitle}'></div>
            <div class="content">
                <div class="row-fluid">
                    <label class="span4 side-right" trans='save_location'></label>
                    <div class="span8">
                        <select transid='save_location' id="selLocation"
                                data-bind="visible:pageState()<=2,options: locations, value: selectedLocation, optionsText: transOption('save_location'), optionsValue: 'value'"></select>
                        <label class="label-content"
                               data-bind="visible:pageState()==3,text:locationTransText,attr:{trans:locationTrans}"></label>
                    </div>
                </div>
                <div class="row-fluid" data-bind="visible:pageState()<=2">
                    <label class="span4 side-right" for="txtName" trans="name"></label>
                    <div class="span8">
                        <input data-bind="value: name, valueUpdate: 'afterkeydown',attr:{maxlength:nameMaxLength}"
                               type="text" name="txtName" id="txtName" class="required" maxlength="22"/>
                    </div>
                </div>
                <div class="row-fluid" data-bind="visible:pageState()==3">
                    <label class="span4 side-right" trans="name"></label>
                    <div class="span8">
                        <label class="label-content" data-bind="text:name"></label>
                    </div>
                </div>
                <div class="row-fluid" data-bind="visible:pageState()<=2">
                    <label class="span4 side-right" for="txtMobile" trans="mobile_phone_number"></label>
                    <div class="span8">
                    <input type="text" id="txtMobile" name="txtMobile" class="required"
                           data-bind="value: mobile_phone_number,valueUpdate: 'afterkeydown',attr:{maxlength:mobileMaxLength}"/>
                    </div>
                </div>
                <div class="row-fluid" data-bind="visible:pageState()==3">
                    <label class="span4 side-right" for="txtMobile" trans="mobile_phone_number"></label>
                    <div class="span8">
                        <label class="label-content" data-bind="text:mobile_phone_number"></label>
                    </div>
                </div>
                <div class="row-fluid" data-bind='visible: homeMaxLength() != "0"'>
                    <label class="span4 side-right" for="txtHomeNumber" trans="home_phone_number"></label>
                    <div class="span8">
                        <input type="text" id="txtHomeNumber" name="txtHomeNumber" maxlength="40"
                               data-bind="visible:pageState()<=2,value: home_phone_number"/>
                        <label class="label-content" data-bind="visible:pageState()==3,text:home_phone_number"></label>
                    </div>
                </div>
                <div class="row-fluid" data-bind='visible: officeMaxLength() != "0"'>
                    <label class="span4 side-right" for="txtOfficeNumber" trans="office_phone_number"></label>
                    <div class="span8">
                        <input type="text" id="txtOfficeNumber" name="txtOfficeNumber"
                               data-bind="visible:pageState()<=2,value: office_phone_number" maxlength="40"/>
                        <label class="label-content" data-bind="visible:pageState()==3,text:office_phone_number"></label>
                    </div>
                </div>
                <div class="row-fluid" data-bind='visible: emailMaxLength() != "0"'>
                    <label class="span4 side-right" for="txtMail" trans="mail"></label>
                    <div class="span8">
                        <input type="text" id="txtMail" name="txtMail" data-bind="visible:pageState()<=2,value: mail"
                               maxlength="30"/>
                        <label class="label-content" data-bind="visible:pageState()==3,text:mail"></label>
                    </div>
                </div>
                <div class="row-fluid hide" data-bind='visible: selectedLocation() != "0"'>
                    <label class="span4 side-right" trans='group'></label>
                    <div class="span8">
                        <select transid='group' id="group"
                                data-bind="visible:pageState()<=2,options: groups, value: selectedGroup, optionsText: transOption('group'), optionsValue: 'value'"></select>
                        <label data-bind="visible:pageState()==3,text:groupTransText,attr:{trans:groupTrans}"
                               class="label-content"></label>
                    </div>
                </div>
            </div>
            <div class="form-buttons">
                <input type="button" class="btn-1 " trans='edit' data-bind="visible:pageState()==3,click:openEditPage"/>
                <input type="button" class="btn-1 " trans='delete' data-bind="visible:pageState()==3,click:deleteBook"/>
                <input type="submit" class="btn-1 " trans='save' data-bind="visible:pageState()<=2"/>
                <input type="button" class="btn-1 " trans='send_sms'
                       data-bind="visible:pageState()==3 && hasSms(),click:openSendMessagePage"/>
                <input type="button" class="btn-1 " data-bind='click: clear' trans='back'/>
            </div>
        </div>
        <div data-bind="visible: pageState()==0">
            <div class="form-title">
                <span trans="phonebook"></span>
                <span data-bind='text: phoneBookCapacity'></span>
                <span id="simUsed" data-bind="visible:false,text:capacity().simUsed"></span>
                <span id="deviceUsed" data-bind="visible:false,text:capacity().deviceUsed"></span>
                <span id="simCapacity" data-bind="visible:false,text:capacity().simCapacity"></span>
                <span id="deviceCapacity" data-bind="visible:false,text:capacity().deviceCapacity"></span>
            </div>
            <div class="row-fluid paddingright10 paddingtop10">
                <div class="span9">
                    <input type="button" trans="new" class="btn-1 " data-bind="click: openNewPage,enable:!initFail()"/>
                    <input type="button" trans="send_sms" class="btn-1 "
                           data-bind="visible: hasSms(), click: openSendMessagePage,enable:canSend(),css:{'disabled':!canSend()}"/>
                    <!--<input type="button" trans="edit" class="btn-1"-->
                    <!--data-bind="click: openEditPage ,enable:hasData(),css:{'disabled':!hasData()"/>-->
                    <input type="button" trans="delete" class="btn-1 "
                           data-bind="click: deleteBooks ,enable:hasChecked(),css:{'disabled':!hasChecked()}"/>
                    <input type="button" trans="delete_all" class="btn-1 "
                           data-bind="click: deleteAllBooks ,enable:hasData(),css:{'disabled':!hasData()}"/>
                    <!--<input type="button" trans="view" class="btn-1"-->
                    <!--data-bind="click: openViewPage,,enable:hasData(),css:{'disabled':!hasData()"/>-->
                </div>
                <div class='span3 side-right positionrelative'>
                    <div class='ko-grid-search'>
                        <img src='./img/search.png'>
                        <input type='text' id='ko_grid_search_txt' class='ko-grid-search-txt-default width102 noDefaultFocus'
                               data-bind="value:gridTemplate.searchKey,valueUpdate: 'afterkeydown',click:searchTextClick,event:{blur:searchTextBlur}"
                               autocomplete='off' trans='search' maxlength="40"/>
                        <img id="clearSearchKey" class='cursor-pointer' src='./img/delete.png' data-bind='click:clearSearchKey'/>
                    </div>
                </div>
                <div class='clear'></div>
            </div>
            <div id="books" data-bind="simpleGrid: gridTemplate"></div>
        </div>
    </form>
    <form id="frmSendMsg">
        <div id="sendMessage" data-bind="visible: pageState()==4">
            <div class="form-title" trans="new_message"></div>
            <div class="content">
                <div class="row-fluid">
                    <label class="span2 side-right" trans='send_numbers'></label>
                    <div class="span10">
                            <input type="text" class="required hide" value="test"/>
                            <div id="chosenUserList">
                                <select id="chosenUserSelect" multiple class="chzn-select-deselect width540"  data-bind="event:{change: draftListenerEvent}"></select>
                            </div>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span2 side-right" trans='contents'></label>
                    <div class="span10">
                        <textarea id="txtSmsContent" name="txtSmsContent" class="width535 height150"
                                  data-bind="value:messageContent,valueUpdate: 'afterkeydown'"></textarea>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span2 side-right"></label>
                    <div class="span10">
                            <div class="row-fluid width535 padding4">
                                <div class="span7">
                                    <span id="msgCount" class="paddingleft10" data-bind="text:messageCount"></span>
                                    <span class="error-msg" data-bind="visible:showErrorInfo"
                                                          trans="sms_contact_required"></span>
								</div>
                                <div class="span5 side-right">
                                    <input type="button" trans="send" class="btn-1 " data-bind="click:sendMessage"/>
                                    <span class="paddingright10"><input type="button" trans="back" class="btn-1 " data-bind="click:clear"/></span>
                                </div>
                            </div>
                    </div>
                </div>
            </div>

        </div>
    </form>
</div>

/**
 * phoneBoook æ¨¡å
 * @module phoneBoook
 * @class phoneBoook
 */

define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore', 'lib/jquery/chosen.jquery'],

    function ($, ko, config, service, _, chosen) {

        var locationValue = {SIM:"0", DEVICE:"1"};
        var pageState = {LIST:0, NEW:1, EDIT:2, VIEW:3, SEND_MSM:4};

        var saveLocationOpts = function (hasSIMCard) {
            var opts = [];
            opts.push(new Option($.i18n.prop("device_book"), locationValue.DEVICE));
            if (hasSIMCard) {
                opts.push(new Option($.i18n.prop("sim_book"), locationValue.SIM));
            }
            return opts;
        };

        function getCurrentGroup() {
            var group = window.location.hash.toLowerCase().replace("#group_", "");
            if (group == "#phonebook") {
                return "all";
            }
            return group;
        }

        var templateColumns = {
            cardColumns:[
                { rowText:"index", display:false},
                { rowText:"name"},
                { rowText:"mobile_phone_number"},
                { rowText:"home_phone_number"}
            ],
            listColumns:[
                { columnType:"checkbox", headerTextTrans:"number", rowText:"index", width:"10%" },
                { headerTextTrans:"name", rowText:"name", width:"25%", sortable:true },
                { columnType:"image", headerTextTrans:"save_location", rowText:"imgLocation", width:"20%", sortable:true},
                { headerTextTrans:"mobile_phone_number", rowText:"mobile_phone_number", width:"30%", sortable:true }
                //{ headerTextTrans:"group", rowText:"transGroup", width:"15%", sortable:true, needTrans:true}
            ]
        };

        var groupOpts = function () {
            var opts = [];
            opts.push(new Option($.i18n.prop("common"), "common"));
            opts.push(new Option($.i18n.prop("family"), "family"));
            opts.push(new Option($.i18n.prop("friend"), "friend"));
            opts.push(new Option($.i18n.prop("colleague"), "colleague"));
            return opts;
        };

        var _phoneBookStopSMSSending = false;

        /**
         * phoneBookViewModel
         * @class phoneBookVM
         */
        function phoneBookVM() {
            var self = this;
            var tmpSelectedIds;
            var opt;
            var tmpBooks={};
            //property for common
            self.pageState = ko.observable(pageState.LIST);
            self.initFail = ko.observable(true);
            self.hasSms = ko.observable(config.HAS_SMS);

            var smsHasCapability = true;
            var smsLeftCount = 0;

            //property for list
            var capacity = {
                simMaxNameLen:0,
                simMaxNumberLen:0,
                simMaxAnrLen:0,
                simMaxAnr1Len:0,
                simMaxEmailLen:0,
                simMaxSneLen:0,
                IsSimCardFull:true,
                IsDeviceFull:true,
                Used:0,
                Capacity:0,
                Ratio:"(0/0)"
            };
            self.capacity = ko.observable(capacity);
            self.phoneBookCapacity = ko.observable(capacity.Ratio);
            self.books = ko.observableArray();

            self.gridTemplate = new ko.simpleGrid.viewModel({
                tableClass:"table-fixed",
                data:self.books(),
                idName:"index",
                columns:templateColumns.listColumns,
                defaultSortField:"name",
                defaultSortDirection:"ASC",
                pageSize:10,
                tmplType:'list',
                searchColumns:["name", "mobile_phone_number"],
                primaryColumn:"mobile_phone_number",
                showPager:true,
                rowClickHandler:function (dataId) {
                    self.editBooks(dataId, 'view');
                },
                deleteHandler:function (dataId) {
                    self.deleteOneBook(dataId);
                },
                changeTemplateHandler:function () {
                    self.changeTemplate();
                }
            });

            //property for edit or new
            self.locations = ko.observableArray();
            self.originLocation = "";
            self.selectedLocation = ko.observable(locationValue.DEVICE);
            self.locationTrans = ko.observable();
            self.locationTransText = ko.observable();
            self.index = ko.observable(-1);
            self.name = ko.observable("");
            self.nameMaxLength = ko.computed(function () {
                var max = getNameMaxLength();
                var name = self.name().substring(0, max);
                self.name(name);
                return getNameMaxLength();
            });
            function getNameMaxLength() {
                var max = 22;
                if (self.selectedLocation() == locationValue.DEVICE) {
                    max = 22;
                } else {
                    //å¯¹"^"éè¦æç§2ä¸ªå­ç¬¦å¤ç
                    var encodeType = getEncodeType(self.name());
                    if ("UNICODE" == encodeType.encodeType || encodeType.extendLen > 0) {
                        max = (self.capacity().simMaxNameLen / 2) - 1;
                    } else {
                        max = self.capacity().simMaxNameLen;
                    }
                }
                return max;
            }

            self.mobile_phone_number = ko.observable("");
            self.mobileMaxLength = ko.computed(function () {
                var max = getMobileMaxLength();
                var mobileNumber = self.mobile_phone_number().substring(0, max);
                self.mobile_phone_number(mobileNumber);
                return getMobileMaxLength();
            });
            function getMobileMaxLength() {
                var max = 40;
                if (self.selectedLocation() == locationValue.DEVICE) {
                    max = 40;
                } else {
                    max = self.capacity().simMaxNumberLen;
                }
                return max;
            }

            self.home_phone_number = ko.observable("");
            self.homeMaxLength = ko.computed(function(){
                var max = getHomeMaxLength();
                var homeNumber = self.home_phone_number().substring(0,max);
                self.home_phone_number(homeNumber);
                return getHomeMaxLength();
            });
            function getHomeMaxLength(){
                var max = 40;
                if(self.selectedLocation() == locationValue.DEVICE){
                    max = 40;
                }else{
                    max = self.capacity().simMaxAnrLen;
                }
                return max;
            }
            self.office_phone_number = ko.observable("");
            self.officeMaxLength = ko.computed(function(){
                var max = getOfficeMaxLength();
                var officeNumber = self.office_phone_number().substring(0,max);
                self.office_phone_number(officeNumber);
                return getOfficeMaxLength();
            });
            function getOfficeMaxLength(){
                var max = 40;
                if(self.selectedLocation() == locationValue.DEVICE){
                    max = 40;
                }else{
                    max = self.capacity().simMaxAnr1Len;
                }
                return max;
            }
            self.mail = ko.observable("");
            self.emailMaxLength = ko.computed(function(){
                var max = getEmailMaxLength();
                var email = self.mail().substring(0,max);
                self.mail(email);
                return getEmailMaxLength();
            });
            function getEmailMaxLength(){
                var max = 30;
                if(self.selectedLocation() == locationValue.DEVICE){
                    max = 30;
                }else{
                    max = self.capacity().simMaxEmailLen;
                }
                return max;
            }
            self.transEditAreaTitle = ko.dependentObservable(function () {
                var state = self.pageState();
                if (state == pageState.EDIT) {
                    return "edit";
                } else if (state == pageState.NEW) {
                    return "new";
                } else if (state == pageState.VIEW) {
                    return "view";
                }
            });
            var groups = groupOpts();
            self.groups = ko.observableArray(groups);
            self.selectedGroup = ko.observable();
            self.groupTrans = ko.observable();
            self.groupTransText = ko.observable();

            //property for sendMessage
            self.showErrorInfo = ko.observable(false);
            self.messageContent = ko.observable("");
            self.messageCount = ko.computed(function () {
                var msgInput = $("#txtSmsContent", "#sendMessage");
                var msgInputDom = msgInput[0];
                self.messageContent();
                var strValue = msgInput.val();
                var encodeType = getEncodeType(strValue);
                var maxLength = encodeType.encodeType == 'UNICODE' ? 335 : 765;
                if (strValue.length + encodeType.extendLen > maxLength) {
                    var scrollTop = msgInputDom.scrollTop;
                    var insertPos = getInsertPos(msgInputDom);
                    var moreLen = strValue.length + encodeType.extendLen - maxLength;
                    var insertPart = strValue.substr(insertPos - moreLen > 0 ? insertPos - moreLen : 0, moreLen);
                    var reversed = insertPart.split('').reverse();
                    var checkMore = 0;
                    var cutNum = 0;
                    for(var i = 0; i < reversed.length; i++){
                        if(getEncodeType(reversed[i]).extendLen > 0){
                            checkMore += 2;
                        } else {
                            checkMore++;
                        }
                        if(checkMore >= moreLen){
                            cutNum = i+1;
                            break;
                        }
                    }
                    var iInsertToStartLength = insertPos - cutNum;
                    self.messageContent(strValue.substr(0, iInsertToStartLength) + strValue.substr(insertPos));
                    setInsertPos(msgInputDom, iInsertToStartLength);
                    msgInputDom.scrollTop = scrollTop;
                }
                pbDraftListener();
                var newValue = $(msgInputDom).val();
                var newEncodeType = getEncodeType(newValue);
                var newMaxLength = newEncodeType.encodeType == 'UNICODE' ? 335 : 765;
                if (newValue.length + newEncodeType.extendLen >= newMaxLength) {
                    $("#msgCount").addClass("colorRed");
                } else {
                    $("#msgCount").removeClass("colorRed");
                }
                return "(" + (newValue.length + newEncodeType.extendLen) + "/" + newMaxLength + ")" + "(" + getSmsCount(newValue) + "/5)";
            });
            /**
             * è¿ååè¡¨ç¶æäºä»¶å¤ç
             * @event clear
             */
            self.clear = function (isNeedInit) {
                if (self.pageState() == pageState.SEND_MSM) {
                    smsPageCheckDraft(clearPhonebookForm, isNeedInit);
                } else {
                    clearPhonebookForm(isNeedInit);
                }
                config.resetContentModifyValue();
            };

            function clearPhonebookForm(isNeedInit) {
                $("#frmPhoneBook").hide();
                self.pageState(pageState.LIST);
                self.index(-1);
                self.name("");
                self.mobile_phone_number("");
                self.home_phone_number("");
                self.office_phone_number("");
                self.mail("");
                self.messageContent("");
                if (true == isNeedInit) {
                    refreshPage();
                }
                self.gridTemplate.clearAllChecked();
                clearValidateMsg();
                $("#books ").translate();
                $("#frmPhoneBook").show();
            }

            /**
             * ä¿å­çµè¯æ¬äºä»¶
             * @event save
             */
            self.save = function () {
                var saveBook = function (index) {
                    var isSaveInSIM = (location == locationValue.SIM);
                    if (isSaveInSIM) {
                        if (!checkHasSIMCard(true)) {
                            return;
                        }
                    }
                    if (self.pageState() == pageState.NEW || location != self.originLocation) {
                        if (isSaveInSIM) {
                            if (self.capacity().IsSimCardFull) {
                                showAlert("sim_full");
                                return;
                            }
                        } else {
                            if (self.capacity().IsDeviceFull) {
                                showAlert("device_full");
                                return;
                            }
                        }
                    }
                    var name = self.name();
                    var mobile_phone_number = self.mobile_phone_number();
                    if ($.trim(name) == "" || $.trim(mobile_phone_number) == "") {
                        return;
                    }
                    showLoading('saving');
                    var params = {};
                    params.location = location;
                    params.index = index;
                    params.name = name;
                    params.mobile_phone_number = mobile_phone_number;
                    var home_phone_number = self.home_phone_number();
                    var office_phone_number = self.office_phone_number();
                    var mail = self.mail();
                    if($.trim(home_phone_number)!=""){
                        params.home_phone_number = self.home_phone_number();
                    }
                    if($.trim(office_phone_number)!=""){
                        params.office_phone_number = self.office_phone_number();
                    }
                    if($.trim(mail)!=""){
                        params.mail = self.mail();
                    }
                    if (!isSaveInSIM) {
                        params.group = self.selectedGroup();
                    }
                    if(index==-1){
                        opt = "add";
                    }else{
                        opt = "edit";
                    }
                    tmpBooks.pbm_location = params.location;
                    tmpBooks.pbm_id = params.index;
                    tmpBooks.pbm_name = params.name;
                    tmpBooks.pbm_number = params.mobile_phone_number;
                    tmpBooks.pbm_anr = self.home_phone_number();
                    tmpBooks.pbm_anr1 = self.office_phone_number();
                    tmpBooks.pbm_email = self.mail();
                    tmpBooks.pbm_group = "";
                    if(!isSaveInSIM){
                        tmpBooks.pbm_group = self.selectedGroup();
                    }
                    service.savePhoneBook(params, self.callback);
                }
                var location = self.selectedLocation();
                var editIndex = (location == self.originLocation) ? self.index() : -1;
                if (location == locationValue.SIM && self.originLocation == locationValue.DEVICE) {
                    showConfirm("change_device_to_sim_confirm", function () {
                        saveBook(editIndex);
                    });
                } else {
                    saveBook(editIndex);
                }
            };
            /**
             * æå¼æ·»å çµè¯æ¬è®°å½é¡µé¢äºä»¶
             * @event openNewPage
             */
            self.openNewPage = function () {
                self.pageState(pageState.NEW);
                self.selectedLocation(locationValue.DEVICE);
                self.originLocation = "";
                if (checkHasSIMCard(false)) {
                    self.locations(saveLocationOpts(true));
                } else {
                    self.locations(saveLocationOpts(false));
                }
                var group = getCurrentGroup();
                if (group != "all") {
                    self.selectedGroup(group);
                }
                self.dynamicTranslate();
                preOpenEditPage();
            };
            /**
             * æå¼æ·»å çµè¯æ¬è®°å½ç¼è¾é¡µé¢äºä»¶
             * @event openPage
             */
            self.openPage = function (option) {
                var index;
                if (self.pageState() == pageState.LIST) {
                    var result = self.checkSelect(option);
                    if (!result.isCorrectData) return;
                    index = result.selectedIds[0];
                } else {
                    index = self.index();
                }
                self.editBooks(index, option);
            };
            /**
             * æå¼æ·»å çµè¯æ¬è®°å½æ¥çé¡µé¢äºä»¶
             * @event openViewPage
             */
            self.openViewPage = function () {
                self.openPage("view");
            };
            /**
             * æå¼æ·»å çµè¯æ¬è®°å½æ¥çé¡µé¢äºä»¶
             * @event openViewPage
             */
            self.openEditPage = function () {
                self.openPage("edit");
                preOpenEditPage();
            };
            /**
             * ç¼è¾çµè¯æ¬äºä»¶å¤ç
             * @event editBooks
             */
            self.editBooks = function (selectedId, option) {
                if (!selectedId) return;

                self.locations(saveLocationOpts(true));
                var data = self.books();
                for (var i = 0; i < data.length; i++) {
                    var n = data[i];
                    if (n.index == selectedId) {
                        self.index(n.index);
                        self.selectedLocation(n.location);
                        self.originLocation = n.location;
                        var trans = (n.location == locationValue.DEVICE) ? "device" : "sim";
                        self.locationTrans(trans);
                        var transText = $.i18n.prop("trans");
                        self.locationTransText(transText);
                        self.name(n.name);
                        self.mobile_phone_number(n.mobile_phone_number);
                        self.home_phone_number(n.home_phone_number);
                        self.office_phone_number(n.office_phone_number);
                        self.mail(n.mail);
                        self.selectedGroup(n.group);
                        self.groupTrans("group_" + n.group);
                        self.groupTransText($.i18n.prop(self.groupTrans()));
                        if (option == "edit") {
                            self.pageState(pageState.EDIT);
                        } else {
                            self.pageState(pageState.VIEW);
                        }
                        break;
                    }
                }
                self.dynamicTranslate();

                if (self.selectedLocation() == locationValue.SIM) {
                    checkHasSIMCard(true)
                }
            };
            /**
             * ç¿»è¯ç¼è¾åºå
             * @event dynamicTranslate
             */
            self.dynamicTranslate = function () {
                $("#editArea").translate();
            };
            /**
             * å é¤ä¸æ¡çµè¯æ¬äºä»¶å¤ç(cardæ¨¡å¼ä½¿ç¨)
             * @event deleteOneBook
             */
            self.deleteOneBook = function (index) {
                showConfirm("phonbook_confirm_data_delete", function () {
                    opt = "delete"
                    tmpSelectedIds = [String(index)];
                    showLoading('deleting');
                    var params = {};
                    params.indexs = [String(index)];
                    service.deletePhoneBooks(params, self.callback);
                });
                return false;
            };
            /**
             * å é¤ä¸æ¡çµè¯æ¬äºä»¶å¤ç
             * @event deleteBook
             */
            self.deleteBook = function () {
                self.deleteOneBook(self.index());
            };
            /**
             * å é¤ä¸æ¡æå¤æ¡çµè¯æ¬äºä»¶å¤ç
             * @event deleteBooks
             */
            self.deleteBooks = function () {
                var result = self.checkSelect("delete");
                if (!result.isCorrectData) return;
                showConfirm("phonbook_confirm_data_delete", function () {
                    opt = "delete";
                    tmpSelectedIds = result.selectedIds;
                    showLoading('deleting');
                    var params = {};
                    params.indexs = result.selectedIds;
                    service.deletePhoneBooks(params, self.callback);
                });
            };
            /**
             * å¤æ­çµè¯æ¬éä¸­
             * @method checkSelect
             * @param pState å½åé¡µé¢çç¶æ
             * @return {Object}
             */
            self.checkSelect = function (pState) {
                var ids;
                if ("send" == pState) {
                    ids = self.gridTemplate.selectedPrimaryValue();
                } else {
                    ids = self.gridTemplate.selectedIds();
                }

                var isCorrectData = true;
                if (ids.length == 0) {
                    showAlert("no_data_selected");
                    isCorrectData = false;
                } else if ("edit" == pState || "view" == pState) {
                    if (ids.length > 1) {
                        showAlert("too_many_data_selected");
                        isCorrectData = false;
                    }
                } else if ("send" == pState) {
                    if (ids.length > 5) {
                        showAlert("max_send_number");
                        isCorrectData = false;
                    }
                }
                return {selectedIds:ids, isCorrectData:isCorrectData };
            };
            /**
             * å¨é¨å é¤çµè¯æ¬äºä»¶å¤ç
             * @event deleteAllBooks
             */
            self.deleteAllBooks = function () {
                showConfirm("confirm_data_delete", function () {
                    showLoading('deleting');
                    opt = "deleteAll";
                    var group = getCurrentGroup();
                    var params = {};
                    if (group == "all") {
                        params.location = 2;
                        service.deleteAllPhoneBooks(params, self.callback);
                    } else {
                        params.location = 3;
                        params.group = group;
                        service.deleteAllPhoneBooksByGroup(params, self.callback);
                    }
                });
            };
            /**
             * åè°å½æ°
             * @method callback
             */
            self.callback = function (data) {
                if (data && data.result == "success") {
                    self.clear(true);
                    $("#books ").translate();
                    renderCheckbox();
                    successOverlay(null, true);
                } else {
                    errorOverlay();
                }
            };
            /**
             * åæ¢æ¾ç¤ºæ¹å¼äºä»¶å¤ç
             * @event changeTemplate
             */
            self.changeTemplate = function () {
                if (self.gridTemplate.tmplType == "card") {
                    self.gridTemplate.tmplType = "list";
                    self.gridTemplate.pageSize = 10;
                    self.gridTemplate.columns = templateColumns.listColumns;
                } else {
                    self.gridTemplate.tmplType = "card";
                    self.gridTemplate.pageSize = 10;
                    self.gridTemplate.columns = templateColumns.cardColumns;
                }
                refreshPage();
                $("#books ").translate();
            };
            /**
             * æ¾ç¤ºåéç­ä¿¡é¡µé¢
             * @event openSendMessagePage
             */
            self.openSendMessagePage = function () {
                var selectedNumber = null;
                if (pageState.LIST == self.pageState()) {
                    var result = self.checkSelect("send");
                    if (!result.isCorrectData) return;
                    selectedNumber = result.selectedIds;
                } else {
                    selectedNumber = self.mobile_phone_number();
                }

                var select = $("#chosenUserList .chzn-select-deselect");
                select.empty();
                var options = [];
                var tmp = [];
                for (var j = 0; j < config.phonebook.length; j++) {
                    var book = config.phonebook[j];
                    if ($.inArray(book.pbm_number, tmp) == -1) {
                        options.push(new Option(book.pbm_name + "/" + book.pbm_number, book.pbm_number, false, true));
                        tmp.push(book.pbm_number);
                    }
                }
                var opts = "";
                $.each(options, function (i, e) {
                    opts += "<option value='" + e.value + "'>" + e.text + "</option>";
                });
                select.append(opts);
                select.chosen({max_selected_options:5, search_contains:true, width: '545px'});
                $("#chosenUserSelect").val(selectedNumber);
                $("#chosenUserSelect").trigger("liszt:updated");
                config.resetContentModifyValue();
                pbDraftListener();
                self.pageState(pageState.SEND_MSM);
            };

            /**
             * åéç­ä¿¡
             * @event sendMessage
             */
            self.sendMessage = function(){
                service.getSmsCapability({}, function (capability) {
                    var hasCapability = capability.nvUsed < capability.nvTotal;
                    if (!hasCapability) {
                        showAlert("sms_capacity_is_full_for_send");
                        return false;
                    }
                    var numbers = syncSelectAndChosen($("select#chosenUserSelect"), $('.search-choice', '#chosenUserSelect_chzn'));
                    if (numbers.length + capability.nvUsed > capability.nvTotal) {
                        showAlert({msg: "sms_capacity_will_full_just", params: [capability.nvTotal - capability.nvUsed]});
                        return false;
                    }
                    self.sendMessageAction();
                    return true;
                });
            };

            self.sendMessageAction = function () {
                var numbers = syncSelectAndChosen($("select#chosenUserSelect"), $('.search-choice', '#chosenUserSelect_chzn'));

                if (!numbers || numbers.length == 0) {
                    self.showErrorInfo(true);
                    var timer = addTimeout(function () {
                        self.showErrorInfo(false);
                        window.clearTimeout(timer);
                    }, 5000);
                    return;
                }
                var content = self.messageContent();
                var sentCount = 0;
                var failCount = 0;
                if (numbers.length > 1) {
                    showLoading("sending", "<button id='btnStopSending' onclick='phoneBookStopSMSSending();' class='btn-1 btn-primary'>"
                        + $.i18n.prop("sms_stop_sending")
                        + "</button>");
                } else {
                    showLoading('sending');
                }
                var callback = function (data) {
                    sentCount++;
                    if (sentCount == numbers.length) {
                        $("#chosenUserSelect").val("");
                        self.messageContent("");
                        config.CONTENT_MODIFIED.modified = false;
                        if (failCount == 0) {
                            successOverlay();
                            location.hash = "#smslist";
                        } else {
                            var msg = $.i18n.prop("success_info") + $.i18n.prop("colon") + (sentCount - failCount)
                                + "<br/>" + $.i18n.prop("error_info") + $.i18n.prop("colon") + (failCount);
                            showAlert(msg,function(){
                                location.hash = "#smslist";
                            });
                        }

                    } else {
                        sendSMS();
                    }
                }
                _phoneBookStopSMSSending = false;
                var sendSMS = function () {
                    if (_phoneBookStopSMSSending) {
                        hideLoading();
                        return;
                    }
                    if (sentCount == 1) {
                        $("#loading #loading_container").html("");
                    }
                    service.sendSMS({
                        number:numbers[sentCount],
                        message:content,
                        id:-1
                    }, function (data) {
                        callback(data);
                    }, function (data) {
                        failCount++;
                        callback(data);
                    });
                };
                sendSMS();
            };
            /**
             * æ¸é¤æç´¢å³é®å­äºä»¶
             * @event clearSearchKey
             */
            self.clearSearchKey = function () {
                self.gridTemplate.searchInitStatus(true);
                self.gridTemplate.searchKey($.i18n.prop("search"));
                $("#ko_grid_search_txt").addClass("ko-grid-search-txt-default").attr("trans", "search");
            };
            /**
             * ç¹å»æç´¢è¾å¥æ¡äºä»¶
             * @event clearSearchKey
             */
            self.searchTextClick = function () {
                var searchText = $("#ko_grid_search_txt");
                if (searchText.hasClass("ko-grid-search-txt-default")) {
                    self.gridTemplate.searchKey("");
                    self.gridTemplate.searchInitStatus(false);
                    searchText.removeClass("ko-grid-search-txt-default").removeAttr("trans");
                }
            };
            /**
             * ç¦»å¼æç´¢è¾å¥æ¡äºä»¶
             * @event clearSearchKey
             */
            self.searchTextBlur = function () {
                var txt = $.trim(self.gridTemplate.searchKey()).toLowerCase();
                if (txt == "") {
                    self.clearSearchKey();
                }
            };
            /**
             * å½åè¡¨æ ¼æ¯å¦ææ°æ®
             * @method hasData
             */
            self.hasData = ko.computed(function () {
                return self.gridTemplate.afterSearchData().length > 0;
            });
            /**
             * å½åè¡¨æ ¼æ¯å¦æéä¸­çæ°æ®
             * @method hasChecked
             */
            self.hasChecked = ko.computed(function () {
                return self.gridTemplate.checkedCount() > 0;
            });
            /**
             * æ¯å¦å¯ä»¥ç¹å»åéæé®
             * @method hasData
             */
            self.canSend = ko.computed(function () {
                if (!checkHasSIMCard(false)) {
                    return false;
                }
                var checked = self.gridTemplate.checkedCount();
                return (checked > 0 && checked <= 5);
            });

            /**
             * åéç­ä¿¡æ¶ï¼éæ©ç¨æ·ååççæ§äºä»¶
             * @event hasData
             */
            self.draftListenerEvent = function () {
                pbDraftListener();
            };
            /**
             * ææ¡£åå®¹çå¬ï¼å¤æ­æ¯å¦ä¿®æ¹è¿
             */
            function pbDraftListener() {
                var smsHasCapability = true;
                if (smsHasCapability) {
                    var content = self.messageContent();
                    var hasContent = false;
                    var numbers = getSelectValFromChosen($('.search-choice', '#chosenUserSelect_chzn'));
                    var noContactSelected = !(numbers && numbers.length > 0);
                    if (typeof content == "undefined" || content == '') {
                        config.resetContentModifyValue();
                        return false;
                    } else {
                        hasContent = true;
                    }
                    if (hasContent && !noContactSelected) {
                        config.CONTENT_MODIFIED.modified = true;
                        config.CONTENT_MODIFIED.message = 'sms_to_save_draft';
                        config.CONTENT_MODIFIED.callback.ok = saveDraftAction;
                        config.CONTENT_MODIFIED.callback.no = $.noop;
                        config.CONTENT_MODIFIED.data = {
                            content:content,
                            numbers:numbers
                        };
                        return false;
                    }
                    if (hasContent && noContactSelected) {
                        config.CONTENT_MODIFIED.modified = true;
                        config.CONTENT_MODIFIED.message = 'sms_no_recipient';
                        config.CONTENT_MODIFIED.callback.ok = $.noop;
                        config.CONTENT_MODIFIED.callback.no = function () {
                            // è¿åtrueï¼é¡µé¢ä¿æåç¶
                            return true;
                        };
                        return false;
                    }
                } else {
                    config.resetContentModifyValue();
                }
            }

            function saveDraftAction(data) {
                var datetime = new Date();
                var params = {
                    index:-1,
                    currentTimeString:getCurrentTimeString(datetime),
                    groupId:data.numbers.length > 1 ? datetime.getTime() : '',
                    message:data.content,
                    numbers:data.numbers
                };
                service.saveSMS(params, function () {
                    successOverlay('sms_save_draft_success');
                }, function () {
                    errorOverlay("sms_save_draft_failed")
                });
            }

            function smsPageCheckDraft(clearCallback, isNeedInit) {
                if (config.CONTENT_MODIFIED.message != 'sms_to_save_draft') {
                    if (config.CONTENT_MODIFIED.modified) {
                        showConfirm(config.CONTENT_MODIFIED.message, {ok:function () {
                            config.CONTENT_MODIFIED.callback.ok(config.CONTENT_MODIFIED.data);
                            clearCallback(isNeedInit);
                        }, no:function () {
                            if (config.CONTENT_MODIFIED.message == 'sms_to_save_draft') {
                                clearCallback(isNeedInit);
                            }
                            return false;
                        }});
                        return false;
                    } else {
                        clearCallback(isNeedInit);
                    }
                } else {
                    config.CONTENT_MODIFIED.callback.ok(config.CONTENT_MODIFIED.data);
                    clearCallback(isNeedInit);
                }
            }

            /**
             * éæ°è·åé¡µé¢æ°æ®å¹¶æ¾ç¤º
             * @event getPhoneBookReady
             */
            function getPhoneBookReady() {
                service.getPhoneBookReady({}, function (data) {
                    if (data.pbm_init_flag == "6") {
                        self.initFail(true);
                        hideLoading();
                        showAlert("phonebook_init_fail");
                    } else if (data.pbm_init_flag != "0") {
                        addTimeout(getPhoneBookReady, 1000);
                    } else {
                        self.initFail(false);
                        var capacity = getCapacity();
                        self.capacity(capacity);
                        self.phoneBookCapacity(capacity.Ratio);
                        var phoneBooks = getBooks(capacity.Used, function (phoneBooks) {
                            self.books(phoneBooks);
                            self.gridTemplate.data(phoneBooks);
                            hideLoading();
                        });
                    }
                });
            }

            showLoading('waiting');
            addTimeout(getPhoneBookReady, 200);
            /**
             * æ£æ¥SIMå¡ç¶æ
             * @event checkHasSIMCard
             * @param {Boolean} showMsgæ¯å¦æç¤ºæ¶æ¯
             */
            function checkHasSIMCard(showMsg) {
                var status = service.getStatusInfo();
                if (status.simStatus != "modem_init_complete") {
                    if (showMsg) {
                        showAlert("sim_removed", function () {
                            self.pageState(pageState.LIST);
                            self.clear(true);
                        });
                    }
                    return false;
                }
                return true;
            }

            /**
             * éæ°è·åé¡µé¢æ°æ®å¹¶æ¾ç¤º
             * @event refreshPage
             */
            function refreshPage() {
                showLoading();
                var capacity = getCapacity();
                self.phoneBookCapacity(capacity.Ratio);
                self.capacity(capacity);
                var pbooks = self.books();
                if(opt=="delete"){
                    $.each(tmpSelectedIds,function(key,value){
                        pbooks = $.grep(pbooks,function(obj,k){
                            return obj.index!=value;
                        });
                    });
                }else if(opt=="deleteAll"){
                    pbooks = [];
                }else if(opt=="add"){
                    var tmpAddId = service.getPbmCurIndex();
                    if(typeof tmpAddId !== 'undefined'){
                        if(tmpBooks.pbm_location == locationValue.SIM){
                            tmpBooks.pbm_id = tmpAddId.pbm_cur_index;
                        }else{
                            if($.trim(tmpAddId.pbm_cur_index)!=""){
                                tmpBooks.pbm_id = parseInt(tmpAddId.pbm_cur_index)+2000;
                            }
                        }
                    }
                    var tmpBook = [];
                    tmpBook.push(tmpBooks);
                    var books = translateData(tmpBook);
                    pbooks.push(books[0]);
                    tmpBooks={};
                }else if(opt=="edit"){
                    for(var i=0;i<pbooks.length;i++){
                        var tmpBook = [];
                        tmpBook.push(tmpBooks);
                        var books = translateData(tmpBook);
                        if(pbooks[i].index == books[0].index){
                            pbooks.splice(i,1,books[0]);
                            tmpBooks={};
                            break;
                        }
                    }
                }
                self.books(pbooks);
                self.gridTemplate.data(pbooks);
                if(config.HAS_SMS){
                    var tempBooks=[];
                    for(var i=0;i<pbooks.length;i++){
                        var tempBook={};
                        tempBook.pbm_id = pbooks[i].index;
                        tempBook.pbm_location = pbooks[i].location;
                        tempBook.pbm_name = pbooks[i].name;
                        tempBook.pbm_number = pbooks[i].mobile_phone_number;
                        tempBook.pbm_anr = pbooks[i].home_phone_number;
                        tempBook.pbm_anr1 = pbooks[i].office_phone_number;
                        tempBook.pbm_email = pbooks[i].mail;
                        tempBook.pbm_group = pbooks[i].group;
                        tempBooks.push(tempBook);
                    }
                    config.phonebook = tempBooks;
                }
                hideLoading();
                tmpSelectedIds="";
                /*getBooks(capacity.Used, function (books) {
                    self.books(books);
                    self.gridTemplate.data(books);
                    hideLoading();
                });*/
            }

            self.preContent = {};
            /**
             * ä¿å­ç¼è¾åçåå®¹
             * @method setPreContent
             */
            function setPreContent() {
                self.preContent.location = self.selectedLocation();
                self.preContent.name = self.name();
                self.preContent.mobile_phone_number = self.mobile_phone_number();
                self.preContent.home_phone_number = self.home_phone_number();
                self.preContent.office_phone_number = self.office_phone_number();
                self.preContent.mail = self.mail();
                self.preContent.group = self.selectedGroup();
            }

            /**
             * æ£æµæ°æ®æ¯å¦æ¹å
             * @method checkContentChang
             * @return {bool}
             */
            function checkContentChang() {
                var changed = (self.preContent.location != self.selectedLocation()
                    || self.preContent.name != self.name()
                    || self.preContent.mobile_phone_number != self.mobile_phone_number()
                    || self.preContent.home_phone_number != self.home_phone_number()
                    || self.preContent.office_phone_number != self.office_phone_number()
                    || self.preContent.mail != self.mail()
                    || self.preContent.group != self.selectedGroup());
                config.CONTENT_MODIFIED.modified = changed;
            }

            function preOpenEditPage() {
                config.resetContentModifyValue();
                setPreContent();
                config.CONTENT_MODIFIED.checkChangMethod = checkContentChang;
            }
        }

        /**
         * è®¾ç½®åæ­¢åéæ å¿ä¸ºtrue
         * @event phoneBookStopSMSSending
         */
        phoneBookStopSMSSending = function () {
            _phoneBookStopSMSSending = true;
            $("#loading #loading_container").html($.i18n.prop("sms_cancel_sending"));
        }

        /**
         * è·åçµè¯æ¬
         * @method getBooks
         * @return {Object}
         */
        function getBooks(capacity, callback) {
            var para = {};
            para.page = 0;
            para.data_per_page = capacity;
            para.orderBy = "name";
            para.isAsc = true;
            var books = [];
            var group = getCurrentGroup();
            if (config.HAS_SMS) {
                service.getPhoneBooks(para, function (data) {
                    config.phonebook = data.pbm_data;
                    var books = data;
                    if (group != "all") {
                        books = {"pbm_data": _.filter(data.pbm_data, function (item) {
                            return item.pbm_group == group;
                        })};
                    }
                    var pb = translateData(books.pbm_data);
                    callback(pb);
                });
            } else {
                if (group != "all") {
                    para.group = group;
                    service.getPhoneBooksByGroup(para, function (books) {
                        var pb = translateData(books.pbm_data);
                        callback(pb);
                    });
                } else {
                    service.getPhoneBooks(para, function (books) {
                        var pb = translateData(books.pbm_data);
                        callback(pb);
                    });
                }
            }
            return translateData(books.pbm_data);
        }

        /**
         * è·åçµè¯æ¬å®¹éä¿¡æ¯
         * @method getCapacity
         * @return {String}
         */
        function getCapacity() {
            var sim = service.getSIMPhoneBookCapacity();
            var device = service.getDevicePhoneBookCapacity();
            return  {
                simUsed:sim.simPbmUsedCapacity,
                deviceUsed:device.pcPbmUsedCapacity,
                simCapacity:sim.simPbmTotalCapacity,
                deviceCapacity:device.pcPbmTotalCapacity,
                simMaxNameLen:sim.maxNameLen,
                simMaxNumberLen:sim.maxNumberLen,
                simMaxAnrLen:sim.maxAnrLen,
                simMaxAnr1Len:sim.maxAnr1Len,
                simMaxEmailLen:sim.maxEmailLen,
                simMaxSneLen:sim.maxSneLen,
                IsSimCardFull:(sim.simPbmUsedCapacity == sim.simPbmTotalCapacity),
                IsDeviceFull:(device.pcPbmUsedCapacity == device.pcPbmTotalCapacity),
                Used:sim.simPbmUsedCapacity + device.pcPbmUsedCapacity,
                Capacity:sim.simPbmTotalCapacity + device.pcPbmTotalCapacity,
                Ratio:"(" + (sim.simPbmUsedCapacity + device.pcPbmUsedCapacity) + "/" + (sim.simPbmTotalCapacity + device.pcPbmTotalCapacity) + ")"
            };
        }

        function translateData(books) {
            var ret = [];
            var group = getCurrentGroup();
            var hasFilter = (group != "all");
            if (books) {
                for (var i = 0; i < books.length; i++) {
                    if (hasFilter) {
                        var currentGroup = books[i].pbm_group;
                        if (books[i].pbm_location == locationValue.SIM || currentGroup != group) {
                            continue;
                        }
                    }
                    var temp = {
                        index:books[i].pbm_id,
                        location:books[i].pbm_location,
                        imgLocation:books[i].pbm_location == locationValue.SIM ? "img/sim.png" : "img/device.png",
                        name:books[i].pbm_name,
                        mobile_phone_number:books[i].pbm_number,
                        home_phone_number:books[i].pbm_anr,
                        office_phone_number:books[i].pbm_anr1,
                        mail:books[i].pbm_email,
                        group:books[i].pbm_group,
                        transGroup:(!books[i].pbm_group) ? "group_null" : "group_" + books[i].pbm_group
                    };
                    ret.push(temp);
                }
            }
            return ret;
        }

        /**
         * åå§åViewModelå¹¶è¿è¡ç»å®
         * @method init
         */
        function init() {
            var container = $('#container');
            ko.cleanNode(container[0]);
            var vm = new phoneBookVM();
            ko.applyBindings(vm, container[0]);

            $('#frmPhoneBook').validate({
                submitHandler:function () {
                    vm.save();
                },
                rules:{
                    txtMail:"email_check",
                    txtName:"name_check",
                    txtMobile:"phonenumber_check",
                    txtHomeNumber:"phonenumber_check",
                    txtOfficeNumber:"phonenumber_check"
                }
            });

        }

        return {
            init:init
        };
    });<div class="form-body">
    <form id="filterBasicForm">
        <div class="form-title" trans="port_filter"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="port_filter_enabled"></label>
                <div class="span8">
                    <input type="radio" name="filterGrp" id="filterEnable" data-bind="checked: portFilterEnable" value="1"/>
                    <label for="filterEnable" trans="enable"></label>
                    <input type="radio" name="filterGrp" id="filterDisable" data-bind="checked: portFilterEnable" value="0"/>
                    <label for="filterDisable" trans="disable"></label>
                </div>
            </div>
            <div class="row-fluid" data-bind="visible: portFilterEnable() == '1' ">
                <label class="span4 side-right" trans="default_policy"></label>
                <div class="span8">
                <input type="radio" name="defaultPolicyGrp" id="defaultPolicyAccept" data-bind="checked: defaultPolicy, event: {click: policyChangeHandler}" value="0"/>
                    <label for="defaultPolicyAccept" trans="accepted"></label>
                <input type="radio" name="defaultPolicyGrp" id="defaultPolicyDrop" data-bind="checked: defaultPolicy, event: {click: policyChangeHandler}" value="1"/>
                    <label for="defaultPolicyDrop" trans="dropped"></label>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="default_policy_note"></li>
                <li trans="default_policy_note_filter"></li>
            </ul>
        </div>
    </form>
    <div data-bind="visible: oriPortFilterEnable() == '1' && portFilterEnable() == '1' ">
        <form id="portFilterForm">
            <div class="form-title" trans="port_filter_setting"></div>
            <div class="content">
                <div class="row-fluid" data-bind="visible: ipv6Support">
                    <label class="span4 side-right" trans="filter_ip_setting"></label>
                    <div class="span8">
                        <input type="radio" name="ipTypeGrp" id="filterIpv4" data-bind="checked: ipType, event: {click: ipTypeChangeHandler}" value="ipv4"/>
                        <label for="filterIpv4" trans="filter_ipv4"></label>
                        <input type="radio" name="ipTypeGrp" id="filterIpv6" data-bind="checked: ipType, event: {click: ipTypeChangeHandler}" value="ipv6"/>
                        <label for="filterIpv6" trans="filter_ipv6"></label>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtMacAddress" trans="mac_address"></label>
                    <div class="span8">
                        <input type="text" name="txtMacAddress" id="txtMacAddress" data-bind="value: macAddress"  maxlength="17"/>
                        <label trans="macExam" id="macExamLabel"></label>
                    </div>
                </div>
                <div data-bind="visible: ipType() =='ipv4'">
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtSourceIpAddress" trans="source_ip_address"></label>
                        <div class="span8">
                            <input type="text" name="txtSourceIpAddress" id="txtSourceIpAddress" data-bind="value: sourceIpAddress"  maxlength="15"/>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtDestIpAddress" trans="dest_ip_address"></label>
                        <div class="span8">
                            <input type="text" name="txtDestIpAddress" id="txtDestIpAddress" data-bind="value: destIpAddress"  maxlength="15"/>
                        </div>
                    </div>
                </div>
                <div data-bind="visible: ipType() =='ipv6'">
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtSourceIpv6Address" trans="source_ipv6_address"></label>
                        <div class="span8">
                            <input type="text" name="txtSourceIpv6Address" id="txtSourceIpv6Address" data-bind="value: sourceIpv6Address"/>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtDestIpv6Address" trans="dest_ipv6_address"></label>
                        <div class="span8">
                            <input type="text" name="txtDestIpv6Address" id="txtDestIpv6Address" data-bind="value: destIpv6Address"/>
                        </div>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="protocol" trans="protocol"></label>
                    <div class="span8">
                        <select id="protocol" transid="protocol" data-bind="options: modes, value: selectedMode, optionsText: transOption('protocol'), optionsValue: 'value', event:{ change: protocolChangeHandler}"></select>
                    </div>
                </div>
                <!--æ ¹æ®protocalæ¾ç¤ºæéè-->
                <div id="portRangeArea" data-bind="visible: selectedMode() != 'ICMP' && selectedMode() != 'None' ">
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtSourcePortStart" trans='source_port_range'></label>
                        <div class="span8">
                            <input id='txtSourcePortStart' name="txtSourcePortStart" type="text" data-bind="value: sourcePortStart"
                                   class="required rangeInput" maxlength="5"/>
                            -
                            <input id='txtSourcePortEnd' name="txtSourcePortEnd" type="text" data-bind="value: sourcePortEnd"
                                   class="required rangeInput" maxlength="5"/>
                            <label id='sourceRangeLabel'>(1~65535)</label>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for="txtDestPortStart" trans='dest_port_range'></label>
                        <div class="span8">
                            <input id='txtDestPortStart' name="txtDestPortStart" type="text" data-bind="value: destPortStart"  class="required rangeInput" maxlength="5"/>
							-
                            <input id='txtDestPortEnd' name="txtDestPortEnd" type="text" data-bind="value: destPortEnd"
                                   class="required rangeInput" maxlength="5"/>
                            <label id='destRangeLabel'>(1~65535)</label>
                        </div>
                    </div>
                </div>

                <div class="row-fluid">
                    <label class="span4 side-right" trans="port_filter_action"></label>
                    <div class="span8">
                        <input type="radio" name="portFilterActionGrp" id="portFilterAccept" data-bind="checked: portFilterAction" value="Accept"/>
                        <label for="portFilterAccept" trans="filter_accept"></label>
                        <input type="radio" name="portFilterActionGrp" id="portFilterDrop" data-bind="checked: portFilterAction" value="Drop"/>
                        <label for="portFilterDrop" trans="filter_drop"></label>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtComment" trans="comment"></label>
                    <div class="span8">
                        <input type="text" name="txtComment" id="txtComment" data-bind="value: comment" class="required" maxlength="32"/>
                    </div>
                </div>
            </div>
            <div class="form-buttons">
                <input type="submit" class="btn-1 " trans="apply"/>
            </div>
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="port_filter_note_mac_address"></li>
                    <li trans="port_filter_note_source_ip_address"></li>
                    <li trans="port_filter_note_dest_ip_address"></li>
                    <li trans="port_filter_note_protocol"></li>
                    <li trans="port_filter_note_source_port_range"></li>
                    <li trans="port_filter_note_dest_port_range"></li>
                    <li trans="port_filter_note_action"></li>
                    <li trans="port_filter_note_comment"></li>
                    <li trans="port_filter_note_info"></li>
                    <li trans="rule_max_note_v4v6" data-bind="visible: ipv6Support"></li>
                    <li trans="rule_max_note" data-bind="visible: !ipv6Support()"></li>
                </ul>
            </div>
        </form>
        <form id="portFilterListForm">
            <div class="form-title" trans="port_filter_list"></div>
            <div class="content">
                <div>
                    <div id="portFilters" class="fixTableScroll" data-bind="simpleGrid: gridTemplate"></div>
                </div>
            </div>

            <div class="form-buttons">
                <input type="submit" class="btn-1 " trans="delete" data-bind="enable: gridTemplate.checkedCount() > 0"/>
            </div>

            <!-- ko if: oriDefaultPolicy() == '0' -->
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="filter_accept_note"></li>
                </ul>
            </div>
            <!-- /ko -->
            <!-- ko if: oriDefaultPolicy() == '1' -->
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="filter_drop_note"></li>
                </ul>
            </div>
            <!-- /ko -->
        </form>
    </div>
</div>/**
 * @module prot_filter
 * @class prot_filter
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    var PROTOCOL = {
        ICMP: 'ICMP',
        NONE: 'None'
    };

    var protocolModes = _.map(config.FILTER_PROTOCOL_MODES, function(item) {
        return new Option(item.name, item.value);
    });

    var columnsTmpl = [
        { columnType:"checkbox", rowText:"index", width:"4%" },
        { headerTextTrans:"mac_address", rowText:"macAddress", width:"12%" },
        { headerTextTrans:"ip_type", rowText:"ipType", width:"5%", display: config.IPV6_SUPPORT },
        { headerTextTrans:"source_ip_address", rowText:"sourceIpAddress", width:"12%"},
        { headerTextTrans:"dest_ip_address", rowText:"destIpAddress", width:"12%"},
        { headerTextTrans:"protocol", rowText:"protocol", width:"12%" },
        { headerTextTrans:"source_port_range", rowText:"sourcePortRange", width:"12%" },
        { headerTextTrans:"dest_port_range", rowText:"destPortRange", width:"12%" },
        { headerTextTrans:"port_filter_action", rowText:"action", width:"12%", needTrans: true},
        { headerTextTrans:"comment", rowText:"comment", width:"12%" }
    ];

    /**
     * prot_filter VM
     * @class PortFilterVM
     */
	function PortFilterVM() {
        var self = this;
        var info = getPortFilter();

        self.portFilterEnable = ko.observable(info.portFilterEnable);
        self.oriPortFilterEnable = ko.observable(info.portFilterEnable);
        self.defaultPolicy = ko.observable(info.defaultPolicy);
        self.oriDefaultPolicy = ko.observable(info.defaultPolicy);

        self.portFilterAction = ko.observable('');
        self.macAddress = ko.observable('');
        self.destIpAddress = ko.observable('');
        self.sourceIpAddress = ko.observable('');
        self.sourceIpv6Address = ko.observable('');
        self.destIpv6Address = ko.observable('');
        self.destPortStart = ko.observable('');
        self.destPortEnd = ko.observable('');
        self.sourcePortStart = ko.observable('');
        self.sourcePortEnd = ko.observable('');
        self.modes = ko.observableArray(protocolModes);
        self.selectedMode = ko.observable('5');
        self.comment = ko.observable('');
        self.ipv6Support = ko.observable(config.IPV6_SUPPORT);

        self.ipType = ko.observable('ipv4');

        self.rules = ko.observableArray(info.portFilterRules);

        /**
         * default policy change handler
         * @event policyChangeHandler
         */
        self.policyChangeHandler = function() {
            var filterAction = self.defaultPolicy() == "1" ? "Drop" : "Accept";
            self.portFilterAction(filterAction);
            return true;
        };

        self.gridTemplate = new ko.simpleGrid.viewModel({
            data:self.rules(),
            idName:"index",
            columns:columnsTmpl,
            tmplType:'list',
            pageSize: 20
        });

        /**
         * è®¾å®,æ°å¢,å é¤åè°å½æ°
         * @method callback
         */
        self.callback = function(result) {
            if (result.result == "success") {
                self.clear();
                init(self);
                successOverlay();
            } else {
                errorOverlay();
            }
        };

        /**
         * æ¸ç©ºæ·»å è§åè¾å¥
         * @method clear
         */
        self.clear = function() {
            self.macAddress('');
            self.destIpAddress('');
            self.destIpv6Address('');
            self.sourceIpAddress('');
            self.sourceIpv6Address('');
            self.destPortStart('0');
            self.destPortEnd('0');
            self.sourcePortStart('0');
            self.sourcePortEnd('0');
            self.selectedMode('None');
            self.comment('');
            clearValidateMsg();
        };

        /**
         * è®¾å®è¿æ»¤åºæ¬ä¿¡æ¯
         * @method enableVirtualServer
         */
        self.setPortFilterBasic = function() {
            showLoading();
            var params = {};
            params.portFilterEnable = self.portFilterEnable();
            params.defaultPolicy = self.defaultPolicy();
            service.setPortFilterBasic(params, self.callback);
        };

        /**
         * ä¿å­è§å
         * @method save
         */
        self.save = function() {
            if(self.ipv6Support()) {
                var typeInfo = self.ipType() == "ipv4"? "IPv4" : "IPv6";
                var oldRules = _.filter(self.rules(), function(ruleItem) {
                    return ruleItem.ipType == typeInfo;
                });

                if(oldRules.length >= config.portForwardMax) {
                    showAlert({msg: "rules_max_v4v6", params: [typeInfo, config.portForwardMax]});
                    return;
                }

                if(self.checkExist()) {
                    showAlert({msg: "rule_exist_v4v6", params: typeInfo});
                    return;
                }

            } else {
                if(self.rules().length >= config.portForwardMax) {
                    showAlert({msg: "rules_max", params: config.portForwardMax});
                    return;
                }

                if(self.checkExist()) {
                    showAlert("rule_exist");
                    return;
                }
            }

            showLoading();
            var params = {};
            params.macAddress = self.macAddress();

            if(self.ipv6Support() && self.ipType() == 'ipv6') {
                params.destIpAddress = self.destIpv6Address();
                params.sourceIpAddress = self.sourceIpv6Address();
            } else {
                params.destIpAddress = self.destIpAddress();
                params.sourceIpAddress = self.sourceIpAddress();
            }

            params.destPortStart = self.destPortStart();
            params.destPortEnd = self.destPortEnd();
            params.sourcePortStart = self.sourcePortStart();
            params.sourcePortEnd = self.sourcePortEnd();
            params.action = self.portFilterAction();
            params.protocol = self.selectedMode();
            params.comment = self.comment();
            params.ipType = self.ipType();
            service.setPortFilter(params, self.callback);
        };

        /**
         * æ£æ¥æ°å¢è§åæ¯å¦å·²ç»å­å¨
         * @method checkExist
         */
        self.checkExist = function() {
            self.macAddress(self.macAddress().toUpperCase());
            var newIpType = self.ipType().toUpperCase();
            var newRule = {
                macAddress: self.macAddress(),
                destIpAddress: newIpType == "IPV4"? self.destIpAddress() : self.destIpv6Address(),
                sourceIpAddress: newIpType == "IPV4"? self.sourceIpAddress() : self.sourceIpv6Address(),
                destPortRange: self.destPortStart() == '0'? '' : self.destPortStart() + ' - ' + self.destPortEnd(),
                sourcePortRange: self.sourcePortStart() == '0'? '' : self.sourcePortStart() + ' - ' + self.sourcePortEnd(),
                action: self.portFilterAction() == "Drop" ? "filter_drop" : "filter_accept",
                protocol: transProtocolValue(self.selectedMode()),
                comment: self.comment(),
                ipType: newIpType
            };

            var oldRule;
            var rules = self.rules();
            for(var i = 0; i < rules.length; i++) {
                oldRule = {
                    macAddress: rules[i].macAddress,
                    destIpAddress: rules[i].destIpAddress,
                    sourceIpAddress: rules[i].sourceIpAddress,
                    destPortRange: rules[i].destPortRange,
                    sourcePortRange: rules[i].sourcePortRange,
                    action: rules[i].action,
                    protocol: rules[i].protocol,
                    comment: rules[i].comment,
                    ipType: rules[i].ipType.toUpperCase()
                };

                if(_.isEqual(newRule, oldRule)) {
                    return true;
                }
            }
            return false;
        };

        /**
         * å é¤è§å
         * @method deleteFilterRules
         */
        self.deleteFilterRules = function() {
            var ids = self.gridTemplate.selectedIds();
            if(ids.length == 0) {
                showAlert("no_data_selected");
                return;
            }

            showConfirm("confirm_data_delete", function () {
                showLoading('deleting');
                var params = {};
                params.indexs = ids;
                service.deleteFilterRules(params, self.callback);
            });
        };

        /**
         * åè®®ååäºä»¶çå¬
         * @event protocolChangeHandler
         */
        self.protocolChangeHandler = function() {
            if(self.selectedMode() == PROTOCOL.ICMP || self.selectedMode() == PROTOCOL.NONE) {
                self.destPortStart('0');
                self.destPortEnd('0');
                self.sourcePortStart('0');
                self.sourcePortEnd('0');
                clearValidateMsg('#portRangeArea');
            }
            else {
                self.destPortStart('1');
                self.destPortEnd('65535');
                self.sourcePortStart('1');
                self.sourcePortEnd('65535');
            }
            return true;
        };

        /**
         * ipç±»åååäºä»¶çå¬
         * @event ipTypeChangeHandler
         */
        self.ipTypeChangeHandler = function() {
            clearValidateMsg();
            return true;
        };

        //init to call
        self.policyChangeHandler();
    }

    /**
     * è·åport filterä¿¡æ¯
     * @method getPortFilter
     */
    function getPortFilter() {
        return service.getPortFilter();
    }

    /**
     * åå§åport filter view model
     * @method init
     */
	function init(viewModel) {
        var vm;
        if(viewModel) {
            vm = viewModel;
            var info = getPortFilter();
            vm.portFilterEnable(info.portFilterEnable);
            vm.oriPortFilterEnable(info.portFilterEnable);
            vm.defaultPolicy(info.defaultPolicy);
            vm.oriDefaultPolicy(info.defaultPolicy);
            vm.rules(info.portFilterRules);
            vm.gridTemplate.clearAllChecked();
            vm.gridTemplate.data(info.portFilterRules);
            refreshTableHeight();
            renderCheckbox();
            $('.notes-content').translate();
            return;
        }

		vm = new PortFilterVM();
        var container = $('#container');
        ko.cleanNode(container[0]);
		ko.applyBindings(vm, container[0]);

        fixTableHeight();

        $('#filterBasicForm').validate({
            submitHandler : function() {
                vm.setPortFilterBasic();
            }
        });

        $('#portFilterListForm').validate({
            submitHandler : function() {
                vm.deleteFilterRules();
            }
        });

        $('#portFilterForm').validate({
            submitHandler : function() {
                vm.save();
            },
            rules: {
                txtMacAddress: {
                    filter_optional: true,
                    mac_check: true
                },
                txtDestIpAddress: {
                    ip_check: true
                },
                txtSourceIpAddress: {
                    ip_check: true
                },
                txtSourceIpv6Address: {
                    ipv6: true
                },
                txtDestIpv6Address: {
                    ipv6: true
                },
                txtDestPortStart: {
                    digits: true,
                    range: [1, 65535],
                    portCompare: "#txtDestPortEnd"
                },
                txtDestPortEnd: {
                    digits: true,
                    range: [1, 65535],
                    portCompare: "#txtDestPortStart"
                },
                txtSourcePortStart: {
                    digits: true,
                    range: [1, 65535],
                    portCompare: "#txtSourcePortEnd"
                },
                txtSourcePortEnd: {
                    digits: true,
                    range: [1, 65535],
                    portCompare: "#txtSourcePortStart"
                },

                txtComment: {
                    comment_check: true
                }
            },
            groups: {
                destPort: "txtDestPortStart txtDestPortEnd",
                sourcePort: "txtSourcePortStart txtSourcePortEnd"
            },
            errorPlacement: function(error, element) {
                if(element.attr("name") == "txtMacAddress") {
                    error.insertAfter("#macExamLabel");
                }
                else if(element.attr("name") == "txtDestPortStart" || element.attr("name") == "txtDestPortEnd") {
                    error.insertAfter("#destRangeLabel");
                }
                else if(element.attr("name") == "txtSourcePortStart" || element.attr("name") == "txtSourcePortEnd") {
                    error.insertAfter("#sourceRangeLabel");
                }
                else
                    error.insertAfter(element);
            }
        });
	}

    $.validator.addMethod("filter_optional", function (value, element, param) {
        var result = _.any(['#txtMacAddress', '#txtDestIpAddress', '#txtSourceIpAddress','#txtSourceIpv6Address','#txtDestIpv6Address'],
            function(item) {
                return $(item+':visible').length > 0 && $(item).val() != '';
            }
        );

        var portResult = _.any(['#txtDestPortStart', '#txtDestPortEnd', '#txtSourcePortStart', '#txtSourcePortEnd'],
            function(item) {
                return $(item).val() != '0';
            }
        );

        return result || portResult;
    });

	return {
		init : init
	};
});<div class="form-body">
    <form id="virtualServerForm">
        <div class="form-title" trans="port_forward"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="virtual_server_setting"></label>
                <div class="span8">
                    <input type="radio" name="serverGrp" id="serverEnable" data-bind="checked: portForwardEnable" value="1"/>
                    <label for="serverEnable" trans="enable"></label>
                    <input type="radio" name="serverGrp" id="serverDisable" data-bind="checked: portForwardEnable" value="0"/>
                    <label for="serverDisable" trans="disable"></label>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
        </div>
    </form>
    <div data-bind="visible: oriPortForwardEnable() == '1' && portForwardEnable() == '1' ">
        <form id="portForwardForm">
            <div class="form-title" trans="port_forward_setting"></div>
            <div class="content">
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtIpAddress" trans="ip_address"></label>
                    <div class="span8">
                        <input type="text" name="txtIpAddress" id="txtIpAddress" data-bind="value: ipAddress" class="required" maxlength="15"/>
                        <label trans="ipExam" id="ipExamLabel"></label>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtPortStart" trans='port_range'></label>
                    <div class="span8">
                        <input id='txtPortStart' name="txtPortStart" type="text" data-bind="value: portStart"
                               class="required rangeInput" maxlength="5"/>
                        -
                        <input id='txtPortEnd' name="txtPortEnd" type="text" data-bind="value: portEnd"
                               class="required rangeInput" maxlength="5"/>
                        <label id='rangeLabel'>(1~65000)</label>
                    </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="protocol" trans="protocol"></label>
                    <div class="span8">
                        <select id="protocol" transid="protocol" data-bind="options: modes, value: selectedMode, optionsText: transOption('protocol'), optionsValue: 'value'"></select>
                     </div>
                </div>
                <div class="row-fluid">
                    <label class="span4 side-right" for="txtComment" trans="comment"></label>
                    <div class="span8">
                        <input type="text" name="txtComment" id="txtComment" data-bind="value: comment" class="required" maxlength="32"/>
                   </div>
                </div>
            </div>
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="rule_max_note"></li>
                </ul>
            </div>
            <div class="form-buttons">
                <input type="submit" class="btn-1 " trans="apply"/>
            </div>
        </form>
        <form id="portForwardListForm">
            <div class="form-title" trans="port_forward_list"></div>
            <div class="content">
                <div id="portForwards" class="fixTableScroll" data-bind="simpleGrid: gridTemplate"></div>
            </div>
            <div class="form-buttons">
                <input type="submit" class="btn-1 " trans="delete" data-bind="enable: gridTemplate.checkedCount() > 0"/>
            </div>
        </form>
    </div>
</div>/**
 * @module prot_forward
 * @class prot_forward
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    var protocolModes = _.map(config.FORWARD_PROTOCOL_MODES, function(item) {
        return new Option(item.name, item.value);
    });

    var columnsTmpl = [
        { columnType:"checkbox", rowText:"index", width:"8%" },
        { headerTextTrans:"ip_address", rowText:"ipAddress", width:"23%" },
        { headerTextTrans:"port_range", rowText:"portRange", width:"23%" },
        { headerTextTrans:"protocol", rowText:"protocol", width:"23%" },
        { headerTextTrans:"comment", rowText:"comment", width:"23%" }
    ];

    /**
     * prot_forward VM
     * @class PortForwardVM
     */
	function PortForwardVM() {
        var self = this;
        var info = getPortForward();

        self.portForwardEnable = ko.observable(info.portForwardEnable);
        self.oriPortForwardEnable = ko.observable(info.portForwardEnable);

        self.ipAddress = ko.observable('');
        self.portStart = ko.observable('');
        self.portEnd = ko.observable('');

        self.modes = ko.observableArray(protocolModes);
        self.selectedMode = ko.observable('3');
        self.comment = ko.observable('');

        self.rules = ko.observableArray(info.portForwardRules);

        self.gridTemplate = new ko.simpleGrid.viewModel({
            data:self.rules(),
            idName:"index",
            columns:columnsTmpl,
            tmplType:'list',
            pageSize: 10
        });

        /**
         * è®¾å®,æ°å¢,å é¤åè°å½æ°
         * @method callback
         */
        self.callback = function(result) {
            if (result.result == "success") {
                clear();
                init(self);
                successOverlay();
            } else {
                errorOverlay();
            }
        };

        /**
         * æåµæ·»å è§åè¾å¥
         * @method clear
         */
        function clear() {
            self.ipAddress('');
            self.portStart('');
            self.portEnd('');
            self.selectedMode('TCP&UDP');
            self.comment('');
        }

        /**
         * è®¾å®èææå¡å¨
         * @method enableVirtualServer
         */
        self.enableVirtualServer = function() {
            showLoading();
            var params = {};
            params.portForwardEnable = self.portForwardEnable();
            service.enableVirtualServer(params, self.callback);
        };

        /**
         * ä¿å­è§å
         * @method save
         */
        self.save = function() {
            if(self.rules().length >= config.portForwardMax) {
                showAlert({msg: "rules_max", params: config.portForwardMax});
                return;
            }

            if(self.checkExist()) {
                showAlert("rule_exist");
                return;
            }

            showLoading();
            var params = {};
            params.portForwardEnable = self.portForwardEnable();
            params.ipAddress = self.ipAddress();
            params.portStart = self.portStart();
            params.portEnd = self.portEnd();
            params.protocol = self.selectedMode();
            params.comment = self.comment();
            service.setPortForward(params, self.callback);
        };

        /**
         * æ£æ¥æ°å¢è§åæ¯å¦å·²ç»å­å¨
         * @method checkExist
         */
        self.checkExist = function() {
            var newRule = {
                ipAddress: self.ipAddress(),
                portRange: self.portStart() + ' - ' + self.portEnd(),
                protocol: transProtocolValue(self.selectedMode()),
                comment: self.comment()
            };

            var oldRule;
            var rules = self.rules();
            for(var i = 0; i < rules.length; i++) {
                oldRule = {
                    ipAddress: rules[i].ipAddress,
                    portRange: rules[i].portRange,
                    protocol: rules[i].protocol,
                    comment: rules[i].comment
                };

                if(_.isEqual(newRule, oldRule)) {
                    return true;
                }
            }
            return false;
        };

        /**
         * å é¤è§å
         * @method deleteForwardRules
         */
        self.deleteForwardRules = function() {
            var ids = self.gridTemplate.selectedIds();
            if(ids.length == 0) {
                showAlert("no_data_selected");
                return;
            }

            showConfirm("confirm_data_delete", function () {
                showLoading('deleting');
                var params = {};
                params.indexs = ids;
                service.deleteForwardRules(params, self.callback);
            });
        };
    }

    /**
     * è·åport forwardä¿¡æ¯
     * @method getPortForward
     */
    function getPortForward() {
        return service.getPortForward();
    }


    /**
     * åå§åport forward view model
     * @method init
     */
	function init(viewModel) {
        var vm;
        if(viewModel) {
            vm = viewModel;
            var info = getPortForward();
            vm.portForwardEnable(info.portForwardEnable);
            vm.oriPortForwardEnable(info.portForwardEnable);
            vm.rules(info.portForwardRules);
            vm.gridTemplate.data(info.portForwardRules);
            refreshTableHeight();
            return;
        }

		vm = new PortForwardVM();
        var container = $('#container');
        ko.cleanNode(container[0]);
		ko.applyBindings(vm, container[0]);

        fixTableHeight();
        renderCheckbox();

        $('#virtualServerForm').validate({
            submitHandler : function() {
                vm.enableVirtualServer();
            }
        });

        $('#portForwardListForm').validate({
            submitHandler : function() {
                vm.deleteForwardRules();
            }
        });

        $('#portForwardForm').validate({
            submitHandler : function() {
                vm.save();
            },
            rules: {
                txtIpAddress: {
                    ip_check: true
                },
                txtPortStart: {
                    digits: true,
                    range_except: [1, 65000],
                    portCompare: "#txtPortEnd"
                },
                txtPortEnd: {
                    digits: true,
                    range_except: [1, 65000],
                    portCompare: "#txtPortStart"
                },
                txtComment: {
                    comment_check: true
                }
            },
            groups: {
                range: "txtPortStart txtPortEnd"
            },
            errorPlacement: function(error, element) {
                if(element.attr("name") == "txtIpAddress") {
                    error.insertAfter("#ipExamLabel");
                }
                else if(element.attr("name") == "txtPortStart" || element.attr("name") == "txtPortEnd") {
                    error.insertAfter("#rangeLabel");
                }
                else
                    error.insertAfter(element);
            }
        });
	}

	return {
		init : init
	};
});/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.0.2 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
/*jslint regexp: true, nomen: true */
/*global window, navigator, document, importScripts, jQuery, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    'use strict';

    var version = '2.0.2',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        ostring = Object.prototype.toString,
        ap = Array.prototype,
        aps = ap.slice,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && navigator && document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false,
        req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return obj.hasOwnProperty(prop);
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     * This is not robust in IE for transferring methods that match
     * Object.prototype names, but the uses of mixin here seem unlikely to
     * trigger a problem related to that.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value !== 'string') {
                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    //Allow getting a global that expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    function makeContextModuleFunc(func, relMap, enableBuildCallback) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0), lastArg;
            if (enableBuildCallback &&
                isFunction((lastArg = args[args.length - 1]))) {
                lastArg.__requireJsBuild = true;
            }
            args.push(relMap);
            return func.apply(null, args);
        };
    }

    function addRequireMethods(req, context, relMap) {
        each([
            ['toUrl'],
            ['undef'],
            ['defined', 'requireDefined'],
            ['specified', 'requireSpecified']
        ], function (item) {
            var prop = item[1] || item[0];
            req[item[0]] = context ? makeContextModuleFunc(context[prop], relMap) :
                //If no context, then use default context. Reference from
                //contexts instead of early binding to default context, so
                //that during builds, the latest instance of the default
                //context with its config gets used.
                function () {
                    var ctx = contexts[defContextName];
                    return ctx[prop].apply(ctx, arguments);
                };
        });
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite and existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var config = {
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                pkgs: {},
                shim: {}
            },
            registry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            requireCounter = 1,
            unnormalizedCounter = 1,
            //Used to track the order in which modules
            //should be executed, by the order they
            //load. Important for consistent cycle resolution
            //behavior.
            waitAry = [],
            inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; ary[i]; i+= 1) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                        //End of the line. Keep at least one non-dot
                        //path segment at the front so it can be mapped
                        //correctly to disk. Otherwise, there is likely
                        //no path mapping for a path starting with '..'.
                        //This can still fail, but catches the most reasonable
                        //uses of ..
                        break;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var baseParts = baseName && baseName.split('/'),
                map = config.map,
                starMap = map && map['*'],
                pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,
                foundMap;

            //Adjust any relative paths.
            if (name && name.charAt(0) === '.') {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    if (config.pkgs[baseName]) {
                        //If the baseName is a package name, then just treat it as one
                        //name to concat the name with.
                        baseParts = [baseName];
                    } else {
                        //Convert baseName to array, and lop off the last part,
                        //so that . matches that 'directory' and not name of the baseName's
                        //module. For instance, baseName of 'one/two/three', maps to
                        //'one/two/three.js', but we want the directory, 'one/two' for
                        //this normalization.
                        baseParts = baseParts.slice(0, baseParts.length - 1);
                    }

                    name = baseParts.concat(name.split('/'));
                    trimDots(name);

                    //Some use of packages may use a . path to reference the
                    //'main' module name, so normalize for that.
                    pkgConfig = config.pkgs[(pkgName = name[0])];
                    name = name.join('/');
                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {
                        name = pkgName;
                    }
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }

            //Apply map config if available.
            if (applyMap && (baseParts || starMap) && map) {
                nameParts = name.split('/');

                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = map[baseParts.slice(0, j).join('/')];

                            //baseName segment has  config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = mapValue[nameSegment];
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    break;
                                }
                            }
                        }
                    }

                    if (!foundMap && starMap && starMap[nameSegment]) {
                        foundMap = starMap[nameSegment];
                    }

                    if (foundMap) {
                        nameParts.splice(0, i, foundMap);
                        name = nameParts.join('/');
                        break;
                    }
                }
            }

            return name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                        scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = config.paths[id];
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                removeScript(id);
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.undef(id);
                context.require([id]);
                return true;
            }
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var index = name ? name.indexOf('!') : -1,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '',
                url, pluginModule, suffix;

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            if (index !== -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = defined[prefix];
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        normalizedName = normalize(name, parentName, applyMap);
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Calculate url for the module, if it has a name.
                    //Use name here since nameToUrl also calls normalize,
                    //and for relative names that are outside the baseUrl
                    //this causes havoc. Was thinking of just removing
                    //parentModuleMap to avoid extra normalization, but
                    //normalize() still does a dot removal because of
                    //issue #142, so just pass in name here and redo
                    //the normalization. Paths outside baseUrl are just
                    //messy to support.
                    url = context.nameToUrl(name, null, parentModuleMap);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                    prefix + '!' + normalizedName :
                    normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = registry[id];

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = registry[id];

            if (hasProp(defined, id) &&
                (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                getModule(depMap).on(name, fn);
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = registry[id];
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length - 1, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        /**
         * Helper function that creates a require function object to give to
         * modules that ask for it as a dependency. It needs to be specific
         * per module because of the implication of path mappings that may
         * need to be relative to the module name.
         */
        function makeRequire(mod, enableBuildCallback, altRequire) {
            var relMap = mod && mod.map,
                modRequire = makeContextModuleFunc(altRequire || context.require,
                                                   relMap,
                                                   enableBuildCallback);

            addRequireMethods(modRequire, context, relMap);
            modRequire.isBrowser = isBrowser;

            return modRequire;
        }

        handlers = {
            'require': function (mod) {
                return makeRequire(mod);
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    return (mod.exports = defined[mod.map.id] = {});
                }
            },
            'module': function (mod) {
                return (mod.module = {
                    id: mod.map.id,
                    uri: mod.map.url,
                    config: function () {
                        return (config.config && config.config[mod.map.id]) || {};
                    },
                    exports: defined[mod.map.id]
                });
            }
        };

        function removeWaiting(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];

            each(waitAry, function (mod, i) {
                if (mod.map.id === id) {
                    waitAry.splice(i, 1);
                    if (!mod.defined) {
                        context.waitCount -= 1;
                    }
                    return true;
                }
            });
        }

        function findCycle(mod, traced) {
            var id = mod.map.id,
                depArray = mod.depMaps,
                foundModule;

            //Do not bother with unitialized modules or not yet enabled
            //modules.
            if (!mod.inited) {
                return;
            }

            //Found the cycle.
            if (traced[id]) {
                return mod;
            }

            traced[id] = true;

            //Trace through the dependencies.
            each(depArray, function (depMap) {
                var depId = depMap.id,
                    depMod = registry[depId];

                if (!depMod) {
                    return;
                }

                if (!depMod.inited || !depMod.enabled) {
                    //Dependency is not inited, so this cannot
                    //be used to determine a cycle.
                    foundModule = null;
                    delete traced[id];
                    return true;
                }

                //mixin traced to a new object for each dependency, so that
                //sibling dependencies in this object to not generate a
                //false positive match on a cycle. Ideally an Object.create
                //type of prototype delegation would be used here, but
                //optimizing for file size vs. execution speed since hopefully
                //the trees are small for circular dependency scans relative
                //to the full app perf.
                return (foundModule = findCycle(depMod, mixin({}, traced)));
            });

            return foundModule;
        }

        function forceExec(mod, traced, uninited) {
            var id = mod.map.id,
                depArray = mod.depMaps;

            if (!mod.inited || !mod.map.isDefine) {
                return;
            }

            if (traced[id]) {
                return defined[id];
            }

            traced[id] = mod;

            each(depArray, function(depMap) {
                var depId = depMap.id,
                    depMod = registry[depId],
                    value;

                if (handlers[depId]) {
                    return;
                }

                if (depMod) {
                    if (!depMod.inited || !depMod.enabled) {
                        //Dependency is not inited,
                        //so this module cannot be
                        //given a forced value yet.
                        uninited[id] = true;
                        return;
                    }

                    //Get the value for the current dependency
                    value = forceExec(depMod, traced, uninited);

                    //Even with forcing it may not be done,
                    //in particular if the module is waiting
                    //on a plugin resource.
                    if (!uninited[depId]) {
                        mod.defineDepById(depId, value);
                    }
                }
            });

            mod.check(true);

            return defined[id];
        }

        function modCheck(mod) {
            mod.check();
        }

        function checkLoaded() {
            var waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                stillLoading = false,
                needCycleCheck = true,
                map, modId, err, usingPathFallback;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(registry, function (mod) {
                map = mod.map;
                modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {

                each(waitAry, function (mod) {
                    if (mod.defined) {
                        return;
                    }

                    var cycleMod = findCycle(mod, {}),
                        traced = {};

                    if (cycleMod) {
                        forceExec(cycleMod, traced, {});

                        //traced modules may have been
                        //removed from the registry, but
                        //their listeners still need to
                        //be called.
                        eachProp(traced, modCheck);
                    }
                });

                //Now that dependencies have
                //been satisfied, trigger the
                //completion check that then
                //notifies listeners.
                eachProp(registry, modCheck);
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = undefEvents[map.id] || {};
            this.map = map;
            this.shim = config.shim[map.id];
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function(depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);
                this.depMaps.rjsSkipMap = depMaps.rjsSkipMap;

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDepById: function (id, depExports) {
                var i;

                //Find the index for this dependency.
                each(this.depMaps, function (map, index) {
                    if (map.id === id) {
                        i = index;
                        return true;
                    }
                });

                return this.defineDep(i, depExports);
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    makeRequire(this, true)(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function() {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks is the module is ready to define itself, and if so,
             * define it. If the silent argument is true, then it will just
             * define, but not notify listeners, and not ask for a context-wide
             * check of all loaded modules. That is useful for cycle breaking.
             */
            check: function (silent) {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory,
                    err, cjsModule;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error.
                            if (this.events.error) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            if (this.map.isDefine) {
                                //If setting exports via 'module' is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                cjsModule = this.module;
                                if (cjsModule &&
                                    cjsModule.exports !== undefined &&
                                    //Make sure it is not already the exports value
                                    cjsModule.exports !== this.exports) {
                                    exports = cjsModule.exports;
                                } else if (exports === undefined && this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = [this.map.id];
                                err.requireType = 'define';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        delete registry[id];

                        this.defined = true;
                        context.waitCount -= 1;
                        if (context.waitCount === 0) {
                            //Clear the wait array used for cycles.
                            waitAry = [];
                        }
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (!silent) {
                        if (this.defined && !this.defineEmitted) {
                            this.defineEmitted = true;
                            this.emit('defined', this.exports);
                            this.defineEmitComplete = true;
                        }
                    }
                }
            },

            callPlugin: function() {
                var map = this.map,
                    id = map.id,
                    pluginMap = makeModuleMap(map.prefix, null, false, true);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        load, normalizedMap, normalizedMod;

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap,
                                                      false,
                                                      true);
                        on(normalizedMap,
                           'defined', bind(this, function (value) {
                            this.init([], function () { return value; }, null, {
                                enabled: true,
                                ignore: true
                            });
                        }));
                        normalizedMod = registry[normalizedMap.id];
                        if (normalizedMod) {
                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                removeWaiting(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = function (moduleName, text) {
                        /*jslint evil: true */
                        var hasInteractive = useInteractive;

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(makeModuleMap(moduleName));

                        req.exec(text);

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Support anonymous modules.
                        context.completeLoad(moduleName);
                    };

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, makeRequire(map.parentMap, true, function (deps, cb) {
                        deps.rjsSkipMap = true;
                        return context.require(deps, cb);
                    }), load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                this.enabled = true;

                if (!this.waitPushed) {
                    waitAry.push(this);
                    context.waitCount += 1;
                    this.waitPushed = true;
                }

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.depMaps.rjsSkipMap);
                        this.depMaps[i] = depMap;

                        handler = handlers[depMap.id];

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', this.errback);
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!handlers[id] && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = registry[pluginMap.id];
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function(name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry/waitAry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        return (context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            waitCount: 0,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths and packages since they require special processing,
                //they are additive.
                var pkgs = config.pkgs,
                    shim = config.shim,
                    paths = config.paths,
                    map = config.map;

                //Mix in the config values, favoring the new values over
                //existing ones in context.config.
                mixin(config, cfg, true);

                //Merge paths.
                config.paths = mixin(paths, cfg.paths, true);

                //Merge map
                if (cfg.map) {
                    config.map = mixin(map || {}, cfg.map, true, true);
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if (value.exports && !value.exports.__buildReady) {
                            value.exports = context.makeShimExports(value.exports);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;
                        location = pkgObj.location;

                        //Create a brand new object on pkgs, since currentPackages can
                        //be passed in again, and config.pkgs is the internal transformed
                        //state for all package configs.
                        pkgs[pkgObj.name] = {
                            name: pkgObj.name,
                            location: location || pkgObj.name,
                            //Remove leading dot in main, so main paths are normalized,
                            //and remove any trailing .js, since different package
                            //envs have different conventions: some use a module name,
                            //some use a file name.
                            main: (pkgObj.main || 'main')
                                  .replace(currDirRegExp, '')
                                  .replace(jsSuffixRegExp, '')
                        };
                    });

                    //Done with modifications, assing packages back to context config
                    config.pkgs = pkgs;
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    mod.map = makeModuleMap(id);
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (exports) {
                var func;
                if (typeof exports === 'string') {
                    func = function () {
                        return getGlobal(exports);
                    };
                    //Save the exports for use in nodefine checking.
                    func.exports = exports;
                    return func;
                } else {
                    return function () {
                        return exports.apply(global, arguments);
                    };
                }
            },

            requireDefined: function (id, relMap) {
                return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
            },

            requireSpecified: function (id, relMap) {
                id = makeModuleMap(id, relMap, false, true).id;
                return hasProp(defined, id) || hasProp(registry, id);
            },

            require: function (deps, callback, errback, relMap) {
                var moduleName, id, map, requireMod, args;
                if (typeof deps === 'string') {
                    if (isFunction(callback)) {
                        //Invalid call
                        return onError(makeError('requireargs', 'Invalid require call'), errback);
                    }

                    //Synchronous access to one module. If require.get is
                    //available (as in the Node adapter), prefer that.
                    //In this case deps is the moduleName and callback is
                    //the relMap
                    if (req.get) {
                        return req.get(context, deps, callback);
                    }

                    //Just return the module wanted. In this scenario, the
                    //second arg (if passed) is just the relMap.
                    moduleName = deps;
                    relMap = callback;

                    //Normalize module name, if it contains . or ..
                    map = makeModuleMap(moduleName, relMap, false, true);
                    id = map.id;

                    if (!hasProp(defined, id)) {
                        return onError(makeError('notloaded', 'Module name "' +
                                    id +
                                    '" has not been loaded yet for context: ' +
                                    contextName));
                    }
                    return defined[id];
                }

                //Callback require. Normalize args. if callback or errback is
                //not a function, it means it is a relMap. Test errback first.
                if (errback && !isFunction(errback)) {
                    relMap = errback;
                    errback = undefined;
                }
                if (callback && !isFunction(callback)) {
                    relMap = callback;
                    callback = undefined;
                }

                //Any defined modules in the global queue, intake them now.
                takeGlobalQueue();

                //Make sure any remaining defQueue items get properly processed.
                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                    } else {
                        //args are id, deps, factory. Should be normalized by the
                        //define() function.
                        callGetModule(args);
                    }
                }

                //Mark all the dependencies as needing to be loaded.
                requireMod = getModule(makeModuleMap(null, relMap));

                requireMod.init(deps, callback, errback, {
                    enabled: true
                });

                checkLoaded();

                return context.require;
            },

            undef: function (id) {
                var map = makeModuleMap(id, null, true),
                    mod = registry[id];

                delete defined[id];
                delete urlFetched[map.url];
                delete undefEvents[id];

                if (mod) {
                    //Hold on to listeners in case the
                    //module will be attempted to be reloaded
                    //using a different config.
                    if (mod.events.defined) {
                        undefEvents[id] = mod.events;
                    }

                    removeWaiting(id);
                }
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. parent module is passed in for context,
             * used by the optimizer.
             */
            enable: function (depMap, parent) {
                var mod = registry[depMap.id];
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var shim = config.shim[moduleName] || {},
                shExports = shim.exports && shim.exports.exports,
                found, args, mod;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = registry[moduleName];

                if (!found &&
                    !defined[moduleName] &&
                    mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exports]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name + .extension into an URL path.
             * *Requires* the use of a module name. It does not support using
             * plain URLs like nameToUrl.
             */
            toUrl: function (moduleNamePlusExt, relModuleMap) {
                var index = moduleNamePlusExt.lastIndexOf('.'),
                    ext = null;

                if (index !== -1) {
                    ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                    moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                }

                return context.nameToUrl(moduleNamePlusExt, ext, relModuleMap);
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             */
            nameToUrl: function (moduleName, ext, relModuleMap) {
                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,
                    parentPath;

                //Normalize module name if have a base relative module name to work from.
                moduleName = normalize(moduleName, relModuleMap && relModuleMap.id, true);

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;
                    pkgs = config.pkgs;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');
                        pkg = pkgs[parentModule];
                        parentPath = paths[parentModule];
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        } else if (pkg) {
                            //If module name is just the package name, then looking
                            //for the main module.
                            if (moduleName === pkg.name) {
                                pkgPath = pkg.location + '/' + pkg.main;
                            } else {
                                pkgPath = pkg.location;
                            }
                            syms.splice(0, i, pkgPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/') + (ext || '.js');
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callack function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                    (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));
                }
            }
        });
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var contextName = defContextName,
            context, config;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = contexts[contextName];
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require, using
    //default context if no context specified.
    addRequireMethods(req);

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = function (err) {
        throw err;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = config.xhtml ?
                   document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                   document.createElement('script');
            node.type = config.scriptType || 'text/javascript';
            node.charset = 'utf-8';

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                //Check if node.attachEvent is artificially added by custom script or
                //natively supported by browser
                //read https://github.com/jrburke/requirejs/issues/187
                //if we can NOT find [native code] then it must NOT natively supported.
                //in IE8, node.attachEvent does not have toString()
                //Note the test for "[native code" with no closing brace, see:
                //https://github.com/jrburke/requirejs/issues/273
                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEvenListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            //In a web worker, use importScripts. This is not a very
            //efficient use of importScripts, importScripts will block until
            //its script is downloaded and evaluated. However, if web workers
            //are in play, the expectation that a build has been done so that
            //only one script needs to be loaded anyway. This may need to be
            //reevaluated if other use cases become common.
            importScripts(url);

            //Account for anonymous modules
            context.completeLoad(moduleName);
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {

                //Pull off the directory of data-main for use as the
                //baseUrl.
                src = dataMain.split('/');
                mainScript = src.pop();
                subPath = src.length ? src.join('/')  + '/' : './';

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since dataMain is now
                //like a module name.
                dataMain = mainScript.replace(jsSuffixRegExp, '');

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous functions
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = [];
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps.length && isFunction(callback)) {
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));
/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			fired = true;
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		pixelMargin: true
	};

	// jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
	jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
			paddingMarginBorderVisibility, paddingMarginBorder,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		paddingMarginBorder = "padding:0;margin:0;border:";
		positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
		paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
		style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
		html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
			"<table " + style + "' cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check if div with explicit width and no margin-right incorrectly
		// gets computed margin-right based on width of container. For more
		// info see bug #3333
		// Fails in WebKit before Feb 2011 nightlies
		// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
		if ( window.getComputedStyle ) {
			div.innerHTML = "";
			marginDiv = document.createElement( "div" );
			marginDiv.style.width = "0";
			marginDiv.style.marginRight = "0";
			div.style.width = "2px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.width = div.style.padding = "1px";
			div.style.border = 0;
			div.style.overflow = "hidden";
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div style='width:5px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
		}

		div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		if ( window.getComputedStyle ) {
			div.style.marginTop = "1%";
			support.pixelMargin = ( window.getComputedStyle( div, null ) || { marginTop: 0 } ).marginTop !== "1%";
		}

		if ( typeof container.style.zoom !== "undefined" ) {
			container.style.zoom = 1;
		}

		body.removeChild( container );
		marginDiv = div = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise( object );
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: selector && quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process events on disabled elements (#6911, #8165)
				if ( cur.disabled !== true ) {
					selMatch = {};
					matches = [];
					jqcur[0] = cur;
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = (
								handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
							);
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},
		
		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;

	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];

			parts.push( m[1] );

			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}

				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},

	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},

		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					if ( type === "first" ) {
						return true;
					}

					node = elem;

					/* falls through */
				case "last":
					while ( (node = node.nextSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}

					doneName = match[0];
					parent = elem.parentNode;

					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;

						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}

						parent[ expando ] = doneName;
					}

					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},

		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}
// Expose origPOS
// "global" as in regardless of relation to brackets/parens
Expr.match.globalPOS = origPOS;

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}

		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );

				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );

					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}

				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );

					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}

						} else {
							return makeArray( [], extra );
						}
					}

					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}

			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );

		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try {
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.globalPOS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];

		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					null;
			}


			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						jQuery.ajax({
							type: "GET",
							global: false,
							url: elem.src,
							async: false,
							dataType: "script"
						});
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );

	// Clear flags for bubbling special change/submit events, they must
	// be reattached when the newly cloned events are first activated
	dest.removeAttribute( "_submit_attached" );
	dest.removeAttribute( "_change_attached" );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType, script, j,
				ret = [];

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div"),
						safeChildNodes = safeFragment.childNodes,
						remove;

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Clear elements from DocumentFragment (safeFragment or otherwise)
					// to avoid hoarding elements. Fixes #11356
					if ( div ) {
						div.parentNode.removeChild( div );

						// Guard against -1 index exceptions in FF3.6
						if ( safeChildNodes.length > 0 ) {
							remove = safeChildNodes[ safeChildNodes.length - 1 ];

							if ( remove && remove.parentNode ) {
								remove.parentNode.removeChild( remove );
							}
						}
					}
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				script = ret[i];
				if ( scripts && jQuery.nodeName( script, "script" ) && (!script.type || rscriptType.test( script.type )) ) {
					scripts.push( script.parentNode ? script.parentNode.removeChild( script ) : script );

				} else {
					if ( script.nodeType === 1 ) {
						var jsTags = jQuery.grep( script.getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( script );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
	rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
	rrelNum = /^([\-+])=([\-+.\de]+)/,
	rmargin = /^margin/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },

	// order is important!
	cssExpand = [ "Top", "Right", "Bottom", "Left" ],

	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	return jQuery.access( this, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	}, name, value, arguments.length > 1 );
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {},
			ret, name;

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// DEPRECATED in 1.3, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle, width,
			style = elem.style;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {

			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
		// which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !jQuery.support.pixelMargin && computedStyle && rmargin.test( name ) && rnumnonpx.test( ret ) ) {
			width = style.width;
			style.width = ret;
			ret = computedStyle.width;
			style.width = width;
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( rnumnonpx.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		i = name === "width" ? 1 : 0,
		len = 4;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i += 2 ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ];
	}

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test(val) ) {
		return val;
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i += 2 ) {
			val += parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ]) ) || 0;
			}
		}
	}

	return val + "px";
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWidthOrHeight( elem, name, extra );
				} else {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				}
			}
		},

		set: function( elem, value ) {
			return rnum.test( value ) ?
				value + "px" :
				value;
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "margin-right" );
					} else {
						return elem.style.marginRight;
					}
				});
			}
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {

	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};
});




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test( s.contentType );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( (display === "" && jQuery.css(elem, "display") === "none") ||
						!jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e, hooks, replace,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			// first pass over propertys to expand / normalize
			for ( p in prop ) {
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				if ( ( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks ) {
					replace = hooks.expand( prop[ name ] );
					delete prop[ name ];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'p' from above because we have the correct "name"
					for ( p in replace ) {
						if ( ! ( p in prop ) ) {
							prop[ p ] = replace[ p ];
						}
					}
				}
			}

			for ( name in prop ) {
				val = prop[ name ];
				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return ( -Math.cos( p*Math.PI ) / 2 ) + 0.5;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				if ( self.options.hide ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.start );
				} else if ( self.options.show ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.end );
				}
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Ensure props that can't be negative don't go there on undershoot easing
jQuery.each( fxAttrs.concat.apply( [], fxAttrs ), function( i, prop ) {
	// exclude marginTop, marginLeft, marginBottom and marginRight from this list
	if ( prop.indexOf( "margin" ) ) {
		jQuery.fx.step[ prop ] = function( fx ) {
			jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var getOffset,
	rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	getOffset = function( elem, doc, docElem, box ) {
		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow( doc ),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	getOffset = function( elem, doc, docElem ) {
		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var elem = this[0],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return null;
	}

	if ( elem === doc.body ) {
		return jQuery.offset.bodyOffset( elem );
	}

	return getOffset( elem, doc, doc.documentElement );
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					jQuery.support.boxModel && win.document.documentElement[ method ] ||
						win.document.body[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	var clientProp = "client" + name,
		scrollProp = "scroll" + name,
		offsetProp = "offset" + name;

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( value ) {
		return jQuery.access( this, function( elem, type, value ) {
			var doc, docElemProp, orig, ret;

			if ( jQuery.isWindow( elem ) ) {
				// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
				doc = elem.document;
				docElemProp = doc.documentElement[ clientProp ];
				return jQuery.support.boxModel && docElemProp ||
					doc.body && doc.body[ clientProp ] || docElemProp;
			}

			// Get document width or height
			if ( elem.nodeType === 9 ) {
				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
				doc = elem.documentElement;

				// when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
				// so we can't use max, as it'll choose the incorrect offset[Width/Height]
				// instead we use the correct client[Width/Height]
				// support:IE6
				if ( doc[ clientProp ] >= doc[ scrollProp ] ) {
					return doc[ clientProp ];
				}

				return Math.max(
					elem.body[ scrollProp ], doc[ scrollProp ],
					elem.body[ offsetProp ], doc[ offsetProp ]
				);
			}

			// Get width or height on the element
			if ( value === undefined ) {
				orig = jQuery.css( elem, type );
				ret = parseFloat( orig );
				return jQuery.isNumeric( ret ) ? ret : orig;
			}

			// Set the width or height on the element
			jQuery( elem ).css( type, value );
		}, type, value, arguments.length, null );
	};
});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );
<form id="frmRestart">
    <div class="form-body">
        <div class="form-title" trans="restart"></div>
        <div class="note paddingleft15" trans="restart_button"></div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="restart"/>
        </div>
    </div>
</form>/**
 * restart æ¨¡å
 * @module restart
 * @class restart
 */

define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

    function ($, ko, config, service, _) {
        /**
         * RestartVM
         * @class RestartVM
         */
        function RestartVM() {
            var self = this;
            /**
             * éå¯
             * @event restart
             */
            self.restart = function () {
//                var connectStatus = service.getConnectionInfo().connectStatus;
//                if (checkConnectedStatus(connectStatus)) {
//                    showAlert("restart_when_connected");
//                    return;
//                }
                showConfirm("restart_confirm", function () {
                    showLoading("restarting");
                    service.restart({}, function (data) {
                        if (data && data.result == "success") {
                            successOverlay();
                        } else {
                            errorOverlay();
                        }
                    }, $.noop);
                });
            }
        }

        /**
         * åå§å ViewModelï¼å¹¶è¿è¡ç»å®
         * @method init
         */
        function init() {
            var vm = new RestartVM();
            ko.applyBindings(vm, $('#container')[0]);

            $('#frmRestart').validate({
                submitHandler:function () {
                    vm.restart();
                }
            });
        }

        return {
            init:init
        }
    });
<form id="frmPin">
    <div class="form-body">
        <div class="form-title" trans="restore_title"></div>
        <div class="note paddingleft15" trans="restore_button"></div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="restore"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="restore_note_info"></li>
            </ul>
        </div>
    </div>
</form>/**
 * restore æ¨¡å
 * @module restore
 * @class restore
 */

define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

    function ($, ko, config, service, _) {
        /**
         * restoreViewModel
         * @class restoreVM
         */
        function restoreVM() {
            var self = this;
            /**
             * æ¢å¤åºåè®¾ç½®
             * @event restore
             */
            self.restore = function () {
//                var connectStatus = service.getConnectionInfo().connectStatus;
//                if (checkConnectedStatus(connectStatus)) {
//                    showAlert("restore_when_connected");
//                    return;
//                }
                showConfirm("restore_confirm", function () {
                    showLoading("restoring");
                    service.restoreFactorySettings({}, function (data) {
                        if (data && data.result == "success") {
                            successOverlay();
                        } else {
                            errorOverlay();
                        }
                    }, $.noop);
                });
            }
        }

        /**
         * åå§å ViewModelï¼å¹¶è¿è¡ç»å®
         * @method init
         */
        function init() {
            var vm = new restoreVM();
            ko.applyBindings(vm, $('#container')[0]);

            $('#frmPin').validate({
                submitHandler:function () {
                    vm.restore();
                }
            });
        }

        return {
            init:init
        }
    });
ï»¿/**
 * @module router
 * @class router
 */
define([
    'config/menu',
    'jquery',
    'config/config',
    'service',
    'underscore'],
    function (menu, $, config, service, _) {
        var currentHash = '';
        var container = $('#container');
        var _otaUpdateCancelFlag = false;

        /**
         * é»è®¤å¥å£é¡µé¢ä¸º#home, å®æ¶æ£æ¥hashç¶æ
         * @method init
         */
        function init() {
            checkSimCardStatus();
            window.location.hash = window.location.hash || config.defaultRoute;
            //if support onhashchange then use. If ie8 in ie7 mode, it doesn't trigger onhashchange.
            if (('onhashchange' in window) && ((typeof document.documentMode === 'undefined') || document.documentMode == 8)) {
                window.onhashchange = hashCheck;
                hashCheck();
            } else {
                setInterval(hashCheck, 200);
            }

            //å¦æä¿®æ¹äºé¡µé¢åå®¹, ç¦»å¼æ¶ç»åºæç¤º
            $("a[href^='#']").die('click').live('click', function () {
                var $this = $(this);
                config.CONTENT_MODIFIED.checkChangMethod();
                return checkFormContentModify($this.attr('href'));
            });
        }

        checkFormContentModify = function (href) {
            if (config.CONTENT_MODIFIED.modified && window.location.hash != href) {
                if (config.CONTENT_MODIFIED.message == 'sms_to_save_draft') {
                    config.CONTENT_MODIFIED.callback.ok(config.CONTENT_MODIFIED.data);
                    config.resetContentModifyValue();
                    window.location.hash = href;
                } else {
                    showConfirm(config.CONTENT_MODIFIED.message, {ok: function () {
                        config.CONTENT_MODIFIED.callback.ok(config.CONTENT_MODIFIED.data);
                        config.resetContentModifyValue();
                        window.location.hash = href;
                    }, no: function () {
                        var result = config.CONTENT_MODIFIED.callback.no(config.CONTENT_MODIFIED.data);
                        if (!result) {
                            window.location.hash = href;
                            config.resetContentModifyValue();
                        }
                    }});
                }
                return false;
            } else {
                return true;
            }
        }

        /**
         * å®æ¶æ¥çSIMå¡çç¶æï¼è¥å½åSIMå¡ç¶æä¸ä¸ºå°±ç»ªç¶æä¸æªæ¾ç¤º
         * nosimcardé¡µé¢ï¼åæ¾ç¤ºnosimcardé¡µé¢
         * ä»¥é¿åä¸å³é­webuiï¼éæ°ææè®¾å¤åï¼ä¸åå¤æ­SIMå¡ç¶æçé®é¢
         * @method checkSimCardStatus
         */
        function checkSimCardStatus() {
            setInterval(function () {
                var data = service.getStatusInfo();
                var match = menu.findMenu();
                if (match.length == 0) {
                    return false;
                }
                var requirePinHash = ["phonebook/phonebook", "sms/smslist"];
                var isRequirePin = ($.inArray(match[0].path, requirePinHash) != -1);
                if (match[0].checkSIMStatus === true) {
                    var simstatus = data.simStatus == "modem_sim_undetected"
                        || data.simStatus == "modem_sim_destroy" || data.simStatus == "modem_waitpin"
                        || data.simStatus == "modem_waitpuk";
                    var netlockstatus = data.simStatus == "modem_imsi_waitnck";
                    if (data.isLoggedIn && (
                        ($('#div-nosimcard')[0] == undefined && simstatus)
                            || ($('#div-network-lock')[0] == undefined && netlockstatus)
                            || (($('#div-nosimcard')[0] != undefined || $('#div-network-lock')[0] != undefined) && data.simStatus == "modem_init_complete"))
                        ) {
                        fixedLoadResources(match[0], data.simStatus, isRequirePin);
                    }
                }
            }, 1000);
        }

        /**
         * æ£æ¥ç»å½é¡µé¢èæ¯
         * @method checkLoginPageBg
         */
        function checkLoginPageBg() {
            var info = service.getStatusInfo();
            if (info.isLoggedIn) {
                $("#logout").removeClass("hide");
                $("#login").addClass("hide");
                $("#txtRequire").html("");
                $("#left").removeClass("hide");
                $("#container").addClass("span9");
            } else {
                $("#logout").addClass("hide");
                $("#login").removeClass("hide");
                $("#txtRequire").html("");
                $("#left").addClass("hide");
                $("#container").removeClass("span9");
            }
            var h = window.location.hash
            if (h == '#login' || _.indexOf(config.GUEST_HASH, h) != -1) {
                //$("#themeContainer").attr("style","margin-top:-36px;");
                $("#themeContainer").attr("style", "margin-top:0px;");

            } else {
                $("#themeContainer").attr("style", "margin-top:0px;");
            }

            if (window.location.hash == '#login') {
                $("#mainContainer").addClass('loginBackgroundBlue');
            } else {
                var mainContainer = $("#mainContainer");
                if (mainContainer.hasClass('loginBackgroundBlue')) {
                    $("#container").css({margin: 0});
                    mainContainer.removeClass('loginBackgroundBlue').height('auto');
                }
                /*
                 //é¡µé¢é«åº¦èªéåºï¼æ¯footerä½äºé¡µé¢åºé¨
                 var windowH = window.innerHeight;
                 var statusH = $("#topStatus").outerHeight(true);
                 var navH = $("#nav").outerHeight(true);
                 var footerH = $("#footer").outerHeight(true);
                 var containerHeight = windowH - statusH - navH - footerH - mainContainer.outerHeight();
                 if(containerHeight > 0){
                 var h = windowH - statusH - navH - footerH - 5;
                 mainContainer.height(h + 'px');
                 }
                 */
            }
        }

        /**
         * æ¯å¯¹hashç¶æ, å¦æåååæ ¹æ®æ°çhashå¹éèåéç½®,
         * å¹éä¸ä¸æ¶è·³è½¬å°homeé¡µé¢, å¹éä¸æ¶è®°å½hashå¼å¹¶å¨æå è½½
         * å¯¹åºçèµæºæä»¶
         * @method hashCheck
         */
        function hashCheck() {
            if (window.location.hash != currentHash) {
                //è§£å³ç»éååéé®é¢, ç»éç¨æ·è®¿é®éç»å½ç¨æ·æ¶é¡µé¢ä¸è·³è½¬
                var info = service.getStatusInfo();
                if (window.location.hash == config.defaultRoute || _.indexOf(config.GUEST_HASH, window.location.hash) != -1) {
                    if (info.isLoggedIn) {
                        window.location.hash = currentHash == "" ? "#home" : currentHash;
                        return;
                    }
                }

                var match = menu.findMenu();
                if (match.length == 0) {
                    window.location.hash = config.defaultRoute;
                } else {
                    //TODO: äºçº§èåä¸å¯¹åºä¸çº§èåç¬¬ä¸é¡¹äºç¸åæ¢æ¶ä¸éæ°å è½½æ°æ®, ä¸ä¸é¢çTODO: click the same menu å®ç°æ¹å¼äºæ¥
                    var oldMenu = menu.findMenu(currentHash);
                    currentHash = match[0].hash;
                    if (currentHash == "#login") {
                        menu.rebuild();
                    }

                    if (oldMenu.length != 0 && match[0].path == oldMenu[0].path && match[0].level != oldMenu[0].level && match[0].level != '1' && oldMenu[0].level != '1') {
                        return;
                    }

                    //TODO: click the same menu
//                $('a[href=' + currentHash + ']').die('click').live('click', function() {
//                    if(window.location.hash == currentHash) {
//                        require([match[0].path], function(vm) {
//                            clearValidateMsg();
//                            vm.init();
//                        });
//                    }
//                });

                    checkLoginPageBg();
                    var requirePinHash = ["phonebook/phonebook", "sms/smslist"];
                    var isRequirePin = ($.inArray(match[0].path, requirePinHash) != -1);
                    if (match[0].checkSIMStatus === true || isRequirePin) {
                        //simStatus is undefined when refreshing page
                        if (info.simStatus == undefined) {
                            showLoading('waiting');
                            function checkSIM() {
                                var data = service.getStatusInfo();
                                if (data.simStatus == undefined || $.inArray(data.simStatus, config.TEMPORARY_MODEM_MAIN_STATE) != -1) {
                                    addTimeout(checkSIM, 500);
                                } else {
                                    fixedLoadResources(match[0], data.simStatus, isRequirePin);
                                    hideLoading();
                                }
                            }

                            checkSIM();
                        } else {
                            fixedLoadResources(match[0], info.simStatus, isRequirePin);
                        }
                    } else {
                        loadResources(match[0]);
                    }
                }
            }
        }

        function fixedLoadResources(menuItem, simStatus, isRequirePin) {
            var item = {};
            $.extend(item, menuItem);
            //æ²¡æSIMå¡æ¶ï¼éå¯¹homeé¡µé¢ä¸åå¤çã
            //ç½ç»è¢«éæ¶ï¼homeé¡µé¢æ¾ç¤ºè§£éé¡µé¢
            if (simStatus == "modem_sim_undetected" || simStatus == "modem_sim_destroy") {
                if (!isRequirePin) {
                    item.path = "nosimcard";
                }
            } else if (simStatus == "modem_waitpin" || simStatus == "modem_waitpuk") {
                item.path = "nosimcard";
            } else if (simStatus == "modem_imsi_waitnck") {
                item.path = "network_lock";
            }
            //load tmpl and controller js
            loadResources(item);
        }

        //TODO: prevent first menu click cover the second menu content, need test with device
        //var loadInterrupt;
        /**
         * æ ¹æ®èåéç½®itemå è½½å¯¹åºçèµæº
         * @method loadResources
         * @param {Object} item èåå¯¹è±¡
         */
        function loadResources(item) {
            clearTimer();
            hideLoading();
            var tmplPath = 'text!tmpl/' + item.path + '.html';
            //TODO: prevent first menu click cover the second menu content, need test with device
            //loadInterrupt = false;
            require([tmplPath, item.path], function (tmpl, viewModel) {
                //TODO: prevent first menu click cover the second menu content, need test with device
//            if(loadInterrupt) {
//                return;
//            }
//            loadInterrupt = true;
                //window.document.title = $.i18n.prop(window.location.hash.substring(1)) + ' - ' + config.WEBUI_TITLE;
                container.stop(true, true);
                container.hide();
                container.html(tmpl);
                viewModel.init();
                //support backward/forward
                menu.refreshMenu();
                $('#left, #container').translate();
                menu.activeSubMenu();

                $("form").attr("autocomplete", "off");
                container.fadeIn();

                if (config.UPGRADE_TYPE != "NONE") {
                    var info = service.getStatusInfo();
                    var state = service.getCurrentUpgradeState();
                    var currentState = state.current_upgrade_state;
                    //var r = service.getMandatory();
                    if (!info.is_mandatory) {
                        if (!info.isLoggedIn && currentState == 'upgrade_pack_redownload') {
                            showAlert("ota_interrputed_alert");
                        } else if (!info.isLoggedIn && currentState == '') {
                            var data = service.getNewVersionState();
                            if (data.hasNewVersion) {
                                showAlert("ota_interrputed_alert");
                            }
                        }
                    }
                }

                $('input:visible:enabled:not(.noDefaultFocus):first', '#container').focus();
            });
        }

        return {
            init: init
        };
    });<form id="httpshare_form">
	<div class="form-body">
		<div class="form-title" trans="sdcard"></div>
		<div class="content">
			<div class="row-fluid" id="sd_status_group">
				<label class="span4 side-right" trans="sd_card_status"></label>
                <div class="span8">
                    <label id="sd_card_status_info" class="colorLightBlue show label-content" data-bind="attr:{trans: sdStatusInfo}"></label>
                </div>
			</div>
			<div class="row-fluid" data-bind="visible: sdStatus() == 1">
				<label class="span4 side-right" trans="sd_card_mode"></label>
                <div class="span8">
                    <input type="radio" name="mode_set" id="mode_set_usb" data-bind="checked: selectedMode" value="1"/>
                    <label for="mode_set_usb" trans="sd_card_share_usb_mode"></label>
                    <input type="radio" name="mode_set" id="mode_set_http" data-bind="checked: selectedMode" value="0"/>
                    <label for="mode_set_http" trans="sd_card_share_http_share_mode"></label>
                </div>
			</div>
			<div data-bind="visible: selectedMode() == 0 && sdStatus() == 1">
				<div class="row-fluid">
					<label class="span4 side-right" trans="sd_card_share_setting"></label>
                    <div class="span8">
                        <input type="radio" name="share_enable" id="share_enable_Enable" data-bind="checked: selectedShareEnable" value="1"/>
                        <label for="share_enable_Enable" trans="enable"></label>
                        <input type="radio" name="share_enable" id="share_enable_Disable" data-bind="checked: selectedShareEnable" value="0"/>
                        <label for="share_enable_Disable" trans="disable"></label>
                    </div>
				</div>
                <div data-bind="visible: selectedShareEnable() == 1">
                    <div class="row-fluid">
                        <label class="span4 side-right" trans="sd_card_file_to_share"></label>
                        <div class="span8">
                            <input type="radio" name="file_to_share" id="sd_card_entire_sd_card" data-bind="checked: selectedFileToShare, click: fileToShareClickHandle" value="1"/>
                            <label for="sd_card_entire_sd_card" trans="sd_card_entire_sd_card"></label>
                            <input type="radio" name="file_to_share" id="sd_card_custom_setting" data-bind="checked: selectedFileToShare, click: fileToShareClickHandle" value="0"/>
                            <label for="sd_card_custom_setting" trans="sd_card_custom_setting"></label>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" trans="sd_card_access_type"></label>
                        <div class="span8">
                            <input type="radio" name="access_type" id="sd_card_read_write" data-bind="checked: selectedAccessType" value="1"/>
                            <label for="sd_card_read_write" trans="sd_card_read_write"></label>
                            <input type="radio" name="access_type" id="sd_card_readonly" data-bind="checked: selectedAccessType" value="0"/>
                            <label for="sd_card_readonly" trans="sd_card_readonly"></label>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <label class="span4 side-right" for="path_to_share" trans="sd_card_path_to_share"></label>
                        <div class="span8">
                            <input type="text" id="path_to_share" name="path_to_share" data-bind="value: pathToShare, disable: selectedShareEnable() == 0 || selectedFileToShare() == 1" maxlength="200" class="width250 required"/>
                        </div>
                    </div>
                    <div class="row-fluid" data-bind="visible: isInvalidPath">
                        <span class="span4 side-right"></span>
                        <div class="span8"><span class="colorRed" trans="sd_share_path_is_invalid"></span></div>
                    </div>
                </div>
			</div>
            <div class="form-buttons" data-bind="visible: sdStatus() == 1">
                <input type="submit" class="btn-1" trans="apply" data-bind="disable: disableApplyBtn()"/>
            </div>
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="note_not_support_fs_ntfs"></li>
                    <li trans="note_web_share_mode"></li>
                    <li trans="note_usb_access"></li>
                    <li trans="note_path_to_share_example"></li>
                    <li trans="note_invalid_file_path"></li>
                </ul>
            </div>
		</div>
	</div>
</form>ï»¿define([ 'underscore', 'jquery', 'config/config'], function (_, $, config) {
    /**
     * Service
     * @module service
     * @class service
     */
    var wifiCallbackDestination = window;
    var unknownErrorObject = {
        errorType: 'UnknownError',
        errorId: '123',
        errorText: 'UnknownError'
    };

    var isTest = config.IS_TEST;
    if (isTest) {
        $("#buttom-bubble").hide();
    }
    var timerUpdaterEnable = true;
    // in Product Env, isTest should  be false
    /**
     * Ajaxåæ­¥è°ç¨
     * @method syncRequest
     * @param {Object} params jsonåæ°å¯¹è±¡
     * @param {Boolean} isPost æ¯å¦ä¸ºpostæ¹æ³
     */
    function syncRequest(params, isPost) {
        return ajaxRequest(params, null, null, false, isPost);
    }

    /**
     * Ajaxå¼æ­¥è°ç¨
     * @method asyncRequest
     * @param {Object} params jsonåæ°å¯¹è±¡
     * @param {Function} successCallback æååè°å½æ°
     * @param {Function} errorCallback å¤±è´¥åè°å½æ°
     * @param {Boolean} isPost æ¯å¦ä¸ºpostæ¹æ³
     */
    function asyncRequest(params, successCallback, errorCallback, isPost) {
        ajaxRequest(params, successCallback, errorCallback, true, isPost);
    }

    /**
     * Ajaxå¼æ­¥è°ç¨
     * @method ajaxRequest
     * @param {Object} params jsonåæ°å¯¹è±¡
     * @param {Function} successCallback æååè°å½æ°
     * @param {Function} errorCallback å¤±è´¥åè°å½æ°
     * @param {Boolean} async æ¯å¦ä¸ºå¼æ­¥æ¹æ³
     * @param {Boolean} isPost æ¯å¦ä¸ºpostæ¹æ³
     */
    function ajaxRequest(params, successCallback, errorCallback, async, isPost) {
        var result = null;
        if (params.isTest) {
            result = simulate.simulateRequest(params, successCallback, errorCallback, async, isPost);
            if (async) {
                setTimeout(function () {
                    successCallback(result);
                }, getRandomInt(120) + 50);
                //successCallback(result)
                return;
            } else {
                return result;
            }
        }
        $.ajax({
            type: !!isPost ? "POST" : "GET",
            url: isPost ? "/goform/goform_set_cmd_process" : params.cmd ? "/goform/goform_get_cmd_process"
                : "/goform/goform_set_cmd_process",
            data: params,
            dataType: "json",
            async: !!async,
            cache: false,
            error: function (data) {
                log("ajax error callback");
                if (async) {
                    errorCallback(data);
                } else if (data.status == 200) {
                    result = jQuery.parseJSON('(' + data.responseText + ')');
                }
            },
            success: function (data) {
                log($.extend(params, data));
                if (async) {
                    successCallback(data);
                } else {
                    result = data;
                }
            }
        });
        if (!async) {
            return result;
        }
    }

    /**
     * doStuffä¸å¡å¤çå½æ°
     * @method doStuff
     * @param {Object} params jsonåæ°å¯¹è±¡
     * @param {Object} result éè¯¯å¯¹è±¡
     * @param {Function} prepare æ°æ®åå¤å½æ°
     * @param {Function} dealMethod ç»æééå½æ°
     * @param {Object} errorObject é»è®¤éè¯¯å¯¹è±¡
     * @param {Boolean} isPost æ¯å¦ä¸ºpostæ¹æ³
     */
    function doStuff(args, result, prepare, dealMethod, errorObject, isPost) {
        var params = args[0], callback = args[1], errorCallback = args[2];
        var objectToReturn;

        if (result && typeof result.errorType === 'string') {
            objectToReturn = $.extend(unknownErrorObject, result);

            if (!callback) {
                // sleep(DelayOnEachCallMillis);
                return objectToReturn;
            }
            doCallback(objectToReturn, callback, errorCallback);
        } else {
            objectToReturn = $.extend({}, result); // Duplicate it.

            var requestParams;
            if (prepare) {
                requestParams = prepare(params, isPost);
            } else {
                requestParams = params;
            }
            if (!callback) {
                if (requestParams && (requestParams.cmd || requestParams.goformId)) {
                    var r = syncRequest(requestParams, isPost);
                    if (dealMethod) {
                        objectToReturn = $.extend({}, dealMethod(r));
                    } else {
                        objectToReturn = r;
                    }
                }
                // sleep(DelayOnEachCallMillis);
                return objectToReturn;
            } else {
                if (requestParams && (requestParams.cmd || requestParams.goformId)) {
                    asyncRequest(requestParams, function (data) {
                        if (dealMethod) {
                            objectToReturn = $.extend({}, dealMethod(data));
                        } else {
                            objectToReturn = $.extend({}, data);
                        }
                        //æå¨å¤çcallback
                        if (!requestParams.notCallback) {
                            doCallback(objectToReturn, callback, errorCallback);
                        }
                    }, function () {
                        if (errorObject) {
                            objectToReturn = $.extend(unknownErrorObject, errorObject);
                        } else {
                            objectToReturn = $.extend(unknownErrorObject, {
                                errorType: 'Unknown'
                            });
                        }
                        doCallback(objectToReturn, callback, errorCallback);
                    }, isPost);
                } else {
                    doCallback(objectToReturn, callback, errorCallback);
                }
            }
        }
        function doCallback(resultToReturn, callback, errorCallback) {
            errorCallback = errorCallback ? errorCallback : callback;
            if (isErrorObject(resultToReturn)) {
                switch (resultToReturn.errorType) {
                    case 'cellularNetworkError':
                    case 'deviceError':
                    case 'wifiConnectionError':
                        wifiCallbackDestination.receivedNonSpecificError(resultToReturn);
                        break;
                    default:
                        errorCallback(resultToReturn);
                }
            } else {
                callback(resultToReturn);
            }
        }
    }

    /**
     * è·ååºæ¬çwifiä¿¡æ¯
     * @method getWifiBasic
     * @return {Object} wifi JSON å¯¹è±¡
     */
    function getWifiBasic() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            var wpapsk = config.PASSWORD_ENCODE ? "WPAPSK1_encode,m_WPAPSK1_encode," : "WPAPSK1,m_WPAPSK1,";
            requestParams.cmd = "RadioOff,m_ssid_enable," + wpapsk +
                "SSID1,AuthMode,HideSSID,MAX_Access_num,EncrypType," +
                "m_SSID,m_AuthMode,m_HideSSID,m_MAX_Access_num,m_EncrypType";

            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {
                    wifi_enable: data.RadioOff,
                    multi_ssid_enable: data.m_ssid_enable,
                    //ssid 1
                    AuthMode: data.AuthMode,
                    SSID: data.SSID1,
                    broadcast: data.HideSSID,
                    passPhrase: config.PASSWORD_ENCODE ? Base64.decode(data.WPAPSK1_encode) : data.WPAPSK1,
                    MAX_Access_num: data.MAX_Access_num,
                    cipher: data.EncrypType == "TKIP" ? "0" : data.EncrypType == "AES" ? 1 : 2,
                    //ssid 2
                    m_SSID: data.m_SSID,
                    m_broadcast: data.m_HideSSID,
                    m_MAX_Access_num: data.m_MAX_Access_num,
                    m_AuthMode: data.m_AuthMode,
                    m_passPhrase: config.PASSWORD_ENCODE ? Base64.decode(data.m_WPAPSK1_encode) : data.m_WPAPSK1,
                    m_cipher: data.m_EncrypType == "TKIP" ? "0" : data.m_EncrypType == "AES" ? 1 : 2
                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®wifiå¼å³ä¿¡æ¯
     * @method setWifiSwitch()
     * @param {Object} JSON åæ°å¯¹è±¡
     * @return {Object}
     */
    function setWifiSwitch() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "WIFI_SWITCH",
                isTest: isTest,
                wifi_switch_option: params.wifi_switch_option
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**
     * è®¾ç½®åºæ¬çwifiä¿¡æ¯(SSID1)
     * @method setWifiBasic(SSID1)
     * @param {Object} JSON åæ°å¯¹è±¡
     * @return {Object}
     */
    function setWifiBasic() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "SET_WIFI_SSID1_SETTINGS",
                isTest: isTest,
                ssid: params.SSID,
                broadcastSsidEnabled: params.broadcast,
                MAX_Access_num: params.station,
                security_mode: params.AuthMode,
                cipher: params.cipher
            };

            if (params.AuthMode == "WPAPSKWPA2PSK" || params.AuthMode == "WPA2PSK") {
                requestParams.security_shared_mode = params.cipher;
                requestParams.passphrase = config.PASSWORD_ENCODE ? Base64.encode(params.passPhrase) : params.passPhrase;
            }
            else {
                requestParams.security_shared_mode = "NONE";
            }

            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®åºæ¬çwifiä¿¡æ¯(SSID2)
     * @method setWifiBasic(SSID2)
     * @param {Object} JSON åæ°å¯¹è±¡
     * @return {Object}
     */
    function setWifiBasic4SSID2() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "SET_WIFI_SSID2_SETTINGS",
                isTest: isTest,
                m_SSID: params.m_SSID,
                m_HideSSID: params.m_broadcast,
                m_MAX_Access_num: params.m_station,
                m_AuthMode: params.m_AuthMode,
                cipher: params.m_cipher
            };

            if (params.m_AuthMode == "WPAPSKWPA2PSK" || params.m_AuthMode == "WPA2PSK") {
                requestParams.m_EncrypType = params.m_cipher;
                requestParams.m_WPAPSK1 = config.PASSWORD_ENCODE ? Base64.encode(params.m_passPhrase) : params.m_passPhrase;
            }
            else {
                requestParams.m_EncrypType = "NONE";
            }

            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®åºæ¬çwifiä¿¡æ¯
     * @method setWifiBasic
     * @param {Object} JSON åæ°å¯¹è±¡
     * @example
     * @return {Object}
     */
    function setWifiBasicMultiSSIDSwitch() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "SET_WIFI_INFO",
                isTest: isTest,
                m_ssid_enable: params.multi_ssid_enable
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åwifiå®å¨è®¾ç½®ä¿¡æ¯
     * @method getSecurityInfo
     * @return {Object} wifi å®å¨ json å¯¹è±¡
     */
    function getSecurityInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "AuthMode,passPhrase";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.AuthMode = data.AuthMode;
                result.passPhrase = config.PASSWORD_ENCODE ? Base64.decode(data.passPhrase) : data.passPhrase;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function setSecurityInfo() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SET_WIFI_SECURITY_INFO";
            requestParams.AuthMode = params.AuthMode;
            if (requestParams.AuthMode == "WPAPSKWPA2PSK") {
                requestParams.passPhrase = config.PASSWORD_ENCODE ? Base64.encode(params.passPhrase) : params.passPhrase;
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åå½åå·²è¿æ¥è®¾å¤çä¿¡æ¯
     * @method getCurrentlyAttachedDevicesInfo
     * @return {Object} JSON
     * @example
     //è¿åç»ææ ¼å¼
     * {
     *  macAddress:"E8-E3-A5-AB-86-44",
     *  ipAddress:"192.168.0.45",
     *  hostName:"myhostName",
     *  timeConnected:10
     * }
     */
    function getCurrentlyAttachedDevicesInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                cmd: "station_list"
            };
            return obj;
        }

        function deal(data) {
            var deviceArr = [];
            var attachedDevices = data.station_list;
            for (var i = 0; attachedDevices && i < attachedDevices.length; i++) {
                var obj = {};
                obj.macAddress = attachedDevices[i].mac_addr;
                var hostname = attachedDevices[i].hostname;
                obj.hostName = hostname == "" ? $.i18n.prop("unknown") : hostname;
                obj.ipAddress = attachedDevices[i].ip_addr;
                deviceArr.push(obj);
            }
            return {attachedDevices: deviceArr};
        }
    }

    /**
     * è·åWIFIé»åååè¡¨
     * @returns {*}
     */
    function getMacFilterInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                cmd: "wifi_mac_black_list"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®WIFIé»åå
     * @returns {*}
     */
    function setMacFilter() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "MAC_FILTER_POLICY";
            requestParams.MACAddr = params.macAddr;
            requestParams.MACFilterPolicy = params.macFilterPolicy;
            requestParams.MACList = params.macList;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function getLanguage() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "Language";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.Language = (data && data.Language) ? data.Language : "en";
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function setLanguage() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SET_WEB_LANGUAGE";
            requestParams.Language = params.Language;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function getNetSelectInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "current_network_mode,m_netselect_save,net_select_mode,m_netselect_contents,net_select,ppp_status,modem_main_state";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.current_network_mode = data.current_network_mode;
                result.net_select_mode = data.net_select_mode;
                result.m_netselect_save = data.m_netselect_save;
                result.m_netselect_contents = data.m_netselect_contents;
                result.net_select = data.net_select;
                result.ppp_status = data.ppp_status;
                result.modem_main_state = data.modem_main_state;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function setBearerPreference() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SET_BEARER_PREFERENCE";
            requestParams.BearerPreference = params.strBearerPreference;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**************************************************************************
     Description : scan the network
     Parameters :
     [IN] : function :callback(bResult, listNetwork) : call back function, and the parameters list below:
     [IN] : bool   : bResult     : true = succeed, false = failed.
     [IN] : object : listNetwork : network information array, the object attribute in the array below:
     type   :   name                   : description
     string : strFullName              : operator full name(the value is maybe ""),
     such as 'china mobile'
     string : strShortName             : operator short name(the value is maybe ""),
     such as 'china mobile'
     string : strNumeric               : the digital number, such as '460'
     number : nRat                     : the network connect technology, 0 = '2G', 2 = '3G'.
     number : nState : operator availability as int at+cops=? <stat> (This is as per 3GPP TS 27.007)
     if get net work list failed, the return value will be an null array.
     return : void
     @method scanForNetwork
     **************************************************************************/
    function scanForNetwork(callback) {
        if (isTest) {
            setTimeout(function () {
                parseScanResult(simulate.m_netselect_contents);
            }, 500);
            return;
        }

        $.post("/goform/goform_set_cmd_process", {
            goformId: "SCAN_NETWORK"
        },function (data) {
            if (data.result == "success") {
                checkScanStatus();
            } else {
                callback(false, []);
            }
        }, "json").error(function () {
                callback(false, []);
            });

        function checkScanStatus() {
            $.getJSON("/goform/goform_get_cmd_process", {
                cmd: "m_netselect_status",
                "_": new Date().getTime()
            },function (data) {
                if (data.m_netselect_status == "manual_selecting") {
                    setTimeout(checkScanStatus, 1000);
                } else {
                    $.getJSON("/goform/goform_get_cmd_process", {
                        cmd: "m_netselect_contents",
                        "_": new Date().getTime()
                    },function (data2) {
                        parseScanResult(data2.m_netselect_contents);
                    }).error(function () {
                            callback(false, []);
                        });
                }
            }).error(function () {
                    callback(false, []);
                });
        }

        function parseScanResult(result) {
            //var result= "2,China Mobile,46002,2;2,China Mobile,46002,3"
            var pattern = /([^,;]*),([^,]*),([^,]*),([^,;]*)/g;
            var listNetwork = [];
            var mts;
            while (mts = pattern.exec(result)) {
                if (mts != null) {
                    var flag = false;
                    for (var i = 0; i < listNetwork.length; i++) {
                        var strNumeric = mts[3].replace(/\D/g, '');
                        var nState = parseInt(mts[1], 10);
                        var item = listNetwork[i];
                        if (strNumeric == item.strNumeric) {
                            if (nState == 2) {
                                listNetwork.splice(i, 1);
                            } else {
                                flag = true;
                            }
                        }
                    }
                    if (flag) {
                        continue;
                    }
                    listNetwork.push({
                        //strFullName: mts[2].replace(/\"/g,''),
                        strShortName: mts[2].replace(/\"/g, ''),
                        strNumeric: mts[3].replace(/\D/g, ''),
                        nRat: parseInt(mts[4], 10),
                        nState: parseInt(mts[1], 10)
                    });
                }
            }
            callback(true, listNetwork);
        }
    }

    var timerInfo = {
        networkType: "",
        signalImg: "0",
        networkOperator: "",
        spn_display_flag: "1",
        plmn_display_flag: "1",
        spn_b1_flag: "1",
        spn_b2_flag: "1",
        spn_name_data: "",
        connectStatus: "ppp_disconnected",
        attachedDevices: [],
        curr_connected_devices: [],
        data_counter: {
            uploadRate: 0,
            downloadRate: 0,
            totalSent: 0,
            totalReceived: 0,
            totalConnectedTime: 0,
            currentSent: 0,
            currentReceived: 0,
            currentConnectedTime: 0,
            monthlySent: 0,
            monthlyReceived: 0,
            monthlyConnectedTime: 0,
            month: ''
        },
        newSmsReceived: false,
        smsReportReceived: false,
        smsUnreadCount: "0",
        isLoggedIn: undefined,
        limitVolumeEnable: false,
        limitVolumeType: '1',
        limitVolumePercent: "100",
        limitVolumeSize: "0",
        allowRoamingUpdate: "0"
    };

    function getStatusInfo() {
        if (timerInfo.isLoggedIn === undefined) {
            var loginStatus = getLoginStatus();
            return {
                networkType: timerInfo.networkType,
                signalImg: timerInfo.signalImg,
                networkOperator: timerInfo.networkOperator,
                connectStatus: timerInfo.connectStatus,
                attachedDevices: timerInfo.curr_connected_devices,
                roamingStatus: timerInfo.roamingStatus,
                wifiStatus: timerInfo.wifiStatus,
                simStatus: timerInfo.simStatus,
                pinStatus: timerInfo.pinStatus,
                batteryStatus: timerInfo.batteryStatus,
                batteryLevel: timerInfo.batteryLevel,
                batteryPers: timerInfo.batteryPers,
                batteryTime: timerInfo.batteryTime,
                batteryPercent: timerInfo.batteryPercent,
                ssid: timerInfo.ssid,
                authMode: timerInfo.authMode,
                data_counter: timerInfo.data_counter,
                isLoggedIn: loginStatus.status == "loggedIn",
                newSmsReceived: timerInfo.newSmsReceived,
                smsReportReceived: timerInfo.smsReportReceived,
                smsUnreadCount: timerInfo.smsUnreadCount,
                limitVolumeEnable: timerInfo.limitVolumeEnable,
                limitVolumeType: timerInfo.limitVolumeType,
                limitVolumePercent: timerInfo.limitVolumePercent,
                limitVolumeSize: timerInfo.limitVolumeSize,
                connectWifiProfile: timerInfo.connectWifiProfile,
                connectWifiSSID: timerInfo.connectWifiSSID,
                connectWifiStatus: timerInfo.connectWifiStatus,
                multi_ssid_enable: timerInfo.multi_ssid_enable,
                spn_display_flag: timerInfo.spn_display_flag,
                plmn_display_flag: timerInfo.plmn_display_flag,
                spn_b1_flag: timerInfo.spn_b1_flag,
                spn_b2_flag: timerInfo.spn_b2_flag,
                spn_name_data: timerInfo.spn_name_data,
                roamMode: timerInfo.roamMode,
                current_upgrade_state: timerInfo.current_upgrade_state,
                is_mandatory: timerInfo.is_mandatory,
                new_version_state: timerInfo.new_version_state,
                allowRoamingUpdate: timerInfo.allowRoamingUpdate
            };
        }

        return {
            networkType: timerInfo.networkType,
            signalImg: timerInfo.signalImg,
            networkOperator: timerInfo.networkOperator,
            connectStatus: timerInfo.connectStatus,
            attachedDevices: timerInfo.curr_connected_devices,
            roamingStatus: timerInfo.roamingStatus,
            wifiStatus: timerInfo.wifiStatus,
            simStatus: timerInfo.simStatus,
            pinStatus: timerInfo.pinStatus,
            batteryStatus: timerInfo.batteryStatus,
            batteryLevel: timerInfo.batteryLevel,
            batteryPers: timerInfo.batteryPers,
            batteryTime: timerInfo.batteryTime,
            batteryPercent: timerInfo.batteryPercent,
            ssid: timerInfo.ssid,
            authMode: timerInfo.authMode,
            data_counter: timerInfo.data_counter,
            isLoggedIn: timerInfo.isLoggedIn,
            newSmsReceived: timerInfo.newSmsReceived,
            smsReportReceived: timerInfo.smsReportReceived,
            smsUnreadCount: timerInfo.smsUnreadCount,
            limitVolumeEnable: timerInfo.limitVolumeEnable,
            limitVolumeType: timerInfo.limitVolumeType,
            limitVolumePercent: timerInfo.limitVolumePercent,
            limitVolumeSize: timerInfo.limitVolumeSize,
            connectWifiProfile: timerInfo.connectWifiProfile,
            connectWifiSSID: timerInfo.connectWifiSSID,
            connectWifiStatus: timerInfo.connectWifiStatus,
            multi_ssid_enable: timerInfo.multi_ssid_enable,
            spn_display_flag: timerInfo.spn_display_flag,
            plmn_display_flag: timerInfo.plmn_display_flag,
            spn_b1_flag: timerInfo.spn_b1_flag,
            spn_b2_flag: timerInfo.spn_b2_flag,
            spn_name_data: timerInfo.spn_name_data,
            roamMode: timerInfo.roamMode,
            current_upgrade_state: timerInfo.current_upgrade_state,
            is_mandatory: timerInfo.is_mandatory,
            new_version_state: timerInfo.new_version_state,
            allowRoamingUpdate: timerInfo.allowRoamingUpdate
        };
    }

    /**
     * è·åèç½åæµéä¿¡æ¯
     * @method getConnectionInfo
     */
    function getConnectionInfo() {
        var isData = timerInfo.limitVolumeType == '1';
        var result = {
            data_counter: timerInfo.data_counter,
            connectStatus: timerInfo.connectStatus,
            limitVolumeEnable: timerInfo.limitVolumeEnable,
            limitVolumeType: timerInfo.limitVolumeType
        };
        if (isData) {
            result.limitDataMonth = timerInfo.limitVolumeSize;
            result.limitTimeMonth = 0;
        } else {
            result.limitTimeMonth = timerInfo.limitVolumeSize;
            result.limitDataMonth = 0;
        }
        return result;
    }

    /**
     * æ¸é¤æµéä¿¡æ¯
     * @method clearTrafficData
     */
    function clearTrafficData() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "RESET_DATA_COUNTER";
            requestParams.option = "curr_total_month";
            return requestParams;
        }

        function deal(data) {
            if (data.result == "success") {
                return {
                    result: true
                };
            } else {
                return {
                    result: false
                };
            }
        }
    }

    /**
     * å°æªè¯»ç­ä¿¡åéä»æ¥æ¶å°æªè¯»ç­ä¿¡è®¾ç½®ææ²¡ææ¥æ¶å°
     * @method resetNewSmsReceivedVar
     * @example
     * timerInfo.newSmsReceived = false;
     */
    function resetNewSmsReceivedVar() {
        timerInfo.newSmsReceived = false;
    }

    /**
     * å°ç­ä¿¡åéæ¥ååéä»æ¥æ¶å°è®¾ç½®ææ²¡ææ¥æ¶å°
     * @method resetSmsReportReceivedVar
     * @example
     * timerInfo.smsReportReceived = false;
     */
    function resetSmsReportReceivedVar() {
        timerInfo.smsReportReceived = false;
    }

    /**
     * è·åç­ä¿¡å®¹éã
     * @method getSmsCapability
     */
    function getSmsCapability() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "sms_capacity_info";
            return requestParams;
        }

        function deal(data) {
            return {
                nvTotal: parseInt(data.sms_nv_total, 10),
                nvUsed: parseInt(data.sms_nv_rev_total, 10) + parseInt(data.sms_nv_send_total, 10) + parseInt(data.sms_nv_draftbox_total, 10),
                simTotal: parseInt(data.sms_sim_total, 10),
                simUsed: parseInt(data.sms_sim_rev_total, 10) + parseInt(data.sms_sim_send_total, 10) + parseInt(data.sms_sim_draftbox_total, 10),
                nvReceive: parseInt(data.sms_nv_rev_total, 10),
                nvSend: parseInt(data.sms_nv_send_total, 10),
                nvDraft: parseInt(data.sms_nv_draftbox_total, 10),
                simReceive: parseInt(data.sms_sim_rev_total, 10),
                simSend: parseInt(data.sms_sim_send_total, 10),
                simDraft: parseInt(data.sms_sim_draftbox_total, 10)
            };
        }
    }

    /**
     * èç½
     * @method connect
     */
    function connect() {
        var callback = arguments[1];
        var checkPoint = 0;
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "CONNECT_NETWORK";
            return requestParams;
        }

        function deal(data) {
            if (data.result == "success") {
                checkPoint = new Date().getTime();
                addCallback(checkConnectStatus);
            } else {
                callback({
                    result: false
                });
            }
        }

        function checkConnectStatus(data) {
            if (data.ppp_status == "ppp_connecting") {
                timerInfo.connectStatus = "ppp_connecting";
            } else if (checkConnectedStatus(data.ppp_status)) {
                removeCallback(checkConnectStatus);
                timerInfo.connectStatus = "ppp_connected";
                callback({
                    result: true,
                    status: timerInfo.connectStatus
                });
            } else if (new Date().getTime() - checkPoint < 1e4) {
                timerInfo.connectStatus = "ppp_connecting";
            } else {
                removeCallback(checkConnectStatus);
                callback({
                    result: false
                });
            }
        }
    }

    /**
     * æ­ç½
     * @method disconnect
     */
    function disconnect() {
        var callback = arguments[1];
        var checkPoint = 0;
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "DISCONNECT_NETWORK";
            return requestParams;
        }

        function deal(data) {
            if (data.result == "success") {
                checkPoint = new Date().getTime();
                addCallback(checkDisconnectStatus);
            } else {
                callback({
                    result: false
                });
            }
        }

        function checkDisconnectStatus(data) {
            if (data.ppp_status == "ppp_disconnecting") {
                timerInfo.connectStatus = "ppp_disconnecting";
            } else if (data.ppp_status == "ppp_disconnected") {
                removeCallback(checkDisconnectStatus);
                timerInfo.connectStatus = "ppp_disconnected";
                callback({
                    result: true,
                    status: timerInfo.connectStatus
                });
            } else if (new Date().getTime() - checkPoint < 1e4) {
                timerInfo.connectStatus = "ppp_disconnecting";
            } else {
                removeCallback(checkDisconnectStatus);
                callback({
                    result: false
                });
            }
        }
    }

    /**
     * è·åapnä¿¡æ¯
     * @method getApnSettings
     * @return {Object} JSON
     * @example
     //è¿åç»ææ ¼å¼
     {
	    	APNs : result.APN_config0 + "||" + result.APN_config1 + "||" + result.APN_config2 + "||" + result.APN_config3 + "||" + result.APN_config4 + "||" + result.APN_config5 + "||" + result.APN_config6 + "||" + result.APN_config7 + "||" + result.APN_config8 + "||" + result.APN_config9,
			ipv6APNs : result.ipv6_APN_config0 + "||" + result.ipv6_APN_config1 + "||" + result.ipv6_APN_config2 + "||" + result.ipv6_APN_config3 + "||" + result.ipv6_APN_config4 + "||" + result.ipv6_APN_config5 + "||" + result.ipv6_APN_config6 + "||" + result.ipv6_APN_config7 + "||" + result.ipv6_APN_config8 + "||" + result.ipv6_APN_config9,
			apnMode : result.apn_select,
			profileName :  result.m_profile_name || result.profile_name,
			wanDial : result.wan_dial,
			apnSelect : result.apn_select,
			pdpType : result.pdp_type,
			pdpSelect : result.pdp_select,
			pdpAddr : result.pdp_addr,
			index : result.index,
			currIndex : result.Current_index,
			autoApns : result.apn_auto_config,
			wanApn : result.wan_apn,
			authMode : result.ppp_auth_mode,
			username : result.ppp_username,
			password : result.ppp_passwd,
			dnsMode : result.dns_mode,
			dns1 : result.prefer_dns_manual,
			dns2 : result.standby_dns_manual,
			wanApnV6 : result.ipv6_wan_apn,
			authModeV6 : result.ipv6_ppp_auth_mode,
			usernameV6 : result.ipv6_ppp_username,
			passwordV6 : result.ipv6_ppp_passwd,
			dnsModeV6 : result.ipv6_dns_mode,
			dns1V6 : result.ipv6_prefer_dns_manual,
			dns2V6 : result.ipv6_standby_dns_manual
    	}
     *
     */
    function getApnSettings() {

        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "APN_config0,APN_config1,APN_config2,APN_config3,APN_config4,APN_config5,APN_config6,APN_config7,APN_config8,APN_config9," +
                "APN_config10,APN_config11,APN_config12,APN_config13,APN_config14,APN_config15,APN_config16,APN_config17,APN_config18,APN_config19," +
                "ipv6_APN_config0,ipv6_APN_config1,ipv6_APN_config2,ipv6_APN_config3,ipv6_APN_config4,ipv6_APN_config5,ipv6_APN_config6,ipv6_APN_config7,ipv6_APN_config8,ipv6_APN_config9," +
                "ipv6_APN_config10,ipv6_APN_config11,ipv6_APN_config12,ipv6_APN_config13,ipv6_APN_config14,ipv6_APN_config15,ipv6_APN_config16,ipv6_APN_config17,ipv6_APN_config18,ipv6_APN_config19," +
                "m_profile_name,profile_name,wan_dial,apn_select,pdp_type,pdp_select,pdp_addr,index,Current_index,apn_auto_config,ipv6_apn_auto_config," +
                "apn_mode,wan_apn,ppp_auth_mode,ppp_username,ppp_passwd,dns_mode,prefer_dns_manual,standby_dns_manual," +
                "ipv6_wan_apn,ipv6_pdp_type,ipv6_ppp_auth_mode,ipv6_ppp_username,ipv6_ppp_passwd,ipv6_dns_mode,ipv6_prefer_dns_manual,ipv6_standby_dns_manual";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(result) {
            if (result) {
                return {
                    APNs: result.APN_config0 + "||" + result.APN_config1 + "||" + result.APN_config2 + "||" + result.APN_config3 + "||" + result.APN_config4 + "||"
                        + result.APN_config5 + "||" + result.APN_config6 + "||" + result.APN_config7 + "||" + result.APN_config8 + "||" + result.APN_config9 + "||"
                        + result.APN_config10 + "||" + result.APN_config11 + "||" + result.APN_config12 + "||" + result.APN_config13 + "||" + result.APN_config14 + "||"
                        + result.APN_config15 + "||" + result.APN_config16 + "||" + result.APN_config17 + "||" + result.APN_config18 + "||" + result.APN_config19,
                    ipv6APNs: result.ipv6_APN_config0 + "||" + result.ipv6_APN_config1 + "||" + result.ipv6_APN_config2 + "||" + result.ipv6_APN_config3 + "||" + result.ipv6_APN_config4 + "||"
                        + result.ipv6_APN_config5 + "||" + result.ipv6_APN_config6 + "||" + result.ipv6_APN_config7 + "||" + result.ipv6_APN_config8 + "||" + result.ipv6_APN_config9 + "||"
                        + result.ipv6_APN_config10 + "||" + result.ipv6_APN_config11 + "||" + result.ipv6_APN_config12 + "||" + result.ipv6_APN_config13 + "||" + result.ipv6_APN_config14 + "||"
                        + result.ipv6_APN_config15 + "||" + result.ipv6_APN_config16 + "||" + result.ipv6_APN_config17 + "||" + result.ipv6_APN_config18 + "||" + result.ipv6_APN_config19,
                    apnMode: result.apn_mode,
                    profileName: result.m_profile_name || result.profile_name,
                    wanDial: result.wan_dial,
                    apnSelect: result.apn_select,
                    pdpType: result.pdp_type == 'IP' ? 'IP' : result.ipv6_pdp_type,
                    pdpSelect: result.pdp_select,
                    pdpAddr: result.pdp_addr,
                    index: result.index,
                    currIndex: result.Current_index,
                    autoApns: result.apn_auto_config,
                    autoApnsV6: result.ipv6_apn_auto_config,
                    wanApn: result.wan_apn,
                    authMode: result.ppp_auth_mode.toLowerCase(),
                    username: result.ppp_username,
                    password: result.ppp_passwd,
                    dnsMode: result.dns_mode,
                    dns1: result.prefer_dns_manual,
                    dns2: result.standby_dns_manual,
                    wanApnV6: result.ipv6_wan_apn,
                    authModeV6: result.ipv6_ppp_auth_mode.toLowerCase(),
                    usernameV6: result.ipv6_ppp_username,
                    passwordV6: result.ipv6_ppp_passwd,
                    dnsModeV6: result.ipv6_dns_mode,
                    dns1V6: result.ipv6_prefer_dns_manual,
                    dns2V6: result.ipv6_standby_dns_manual
                };
            } else {
                return {
                    result: false
                };
            }
        }
    }

    /**
     * æ ¹æ®profile nameå é¤apnä¿¡æ¯
     * @method deleteApn
     * @return {Object} JSON resultObject
     * @example
     //è¯·æ±åæ°æ å°
     {
			goformId : "APN_PROC_EX",
			apn_action : "delete",
			apn_mode : "manual",
			index : params.index
		}
     */
    function deleteApn() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                apn_action: "delete",
                apn_mode: "manual",
                index: params.index
            };
            if (config.USE_IPV6_INTERFACE) {
                requestParams.goformId = "APN_PROC_EX";
            } else {
                requestParams.goformId = "APN_PROC";
            }
            return requestParams;
        }

        function deal(data) {
            if (data.result == "success") {
                return {
                    result: true
                };
            } else {
                return {
                    result: false
                };
            }
        }
    }

    /**
     * è®¾ç½®é»è®¤APN
     * @method setDefaultApn
     * @return {Object} JSON resultObject
     * @example
     //è¯·æ±åæ°æ å°
     {
			goformId : "APN_PROC_EX", //"APN_PROC",
			apn_action : "set_default",
			//0(æ°å¢å¹¶ä¸è®¾ç½®é»è®¤ï¼æèç¼è¾åè®¾ç½®é»è®¤)/1ï¼éæ©å·²ç»ä¿å­è¿çï¼ç´æ¥è®¾ç½®é»è®¤ï¼
			//ç®ååªæ¯æ1ãå½ä¼ 0æ¶ï¼éè¦å°saveæ¶çåæ°ä¸å¹¶ä¼ ä¸
			set_default_flag : "1",
			pdp_type : params.pdpType, //IP/IPv6/IPv4v6
			index : params.index,
			apn_mode : 'manual' 
		}
     */
    function setDefaultApn() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            if (config.USE_IPV6_INTERFACE) {
                var requestParam = {
                    isTest: isTest,
                    goformId: "APN_PROC_EX", //"APN_PROC",
                    apn_mode: params.apnMode
                };
                if (params.apnMode == 'manual') {
                    requestParam.apn_action = "set_default";
                    //0(æ°å¢å¹¶ä¸è®¾ç½®é»è®¤ï¼æèç¼è¾åè®¾ç½®é»è®¤)/1ï¼éæ©å·²ç»ä¿å­è¿çï¼ç´æ¥è®¾ç½®é»è®¤ï¼
                    //ç®ååªæ¯æ1ãå½ä¼ 0æ¶ï¼éè¦å°saveæ¶çåæ°ä¸å¹¶ä¼ ä¸
                    requestParam.set_default_flag = "1";
                    requestParam.pdp_type = params.pdpType; //IP/IPv6/IPv4v6
                    requestParam.index = params.index;

                }
                return requestParam;
            } else {
                return {
                    isTest: isTest,
                    goformId: "APN_PROC", //"APN_PROC",
                    apn_action: "set_default",
                    index: params.index,
                    apn_mode: params.apnMode,// == "auto" ? "auto_dial" : "manual_dial",
                    profile_name: params.profileName,
                    wan_apn: params.wanApn,
                    dns_mode: params.dnsMode,
                    prefer_dns_manual: params.dns1,
                    w_standby_dns_manual: params.dns2,
                    ppp_username: params.username,
                    ppp_passwd: params.password,
                    ppp_auth_mode: params.authMode,
                    apn_select: 'manual',
                    wan_dial: '*99#',
                    pdp_type: 'PPP',
                    pdp_select: 'auto',
                    pdp_addr: '',
                    set_default_flag: '1'
                };
            }
        }

        function deal(data) {
            if (data.result == "success") {
                return {
                    result: true
                };
            } else {
                return {
                    result: false
                };
            }
        }
    }

    /**
     * æ°å¢APN
     * @method addOrEditApn
     * @return {Object} JSON resultObject
     */
    function addOrEditApn() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            if (config.USE_IPV6_INTERFACE) {
                var requestParams = {
                    isTest: isTest,
                    goformId: "APN_PROC_EX",
                    apn_action: "save",
                    apn_mode: "manual",
                    profile_name: params.profileName,
                    wan_dial: '*99#',
                    apn_select: 'manual',
                    pdp_type: params.pdpType,//IP/IPv6/IPv4v6
                    pdp_select: 'auto',
                    pdp_addr: '',
                    index: params.index
                };
                if (params.pdpType == "IP") {
                    $.extend(requestParams, {
                        wan_apn: params.wanApn,
                        ppp_auth_mode: params.authMode,
                        ppp_username: params.username,
                        ppp_passwd: params.password,
                        dns_mode: params.dnsMode,
                        prefer_dns_manual: params.dns1,
                        standby_dns_manual: params.dns2
                    });
                } else if (params.pdpType == "IPv6") {
                    $.extend(requestParams, {
                        ipv6_wan_apn: params.wanApnV6,
                        ipv6_ppp_auth_mode: params.authModeV6,
                        ipv6_ppp_username: params.usernameV6,
                        ipv6_ppp_passwd: params.passwordV6,
                        ipv6_dns_mode: params.dnsModeV6,
                        ipv6_prefer_dns_manual: params.dns1V6,
                        ipv6_standby_dns_manual: params.dns2V6
                    });
                } else {//"IPv4v6"
                    if (config.DOUBLE_PDP_STACK_SUPPORT) {
                        $.extend(requestParams, {
                            wan_apn: params.wanApn,
                            ppp_auth_mode: params.authMode,
                            ppp_username: params.username,
                            ppp_passwd: params.password,
                            dns_mode: params.dnsMode,
                            prefer_dns_manual: params.dns1,
                            standby_dns_manual: params.dns2,
                            ipv6_wan_apn: params.wanApnV6,
                            ipv6_ppp_auth_mode: params.authModeV6,
                            ipv6_ppp_username: params.usernameV6,
                            ipv6_ppp_passwd: params.passwordV6,
                            ipv6_dns_mode: params.dnsModeV6,
                            ipv6_prefer_dns_manual: params.dns1V6,
                            ipv6_standby_dns_manual: params.dns2V6
                        });
                    } else {
                        $.extend(requestParams, {
                            wan_apn: params.wanApn,
                            ppp_auth_mode: params.authMode,
                            ppp_username: params.username,
                            ppp_passwd: params.password,
                            dns_mode: params.dnsMode,
                            prefer_dns_manual: params.dns1,
                            standby_dns_manual: params.dns2,
                            ipv6_wan_apn: params.wanApn,
                            ipv6_ppp_auth_mode: params.authMode,
                            ipv6_ppp_username: params.username,
                            ipv6_ppp_passwd: params.password,
                            ipv6_dns_mode: params.dnsMode,
                            ipv6_prefer_dns_manual: params.dns1,
                            ipv6_standby_dns_manual: params.dns2
                        });
                    }

                }
                return requestParams;
            } else {
                var requestParams = {
                    isTest: isTest,
                    goformId: "APN_PROC",
                    apn_action: "save",
                    apn_mode: 'manual',
                    index: params.index,
                    profile_name: params.profileName,
                    wan_apn: params.wanApn,
                    dns_mode: params.dnsMode,
                    prefer_dns_manual: params.dns1,
                    w_standby_dns_manual: params.dns2,
                    ppp_auth_mode: params.authMode,
                    ppp_username: params.username,
                    ppp_passwd: params.password,
                    wan_dial: '*99#',
                    apn_select: 'manual',
                    pdp_type: 'PPP',
                    pdp_select: 'auto',
                    pdp_addr: ''
                };
                return requestParams;
            }
        }

        function deal(data) {
            if (data.result == "success") {
                return {
                    result: true
                };
            } else {
                return {
                    result: false
                };
            }
        }
    }

    /**
     * å®æ¶å·æ°è·åçåæ°åè¡¨
     * @attribute {Array} timerQueryString
     */
    var timerQueryString = [ "modem_main_state", "pin_status", "loginfo", "total_tx_bytes", "total_rx_bytes", "total_time",
        "realtime_tx_bytes", "realtime_rx_bytes", "realtime_time", "ppp_status", "RadioOff", "station_mac", "sms_unread_num",
        "battery_percent", "network_type", "signalbar", "battery_charging", "new_version_state", "current_upgrade_state", "is_mandatory",
        "network_provider","spn_display_flag", "plmn_display_flag", "spn_name_data", "spn_b1_flag", "spn_b2_flag","simcard_roam",
        "realtime_tx_thrpt", "realtime_rx_thrpt"
    ];
    var loginTimerQueryString = ["sms_received_flag", "sts_received_flag", "signalbar", "network_type", "network_provider",
        "ppp_status", "EX_SSID1", "ex_wifi_status", "EX_wifi_profile", "m_ssid_enable", "sms_unread_num", "RadioOff",
        "simcard_roam", "lan_ipaddr", "station_mac", "battery_charging", "battery_vol_percent", "battery_pers", "battery_percent",
        "spn_display_flag", "plmn_display_flag", "spn_name_data", "spn_b1_flag", "spn_b2_flag",
        "realtime_tx_bytes", "realtime_rx_bytes", "realtime_time", "realtime_tx_thrpt", "realtime_rx_thrpt",
        "monthly_rx_bytes", "monthly_tx_bytes", "monthly_time", "date_month", "data_volume_limit_switch",
        "total_tx_bytes", "total_rx_bytes", "total_time",
        "data_volume_limit_size", "data_volume_alert_percent", "data_volume_limit_unit", "roam_setting_option", "upg_roam_switch"];
    /**
     * å®æ¶å·æ°ä¸´æ¶åè°åè¡¨
     * @attribute {Array} timerCallbackStack
     */
    var timerCallbackStack = [];

    /**
     * å®æ¶å·æ°åè°åè¡¨
     * @attribute {Array} timerCallbacks
     */
    var timerCallbacks = [ timerUpdateStatus ];

    /**
     * å®æ¶å·æ°å¨ãæåè·åå°æ°æ®ä»¥åå°éååè°åè¡¨
     * @method timerUpdater
     */
    function timerUpdater() {
        if (!timerUpdaterEnable) return;
        var queryParams = checkTimerUpdaterParameters();
        asyncRequest(queryParams, function (data) {
            for (var i = 0; i < timerCallbacks.length; i++) {
                if (typeof timerCallbacks[i] === "function") {
                    timerCallbacks[i](data);
                }
            }
            $.merge(timerCallbacks, timerCallbackStack);
            timerCallbackStack = [];
            setTimeout(function () {
                timerUpdater();
            }, 1000);
        }, function () {
            timerUpdaterErrorCallback();
            setTimeout(function () {
                timerUpdater();
            }, 1000);
        }, false);
    }

    /**
     * æ£æ¥å®æ¶å¨åæ°ï¼å¨æªç»å½åä¸è¿è¡ç¬æ¶ç¶ææ¥è¯¢
     * @method checkTimerUpdaterParameters
     */
    function checkTimerUpdaterParameters() {
        var queryParams = {
            multi_data: 1,
            isTest: isTest
        };
        if (window.location.hash && window.location.hash != '#login' && timerInfo.isLoggedIn) {
            queryParams.sms_received_flag_flag = 0;
            queryParams.sts_received_flag_flag = 0;
            if (loginTimerQueryString.length > 0 && _.indexOf(timerQueryString, loginTimerQueryString[0]) == -1) {
                $.each(loginTimerQueryString, function (i, n) {
                    timerQueryString.push(n);
                });
            }
        } else {
            if (loginTimerQueryString.length > 0 && _.indexOf(timerQueryString, loginTimerQueryString[0]) != -1) {
                timerQueryString = _.without(timerQueryString, loginTimerQueryString);
            }
        }
        queryParams.cmd = timerQueryString.join(",");
        return queryParams;
    }

    /**
     * å¢å å®æ¶å·æ°åæ°ååè°
     * @method addTimerThings
     * @param {Array || String} querys æ¥è¯¢key
     * @param {Function} cb callback
     */
    function addTimerThings(querys, cb) {
        if (_.isArray(querys)) {
            for (var i = 0; i < querys.length; i++) {
                addQueryString(querys[i]);
            }
        } else {
            addQueryString(querys);
        }
        addCallback(cb);
    }

    /**
     * å é¤å®æ¶å·æ°åæ°ååè°
     * @method removeTimerThings
     * @param {Array || String} querys æ¥è¯¢key
     * @param {Function} cb
     */
    function removeTimerThings(querys, cb) {
        if (_.isArray(querys)) {
            for (var i = 0; i < querys.length; i++) {
                removeQueryString(querys[i]);
            }
        } else {
            removeQueryString(querys);
        }
        removeCallback(cb);
    }

    /**
     * å¢å å®æ¶å·æ°åè°
     * @method addCallback
     * @param {Function} cb
     */
    function addCallback(cb) {
        if (_.indexOf(timerCallbackStack, cb) == -1) {
            timerCallbackStack.push(cb);
        }
    }

    /**
     * å é¤å®æ¶å·æ°åè°
     * @method removeCallback
     * @param {Function} cb
     */
    function removeCallback(cb) {
        timerCallbacks = _.without(timerCallbacks, cb);
        if (timerCallbacks.length == 0) {
            timerCallbacks.push(timerUpdateStatus);
        }
        return timerCallbackStack;
    }

    /**
     * å¢å å®æ¶å·æ°åæ°
     * @method addQueryString
     * @param {String} query æ¥è¯¢key
     */
    function addQueryString(query) {
        if (_.indexOf(timerQueryString, query) == -1) {
            timerQueryString.push(query);
        }
    }

    /**
     * å é¤å®æ¶å·æ°åè°
     * @method removeQueryString
     * @param {String} query
     */
    function removeQueryString(query) {
        timerQueryString = _.without(timerQueryString, query);
        return timerQueryString;
    }

    /**
     * å®æ¶å·æ°é»è®¤ç¶ææ´æ°åè°å½æ°
     * @method timerUpdateStatus
     * @param {Object} JSON data å®æ¶å·æ°è¿åçç»æé
     */
    function timerUpdateStatus(data) {
        timerInfo.signalImg = typeof data.signalbar == 'undefined' ? '0' : data.signalbar;
        timerInfo.networkType = data.network_type ? data.network_type : '';
        if (timerInfo.networkType.toLowerCase().indexOf("limited_service") != -1) {
            timerInfo.networkType = "limited_service";
        }
        timerInfo.networkOperator = data.network_provider ? data.network_provider : '';
        timerInfo.connectStatus = typeof data.ppp_status == 'undefined' ? 'ppp_disconnected' : data.ppp_status;
        timerInfo.spn_display_flag = data.spn_display_flag;
        timerInfo.plmn_display_flag = data.plmn_display_flag;
        timerInfo.spn_b1_flag = data.spn_b1_flag;
        timerInfo.spn_b2_flag = data.spn_b2_flag;
        timerInfo.spn_name_data = data.spn_name_data;
        var curr_connected_devices = (!data.station_mac || data.station_mac == "") ? [] : data.station_mac.split(";");
//        for (var i = 0; i < curr_connected_devices.length; i++) {
//            var hostName = data.curr_connected_devices[i].hostName;
//            if (hostName == "") {
//                data.curr_connected_devices[i].hostName = data.curr_connected_devices[i].macAddress;
//            }
//            var timeConnected = data.curr_connected_devices[i].timeConnected;
//            if (timeConnected == "") {
//                data.curr_connected_devices[i].timeConnected = 0;
//            }
//        }
        timerInfo.curr_connected_devices = curr_connected_devices;
        timerInfo.roamingStatus = getRoamStatus(timerInfo.networkType, data.modem_main_state, data.simcard_roam);
        timerInfo.wifiStatus = data.RadioOff == "1";
        timerInfo.simStatus = data.modem_main_state;
        timerInfo.pinStatus = data.pin_status;
        //TODO çµæ± ç»­èªæ¶é´éè¦åè®¨è®ºï¼ä¸è¾¹æ¯92çä»£ç 
        var needMinutes = 3 * 60 * 60;
        var batteryLevel = (data.battery_vol_percent && data.battery_vol_percent.length > 0) ? data.battery_vol_percent : 100;
        timerInfo.batteryPers = data.battery_pers;
        var remainMinutes = Math.round(needMinutes * (1 - batteryLevel / 100));
        timerInfo.batteryStatus = (typeof data.battery_charging == 'undefined') ? '0' : data.battery_charging;
        timerInfo.batteryLevel = batteryLevel;
        timerInfo.batteryTime = remainMinutes.toString();
        timerInfo.batteryPercent = data.battery_percent;
        timerInfo.data_counter = {
            uploadRate: data.realtime_tx_thrpt == '' ? 0 : data.realtime_tx_thrpt,
            downloadRate: data.realtime_rx_thrpt == '' ? 0 : data.realtime_rx_thrpt,
            totalSent: data.total_tx_bytes == '' ? 0 : data.total_tx_bytes,
            totalReceived: data.total_rx_bytes == '' ? 0 : data.total_rx_bytes,
            totalConnectedTime: data.total_time == '' ? 0 : data.total_time,
            currentSent: data.realtime_tx_bytes == '' ? 0 : data.realtime_tx_bytes,
            currentReceived: data.realtime_rx_bytes == '' ? 0 : data.realtime_rx_bytes,
            currentConnectedTime: data.realtime_time == '' ? 0 : data.realtime_time,
            monthlySent: data.monthly_tx_bytes == '' ? 0 : data.monthly_tx_bytes,
            monthlyReceived: data.monthly_rx_bytes == '' ? 0 : data.monthly_rx_bytes,
            monthlyConnectedTime: data.monthly_time == '' ? 0 : data.monthly_time,
            month: data.date_month == '' ? 1 : data.date_month
        };
        timerInfo.ssid = data.SSID1;
        timerInfo.authMode = data.AuthMode;
        timerInfo.isLoggedIn = config.HAS_LOGIN ? data.loginfo == "ok" : true;
        if (!timerInfo.newSmsReceived) {
            timerInfo.newSmsReceived = data.sms_received_flag > 0;
        }
        if (!timerInfo.smsReportReceived) {
            timerInfo.smsReportReceived = !!data.sts_received_flag;
        }

        timerInfo.smsUnreadCount = config.SMS_UNREAD_NUM_INCLUDE_SIM ? data.sms_unread_num : data.sms_dev_unread_num;
        if (data.data_volume_limit_switch == '1') {
            timerInfo.limitVolumeEnable = true;
            timerInfo.limitVolumeType = data.data_volume_limit_unit == 'data' ? '1' : '0';
            timerInfo.limitVolumePercent = data.data_volume_alert_percent;
            if (data.data_volume_limit_unit == 'data') {
                var dataMonthLimit = data.data_volume_limit_size.split("_");
                timerInfo.limitVolumeSize = dataMonthLimit[0] * dataMonthLimit[1] * 1024 * 1024;
            } else {
                timerInfo.limitVolumeSize = data.data_volume_limit_size * 60 * 60;
            }
        } else {
            timerInfo.limitVolumeEnable = false;
            timerInfo.limitVolumeType = '1';
            timerInfo.limitVolumePercent = '100';
            timerInfo.limitVolumeSize = '0';
        }
        timerInfo.connectWifiProfile = data.EX_wifi_profile;
        timerInfo.connectWifiSSID = data.EX_SSID1;
        timerInfo.connectWifiStatus = data.ex_wifi_status;
        timerInfo.multi_ssid_enable = data.m_ssid_enable;
        timerInfo.roamMode = data.roam_setting_option;
        // TODO OTA
        timerInfo.new_version_state = data.new_version_state == '1' || data.new_version_state == "version_has_new_critical_software" || data.new_version_state == "version_has_new_optional_software" || data.current_upgrade_state == 'upgrade_pack_redownload';
        timerInfo.current_upgrade_state = data.current_upgrade_state;
        if (timerInfo.current_upgrade_state == "downloading") {
            timerInfo.current_upgrade_state = "upgrading";
        } else if (timerInfo.current_upgrade_state == "verify_failed") {
            timerInfo.current_upgrade_state = "upgrade_pack_error";
        }
        // TODO OTA
        timerInfo.is_mandatory = data.is_mandatory == "1" || data.new_version_state == "version_has_new_critical_software";
        timerInfo.allowRoamingUpdate = data.upg_roam_switch;
    }

    function timerUpdaterErrorCallback() {
        timerInfo.batteryStatus = '0';
    }

    /**
     * è·åæ¼«æ¸¸ç¶æ, åèMF93
     * @method getRoamStatus
     */
    function getRoamStatus(networkType, modemState, simcardRoam) {
        if (("" == $.trim(networkType)) || "no_service" == networkType.toLowerCase() || "limited_service" == networkType.toLowerCase() || "modem_sim_undetected" == modemState || "modem_waitpin" == modemState || "modem_waitpuk" == modemState) {            return false;
        }

        if ("Internal" == simcardRoam || "International" == simcardRoam) {
            return true;
        } else {
            return false;
        }
    }


    $(document).ready(function () {
        setTimeout(function () {
            timerUpdater();
        }, config.IS_TEST ? 1000 : 0);
    });

    /**************************************************************************
     Description : set current network
     Parameters :
     [IN] : string   : strNetworkNumber : the network digital number MCCMNC.
     [IN] : number   : nRat : the network connect technology: 0 = "2G", 2 = "3G".
     [IN] : function : callback(bResult) : call back function, and the parameters list below:
     [IN] : bool : bResult : true = succeed, false = failed.
     return : bool : if the parameters is invalid, the function will return false, otherwise will return true.
     comment: we need another parameter nRat, the value may be: 0 = '2G' or 2 = '3G'.
     @method setNetwork
     **************************************************************************/
    function setNetwork(strNetworkNumber, nRat, callback) {
        if (isTest) {
            setTimeout(function () {
                callback(true);
            }, 500);
            return;
        }

        if ((typeof(strNetworkNumber) !== "string") || (strNetworkNumber === "") ||
            (typeof(nRat) !== "number") || (isNaN(nRat))) {
            if (typeof(callback) === "function") {
                callback(false);//VDF null
                return;
            }
        }
        var nRat1 = -1;
        if (nRat === 0) {
            nRat1 = 0;
        } else if (nRat === 2) {
            nRat1 = 2;
        } else if (nRat == 7) {
            nRat1 = 7;
        } else {
            nRat1 = -1;
        }
        if (-1 === nRat1) {
            if (typeof(callback) === "function") {
                callback(false);//VDF null
                return;
            }
        }
        var vNetwork = {};
        postData({
            goformId: "SET_NETWORK",
            NetworkNumber: strNetworkNumber,
            Rat: nRat
        }, function (result) {
            if (result) {
                var flag;
                var counter = 0;
                var timer = setInterval(function () {
                    var obj = syncRequestForNetwork('m_netselect_result');//("manual_netsel_flag");
                    if (!obj) {
                        callback(false);
                    }
                    //after 60s,if the flag is empty,it means that setNetwork fail
                    if (obj.m_netselect_result == "manual_success") {
                        flag = "1";
                        window.clearInterval(timer);
                        callback(true);
                    } else if (obj.m_netselect_result == "manual_fail") {
                        flag = "0";
                        window.clearInterval(timer);
                        callback(false);
                    } else if (counter < 120) {
                        counter++;
                    } else {
                        window.clearInterval(timer);
                        callback(false);
                    }
                }, 1000);
            } else {
                callback(false);
            }
        });

        function syncRequestForNetwork(params) {
            var result;
            $.ajax({
                url: "/goform/goform_get_cmd_process",
                data: {
                    cmd: params
                },
                dataType: "json",
                async: false,
                cache: false,
                error: function () {
                    result = null;
                },
                success: function (data) {
                    result = data;
                }
            });
            return result;
        }

        function postData(params, callback) {
            params._ = new Date().getTime();
            $.post("/goform/goform_set_cmd_process", params, function (data) {
                if (typeof callback == "function") {
                    if (data.result == "success") {
                        callback(true);
                    }
                    else {
                        callback(false);
                    }
                }
            }, "json")
                .error(function () {
                    if (typeof callback == "function") {
                        callback(false);
                    }
                });
        }
    }

    /**************************************************************************
     Description : get current network information
     Parameters :
     [IN] : function :callback(bResult, vNetwork) : call back function, and the parameters list below:
     [IN] : bool   : bResult     : true = succeed, false = failed.
     [IN] : object : vNetwork : network information object, the object attribute list below:
     type   :   name       : description
     string : strFullName  : operator full name(the value is maybe ""),
     such as 'china mobile'
     string : strShortName : operator short name(the value is maybe ""),
     such as 'china mobile'
     string : strNumeric   : the digital number, such as '460'
     number : nRat         : the network connect technology, 0 = '2G', 2 = '3G'.
     string : strBearer   : the current bearer, maybe one of:
     <empty>
     GSM
     GPRS
     EDGE
     WCDMA
     HSDPA
     HSUPA
     HSPA
     TD_SCDMA
     HSPA+
     EVDO Rev.0
     EVDO Rev.A
     EVDO Rev.B
     if get current network information failed, the return value will be null.
     return : void
     @method getCurrentNetwork
     **************************************************************************/
    function getCurrentNetwork(callback) {
        asyncRequest("current_network", callback, function (data) {
            // the object of network information
            var vNetwork = {};
            vNetwork.strFullName = data.strFullName;
            vNetwork.strShortName = data.strShortName;
            vNetwork.strNumeric = data.strNumeric;
            vNetwork.nRat = Number(data.nRat);
            vNetwork.strBearer = data.strBearer;
            return [true, vNetwork];
        });
    }

    /**
     * ä¿å­ä¸æ¡çµè¯æ¬
     * @method savePhoneBook
     * @param {Object} JSON
     * @example
     * //è¯·æ±åæ°æ å°
     * {
     *  location = 0;
     *  name = "å¼ ä¸";
     *  mobile_phone_number = "13500000015";
     *  home_phone_number = "012-12345678";
     *  office_phone_number = "012-87654321";
     *  mail = "mail@mail.com";
     * }
     * @return {Object} JSON
     */
    function savePhoneBook() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "PBM_CONTACT_ADD";
            requestParams.location = params.location;
            requestParams.name = encodeMessage(params.name);
            if (params.mobile_phone_number != "") {
                requestParams.mobilephone_num = params.mobile_phone_number;
            }
            if (params.home_phone_number != "") {
                requestParams.homephone_num = params.home_phone_number;
            }
            if (params.office_phone_number != "") {
                requestParams.officephone_num = params.office_phone_number;
            }
            if (params.mail != "") {
                requestParams.email = encodeMessage(params.mail);
            }
            if (requestParams.location == 1) {
                requestParams.add_index_pc = params.index;
                requestParams.groupchoose = params.group;
                if (!requestParams.groupchoose) {
                    requestParams.groupchoose = "common";
                }
            } else {
                requestParams.edit_index = params.index;
            }
            return requestParams;
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("pbm_write_flag", checkSavePhoneBook);
            } else {
                callback(data);
            }
        }

        function checkSavePhoneBook(data) {
            checkPbmWriteFlag(data, callback, checkSavePhoneBook);
        }
    }
    function getPbmCurIndex(){
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                cmd: "pbm_cur_index"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }
    function checkPbmWriteFlag(data, callback, fn) {
        if (data.pbm_write_flag == "0") {
            removeTimerThings("pbm_write_flag", fn);
            callback({result: "success"});
        } else if (data.pbm_write_flag == "6" || data.pbm_write_flag == "7" || data.pbm_write_flag == "8" || data.pbm_write_flag == "9" || data.pbm_write_flag == "10" || data.pbm_write_flag == "11" || data.pbm_write_flag == "14") {
            removeTimerThings("pbm_write_flag", fn);
            callback({result: "fail"});
        } else {
            //noting to do,continue waiting
        }
    }

    /**
     * å é¤çµè¯æ¬
     * @method deletePhoneBooks
     * @param {Object} JSON
     * @example
     * //è¯·æ±åæ°æ å°
     * {
     *  indexs:["1","2","3"]
     * }
     * @return {Object} JSON
     */
    function deletePhoneBooks() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "PBM_CONTACT_DEL";
            requestParams.del_option = "delete_num";
            requestParams.delete_id = params.indexs.join(",");
            return requestParams;
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("pbm_write_flag", checkDeletePhoneBooks);
            } else {
                callback(data);
            }
        }

        function checkDeletePhoneBooks(data) {
            checkPbmWriteFlag(data, callback, checkDeletePhoneBooks);
        }
    }

    /**
     * å é¤ææçµè¯æ¬æ°æ®
     * @method deleteAllPhoneBooks
     * @param {Object} JSON
     * @example
     * //è¯·æ±åæ°æ å°
     * {
     *   location:0
     * }
     * @return {Object} JSON
     */
    function deleteAllPhoneBooks() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "PBM_CONTACT_DEL";
            requestParams.del_option = "delete_all";
            requestParams.del_all_location = params.location;
            return requestParams;
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("pbm_write_flag", checkDeleteAllPhoneBooks);
            } else {
                callback(data);
            }
        }

        function checkDeleteAllPhoneBooks(data) {
            checkPbmWriteFlag(data, callback, checkDeleteAllPhoneBooks);
        }
    }

    /**
     * æåç»å é¤ææçµè¯æ¬æ°æ®
     * @method deleteAllPhoneBooksByGroup
     * @param {Object} JSON
     * @example
     * //è¯·æ±åæ°æ å°
     * {
     *   del_group:'common'
     * }
     * @return {Object} JSON
     */
    function deleteAllPhoneBooksByGroup() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.notCallback = true;
            requestParams.goformId = "PBM_CONTACT_DEL";
            requestParams.del_option = "delete_all_by_group";
            requestParams.del_all_location = 3;
            requestParams.del_group = params.group;
            return requestParams;
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("pbm_write_flag", checkDeleteAllPhoneBooksByGroup);
            } else {
                callback(data);
            }
        }

        function checkDeleteAllPhoneBooksByGroup(data) {
            checkPbmWriteFlag(data, callback, checkDeleteAllPhoneBooksByGroup);
        }
    }

    function setConnectionMode() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "SET_CONNECTION_MODE";
            requestParams.isTest = isTest;
            requestParams.ConnectionMode = params.connectionMode;
            requestParams.roam_setting_option = params.isAllowedRoaming;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                callback(data);
            }
        }
    }


    function getConnectionMode() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "ConnectionMode";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.connectionMode = data.connectionMode;
                result.isAllowedRoaming = data.autoConnectWhenRoaming;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function _getPhoneBooks(args, location) {
        if (args[0].data_per_page == 0) {
            if ($.isFunction(args[1])) {
                args[1]({"pbm_data": []});
            }
            return;
        }
        return doStuff(args, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.mem_store = location;
            if (location == 2) {
                requestParams.cmd = "pbm_data_total";
            } else {
                requestParams.cmd = "pbm_data_info";
            }
            requestParams.page = params.page;
            requestParams.data_per_page = params.data_per_page;
            requestParams.orderBy = params.orderBy;
            requestParams.isAsc = params.isAsc;
            return requestParams;
        }

        function deal(data) {
            if (data && data.pbm_data) {
                var books = [];
                $.each(data.pbm_data, function (i) {
                    books.push({
                        pbm_id: data.pbm_data[i].pbm_id,
                        pbm_location: data.pbm_data[i].pbm_location,
                        pbm_number: data.pbm_data[i].pbm_number,
                        pbm_anr: data.pbm_data[i].pbm_anr,
                        pbm_anr1: data.pbm_data[i].pbm_anr1,
                        pbm_group: data.pbm_data[i].pbm_group,
                        pbm_name: decodeMessage(data.pbm_data[i].pbm_name),
                        pbm_email: decodeMessage(data.pbm_data[i].pbm_email)
                    });
                });
                return {pbm_data: books};
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æåç»è·åè®¾å¤ä¾§çµè¯æ¬æ°æ®
     * @method getPhoneBooksByGroup
     * @return {Object} JSON
     */
    function getPhoneBooksByGroup() {
        if (arguments[0].data_per_page == 0) {
            return {"pbm_data": []};
        }
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "pbm_data_total";
            requestParams.mem_store = 3;
            requestParams.pbm_group = params.group;
            requestParams.page = params.page;
            requestParams.data_per_page = params.data_per_page;
            requestParams.orderBy = params.orderBy;
            requestParams.isAsc = params.isAsc;
            return requestParams;
        }

        function deal(data) {
            if (data && data.pbm_data) {
                var books = [];
                $.each(data.pbm_data, function (i) {
                    books.push({
                        pbm_id: data.pbm_data[i].pbm_id,
                        pbm_location: data.pbm_data[i].pbm_location,
                        pbm_number: data.pbm_data[i].pbm_number,
                        pbm_anr: data.pbm_data[i].pbm_anr,
                        pbm_anr1: data.pbm_data[i].pbm_anr1,
                        pbm_group: data.pbm_data[i].pbm_group,
                        pbm_name: decodeMessage(data.pbm_data[i].pbm_name),
                        pbm_email: decodeMessage(data.pbm_data[i].pbm_email)
                    });
                });
                return {pbm_data: books};
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åè®¾å¤ä¾§çµè¯æ¬æ°æ®
     * @method getDevicePhoneBooks
     * @return {Object} JSON
     */
    function getDevicePhoneBooks() {
        return _getPhoneBooks(arguments, 1);
    }

    /**
     * è·åSIMå¡ä¾§çµè¯æ¬æ°æ®
     * @method getSIMPhoneBooks
     * @return {Object} JSON
     */
    function getSIMPhoneBooks() {
        return _getPhoneBooks(arguments, 0);
    }

    /**
     * è·åçµè¯æ¬æ°æ®,åæ¬SIMå¡åè®¾å¤ä¾§
     * @method getPhoneBooks
     * @return {Object} JSON
     */
    function getPhoneBooks() {
        return _getPhoneBooks(arguments, 2);
    }

    function getPhoneBookReady() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "pbm_init_flag";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function getPhoneBookCapacity(args, isSIM) {
        return doStuff(args, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "pbm_capacity_info";
            if (isSIM) {
                requestParams.pbm_location = "pbm_sim";
            } else {
                requestParams.pbm_location = "pbm_native";
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åSIMå¡ä¾§çµè¯æ¬å®¹é
     * @method getSIMPhoneBookCapacity
     * @return {Object} JSON
     * @example
     //è¯·æ±åæ°æ å°
     {
         simPbmTotalCapacity:100,
         simPbmUsedCapacity:20,
         simType:?, //2G or 3G used to extend pbm
         maxNameLen:?,
         maxNumberLen:?
     }
     */
    function getSIMPhoneBookCapacity() {
        var data = getPhoneBookCapacity(arguments, true);
        return {
            simPbmTotalCapacity: parseInt(data.pbm_sim_max_record_num),
            simPbmUsedCapacity: parseInt(data.pbm_sim_used_record_num),
            simType: data.pbm_sim_type, //2G or 3G used to extend pbm
            maxNameLen: parseInt(data.pbm_sim_max_name_len),
            maxNumberLen: parseInt(data.pbm_sim_max_number_len),
            maxAnrLen: parseInt(data.pbm_sim_max_anr_len),
            maxAnr1Len: parseInt(data.pbm_sim_max_anr1_len),
            maxEmailLen: parseInt(data.pbm_sim_max_email_len),
            maxSneLen: parseInt(data.pbm_sim_max_sne_len)
        };
    }

    /**
     * è·åè®¾å¤çµè¯æ¬å®¹é
     * @method getDevicePhoneBookCapacity
     * @return {Object} JSON
     * @example
     //è¿åç»æ
     {
         pcPbmTotalCapacity:100ï¼
         pcPbmUsedCapacity:30
     }
     */
    function getDevicePhoneBookCapacity() {
        var data = getPhoneBookCapacity(arguments, false);
        return {
            pcPbmTotalCapacity: parseInt(data.pbm_dev_max_record_num),
            pcPbmUsedCapacity: parseInt(data.pbm_dev_used_record_num)
        };
    }

    /**
     * è·åç»å½ç¸å³ä¿¡æ¯
     * @method getLoginData
     * @return {Object} JSON
     */
    function getLoginData() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "modem_main_state,puknumber,pinnumber,psw_fail_num_str,login_lock_time";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                data.psw_fail_num_str = data.psw_fail_num_str == '' ? config.MAX_LOGIN_COUNT : data.psw_fail_num_str;
                data.login_lock_time = $.inArray(data.login_lock_time, ['', '-1']) != -1 ? '300' : data.login_lock_time;
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åç»å½ç¶æ
     * @method login
     * @param {Object} JSON
     * @example
     * //è¿åç»ææ ¼å¼
     *{
     *   password:"123456"
     *}
     * @return {Object} JSON
     */
    function login() {
        return doStuff(arguments, {}, prepare, deal, {errorType: 'badPassword'}, true);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                goformId: "LOGIN",
                password: config.PASSWORD_ENCODE ? Base64.encode(params.password) : params.password
            };
            return obj;
        }

        function deal(data) {
            //in doc, notes:If the user is 'already logged in' at the device, it calls back as success.
            if (data && (data.result == "0" || data.result == "4")) {
                timerInfo.isLoggedIn = true;
                return    {result: true};
            } else {
                var loginError = {};
                switch (data.result) {
                    case "1":
                        loginError = {errorType: "Login Fail"};
                        break;
                    case "2":
                        loginError = {errorType: "duplicateUser"};
                        break;
                    case "3":
                        loginError = {errorType: "badPassword"};
                        break;
                    /* case "4":
                     loginError = {errorType : "already logged in"};
                     break; */
                    default :
                        loginError = {errorType: "Login Fail"};
                        break;
                }
                timerInfo.isLoggedIn = false;
                return $.extend(unknownErrorObject, loginError);
            }
        }
    }

    /**
     * è·åç»å½ç¶æ
     * @method getLoginStatus
     * @return {Object} JSON
     * @example
     //è¿åç»ææ ¼å¼
     {
        status = "loggedIn";
     }
     */
    function getLoginStatus() {
        if (timerInfo.isLoggedIn != undefined) {
            return doStuff(arguments, {
                status: timerInfo.isLoggedIn ? 'loggedIn' : 'loggedOut'
            });
        } else {
            var resultObject = {};
            if (!config.HAS_LOGIN) {
                resultObject.status = 'loggedIn';
                resultObject.errorType = 'no_login';
                timerInfo.isLoggedIn = true;
            }
            return doStuff(arguments, resultObject, prepare, deal, null, false);
        }

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "loginfo";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data && data.loginfo) {
                var loginStatus = {};
                //it should be an enum rather than Boolean
                switch (data.loginfo) {
                    case "ok":
                        loginStatus.status = "loggedIn";
                        break;
                    default:
                        loginStatus.status = "loggedOut";
                        break;
                }
                currentLoginStatus = loginStatus.status;
                return loginStatus;
            } else {
                currentLoginStatus = undefined;
                return $.extend(unknownErrorObject, {errorType: "LoginStatusError"});
            }
        }
    }

    /**
     * éªè¯PINè¾å¥æ¯å¦æ­£ç¡®
     * @method enterPIN
     * @param {Object} JSON åæ°å¯¹è±¡
     * @example
     //è¯·æ±åæ°æ å°
     {
        PinNumber = "1234";
     }
     * @return {Object} JSON
     */
    function enterPIN() {
        return doStuff(arguments, {}, prepare, deal, {}, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.isTest = isTest;
            obj.goformId = "ENTER_PIN";
            obj.PinNumber = params.PinNumber;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return { result: true };
            } else {
                return { result: false};
            }
        }
    }

    /**
     * æ ¹æ®PUKè®¾ç½®æ°çPIN
     * @method enterPUK
     * @param {Object} JSON åæ°å¯¹è±¡
     * @example
     //è¯·æ±åæ°æ å°
     {
         PUKNumber = "12345678";
         PinNumber = "1234";
     }
     * @return {Object} JSON
     */
    function enterPUK() {
        return doStuff(arguments, {}, prepare, deal, {}, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.isTest = isTest;
            obj.goformId = "ENTER_PUK";
            obj.PUKNumber = params.PUKNumber;
            obj.PinNumber = params.PinNumber;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return { result: true };
            } else {
                return { result: false};
            }
        }
    }

    /**
     * è·åå¨é¨ç­æ¶æ¯
     * @method getSMSMessages
     * @example
     //è¯·æ±åæ°æ å°
     {
			cmd : "sms_page_data",
			page : params.page,
			data_per_page : params.smsCount,
			mem_store : params.nMessageStoreType,
			tags : params.tags,
			order_by : params.orderBy
		}
     */
    function getSMSMessages() {
        return doStuff(arguments, {}, prepare, deal, {}, false);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                cmd: "sms_data_total",
                page: params.page,
                data_per_page: config.SMS_DATABASE_SORT_SUPPORT ? params.smsCount : 500,
                mem_store: params.nMessageStoreType,
                tags: params.tags,
                order_by: params.orderBy
            };
            return obj;
        }

        function deal(data) {
            if (data && data.messages && data.messages.length > 0) {
                return {messages: parseMessages(data.messages) };
            } else {
                return {messages: [] };
            }
        }
    }

    function parseMessages(messages, isReport) {
        var result = [];
        for (var i = 0; i < messages.length; i++) {
            if (!config.SHOW_UN_COMPLETE_CONCAT_SMS && typeof messages[i].received_all_concat_sms != "undefined" && messages[i].received_all_concat_sms == '0') {
                continue;
            }
            var oneMessage = {};
            oneMessage.id = messages[i].id;
            oneMessage.number = messages[i].number;
            oneMessage.content = isReport ? messages[i].content : decodeMessageContent(messages[i].content);
            oneMessage.time = transTime('20' + messages[i].date);//parseTime(messages[i].date);
            oneMessage.isNew = messages[i].tag == "1";
            oneMessage.groupId = messages[i].draft_group_id;
            oneMessage.tag = messages[i].tag;
            result.push(oneMessage);
        }
        if (!config.SMS_DATABASE_SORT_SUPPORT) {
            return _.sortBy(result, function (n) {
                return 0 - n.id;
            });
        } else {
            return result;
        }

    }

    function decodeMessageContent(msgContent) {
        return decodeMessage(escapeMessage(msgContent));//.replace(/"/g, "\\\"");
    }

    /**
     * åéç­æ¶æ¯
     * @method sendSMS
     */
    function sendSMS() {
        var callback = arguments[1];
        var errorCabllback = arguments[2] ? arguments[2] : callback;
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                goformId: "SEND_SMS",
                notCallback: true,
                Number: params.number,
                sms_time: getCurrentTimeString(),
                MessageBody: escapeMessage(encodeMessage(params.message)),
                ID: params.id,
                encode_type: getEncodeType(params.message).encodeType
            };
            return obj;
        }

        function deal(data) {
            if (!data) {
                errorCabllback($.extend(unknownErrorObject, {errorType: "sendFail", errorText: "send_fail_try_again"}));
                return;
            }
            if (data.result == "success") {
                var timer = window.setInterval(function () {
                    getSmsStatusInfo({
                        smsCmd: 4,
                        timer: timer,
                        errorType: "sendFail",
                        errorText: "send_fail_try_again"
                    }, callback, errorCabllback);
                }, 1000);
            } else {
                errorCabllback($.extend(unknownErrorObject, {errorType: "sendFail", errorText: "send_fail_try_again"}));
            }
        }
    }

    /**
     * ä¿å­èç¨¿
     * @method saveSMS
     */
    function saveSMS() {
        var callback = arguments[1];
        var errorCabllback = arguments[2] ? arguments[2] : callback;
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                notCallback: true,
                goformId: "SAVE_SMS",
                SMSMessage: escapeMessage(encodeMessage(params.message)), //ç­ä¿¡åå®¹
                SMSNumber: params.numbers.join(";") + ";",//ç­æ¶æ¯å·ç 
                Index: params.index,//-1è¡¨ç¤ºæ°å»ºåä¿å­ï¼å¦åï¼è¡¨ç¤ºç¼è¾åä¿å­ï¼è¦ä¼ éå®éçID
                encode_type: getEncodeType(params.message).encodeType,
                sms_time: params.currentTimeString,
                draft_group_id: params.groupId //ç­ä¿¡ç»ç¼å·
            };
            return obj;
        }

        function deal(data) {
            if (!data) {
                errorCabllback($.extend(unknownErrorObject, {errorType: "saveFail", errorText: "save_fail"}));
                return;
            }
            if (data.result == "success") {
                var timer = window.setInterval(function () {
                    getSmsStatusInfo({
                        smsCmd: 5,
                        timer: timer,
                        errorType: "saveFail",
                        errorText: "save_fail"
                    }, callback, errorCabllback);
                }, 1000);
            } else {
                errorCabllback($.extend(unknownErrorObject, {errorType: "saveFail", errorText: "save_fail"}));
            }
        }
    }

    /**
     * å é¤å¨é¨ç­æ¶æ¯
     * -- ç®åç»UEç¡®è®¤ï¼ç§»é¤äºå é¤å¨é¨ç­ä¿¡åè½ãæ­¤æ¹æ³ææ¶ä¿ç
     *
     * @method deleteAllMessages
     */
    function deleteAllMessages() {
        var callback = arguments[1];
        var errorCabllback = arguments[2] ? arguments[2] : callback;

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            //TODO: ç±äºä¸åç®±å­ï¼ææå92å®ç°ä¼ä¸å
            var obj = {
                isTest: isTest,
                goformId: "ALL_DELETE_SMS",
                notCallback: true,
                which_cgi: params.location
            };
            return obj;
        }

        function deal(data) {
            if (!data) {
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
                return;
            }
            if (data.result == "success") {
                addTimerThings("sms_cmd_status_info", checkDeleteStatus);
            } else {
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
            }
        }

        function checkDeleteStatus(data) {
            var status = data.sms_cmd_status_info;
            if (status == "2") {
                removeTimerThings("sms_cmd_status_info", checkDeleteStatus);
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
            } else if (status == "3") {
                removeTimerThings("sms_cmd_status_info", checkDeleteStatus);
                callback({result: true});
            }
        }
    }

    function deleteMessage() {
        var callback = arguments[1];
        var errorCabllback = arguments[2] ? arguments[2] : callback;

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var msgIds = params.ids.join(";") + ";";
            var obj = {
                isTest: isTest,
                goformId: "DELETE_SMS",
                msg_id: msgIds,
                notCallback: true
            };
            return obj;
        }

        function deal(data) {
            if (!data) {
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
                return;
            }
            if (data.result == "success") {
                var timer = window.setInterval(function () {
                    getSmsStatusInfo({
                        smsCmd: 6,
                        timer: timer,
                        errorType: "deleteFail",
                        errorText: "delete_fail_try_again"
                    }, callback, errorCabllback);
                }, 1000);
            } else {
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
            }
        }
    }

    function getSmsStatusInfo(obj, callback, errorCabllback) {
        asyncRequest({
            cmd: "sms_cmd_status_info",
            sms_cmd: obj.smsCmd,
            isTest: isTest
        }, function (data) {
            if (data) {
                var status = data.sms_cmd_status_result;
                if (status == "2") {
                    window.clearInterval(obj.timer);
                    errorCabllback($.extend(unknownErrorObject, {errorType: obj.errorType, errorText: obj.errorText}));
                } else if (status == "3") {
                    window.clearInterval(obj.timer);
                    callback({result: "success"});
                }
            } else {
                window.clearInterval(obj.timer);
                errorCabllback($.extend(unknownErrorObject, {errorType: obj.errorType, errorText: obj.errorText}));
            }
        }, function (data) {
            window.clearInterval(obj.timer);
            errorCabllback($.extend(unknownErrorObject, {errorType: obj.errorType, errorText: obj.errorText}));
        }, false);
    }


    function getSMSReady() {
        if (config.smsIsReady) {
            var callback = arguments[1];
            if (callback) {
                return callback({"sms_cmd": "1", "sms_cmd_status_result": "3"});
            } else {
                return {"sms_cmd": "1", "sms_cmd_status_result": "3"};
            }
        } else {
            return doStuff(arguments, {}, prepare, deal, null, false);
        }

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "sms_cmd_status_info";
            requestParams.sms_cmd = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (data.sms_cmd_status_result == "3") {
                    config.smsIsReady = true;
                }
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æ°ç­ä¿¡è®¾ç½®ä¸ºå·²è¯»
     * @method setSmsRead
     * @param {String} ids ä»¥åå·åéçç­ä¿¡ç¼å·
     */
    function setSmsRead() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var msgIds = params.ids.join(";");
            if (params.ids.length > 0) {
                msgIds += ";";
            }
            var obj = {
                isTest: isTest,
                goformId: "SET_MSG_READ",
                msg_id: msgIds,
                tag: 0
            };
            return obj;
        }

        function deal(data) {
            if (data.result == "success") {
                return {result: true};
            } else {
                return {result: false};
            }
        }
    }

    /**
     * è·åç­ä¿¡åéæ¥ååè¡¨
     * @method getSMSDeliveryReport
     */
    function getSMSDeliveryReport() {
        return doStuff(arguments, {}, prepare, deal, {}, false);

        function prepare(params, isPost) {
            var obj = {
                isTest: isTest,
                cmd: "sms_status_rpt_data",
                page: params.page,
                data_per_page: params.smsCount
            };
            return obj;
        }

        function deal(data) {
            if (data) {
                return {messages: parseMessages(data.messages, true) };
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * éåºç³»ç»
     *
     * @method logout
     * @return {Object} JSON
     */
    function logout() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = $.extend({}, params);
            obj.isTest = isTest;
            obj.goformId = "LOGOUT";
            return obj;
        }

        function deal(data) {
            if (data && data.result == "success") {
                timerInfo.isLoggedIn = false;
                return {result: true};
            } else {
                return $.extend(unknownErrorObject, {errorType: "loggedOutError"});
            }
        }
    }

    /**
     * è·åPINç¸å³ä¿¡æ¯
     * @method changePassword
     * @param  {Object} JSON
     * @example
     //è¯·æ±åæ°æ å°
     {
         oldPassword:"123456",
         newPassword:"234567"
     }
     * @return {Object} JSON
     */
    function changePassword() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.newPassword = config.PASSWORD_ENCODE ? Base64.encode(params.newPassword) : params.newPassword;
            obj.oldPassword = config.PASSWORD_ENCODE ? Base64.encode(params.oldPassword) : params.oldPassword;
            obj.goformId = "CHANGE_PASSWORD";
            obj.isTest = isTest;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return {
                    result: true
                };
            } else {
                return $.extend(unknownErrorObject, {
                    errorType: "badPassword"
                });
            }
        }
    }

    /**
     * è·åPINç¸å³ä¿¡æ¯
     * @method getPinData
     * @return {Object} JSON
     */
    function getPinData() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "pinnumber,pin_status,puknumber";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å¯ç¨PIN
     * @method enablePin
     * @param  {Object} JSON
     * @example
     //è¯·æ±åæ°æ å°
     {
        oldPin = "1234";
     }
     * @return {Object} JSON
     */
    function enablePin() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.goformId = "ENABLE_PIN";
            obj.OldPinNumber = params.oldPin;
            obj.isTest = isTest;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return { result: true };
            } else {
                return { result: false};
            }
        }
    }

    /**
     * ç¦ç¨PIN
     * @method disablePin
     * @param  {Object} JSON
     * @example
     //è¯·æ±åæ°æ å°
     {
         oldPin = "1234";
     }
     * @return {Object} JSON
     */
    function disablePin() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.goformId = "DISABLE_PIN";
            obj.OldPinNumber = params.oldPin;
            obj.isTest = isTest;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return { result: true };
            } else {
                return { result: false};
            }
        }
    }

    /**
     * ä¿®æ¹PIN
     * @method changePin
     * @param  {Object} JSON
     * @example
     //è¯·æ±åæ°æ å°
     {
         oldPin = "2345";
         newPin = "1234";
     }
     * @return {Object} JSON
     */
    function changePin() {

        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var obj = {};
            obj.goformId = "ENABLE_PIN";
            obj.OldPinNumber = params.oldPin;
            obj.NewPinNumber = params.newPin;
            obj.isTest = isTest;
            return obj;
        }

        function deal(data) {
            if (data && data.result === "success") {
                return { result: true };
            } else {
                return { result: false};
            }
        }
    }

    /**
     * è·åè·¯ç±ä¿¡æ¯
     * @method getLanInfo
     */
    function getLanInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "lan_ipaddr,lan_netmask,mac_address,dhcpEnabled,dhcpStart,dhcpEnd,dhcpLease_hour";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.ipAddress = data.lan_ipaddr;
                result.subnetMask = data.lan_netmask;
                result.macAddress = data.mac_address;
                result.dhcpServer = data.dhcpEnabled;// == "1"? "enable" : "disable";
                result.dhcpStart = data.dhcpStart;
                result.dhcpEnd = data.dhcpEnd;
                result.dhcpLease = parseInt(data.dhcpLease_hour, 10);
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®è·¯ç±ä¿¡æ¯
     * @method setLanInfo
     */
    function setLanInfo() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "DHCP_SETTING";
            requestParams.lanIp = params.ipAddress;
            requestParams.lanNetmask = params.subnetMask;
            requestParams.lanDhcpType = params.dhcpServer == "1" ? "SERVER" : "DISABLE";
            if (requestParams.lanDhcpType == "SERVER") {
                requestParams.dhcpStart = params.dhcpStart;
                requestParams.dhcpEnd = params.dhcpEnd;
                requestParams.dhcpLease = params.dhcpLease;
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åç­ä¿¡è®¾ç½®åæ°
     * @method getSmsSetting
     */
    function getSmsSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "sms_parameter_info";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.centerNumber = data.sms_para_sca;
                result.memStroe = data.sms_para_mem_store;
                result.deliveryReport = data.sms_para_status_report;
                switch (parseInt(data.sms_para_validity_period)) {
                    case 143:
                        result.validity = "twelve_hours";
                        break;
                    case 167:
                        result.validity = "one_day";
                        break;
                    case 173:
                        result.validity = "one_week";
                        break;
                    case 255:
                        result.validity = "largest";
                        break;
                    default:
                        result.validity = "twelve_hours";
                        break;
                }
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®ç­ä¿¡åæ°
     * @method setSmsSetting
     */
    function setSmsSetting() {
        var callback = arguments[1];
        var errorCabllback = arguments[2] ? arguments[2] : callback;
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SET_MESSAGE_CENTER";
            requestParams.save_time = params.validity;
            requestParams.MessageCenter = params.centerNumber;
            requestParams.status_save = params.deliveryReport;
            requestParams.save_location = 'native';
            requestParams.notCallback = true;
            return requestParams;
        }

        function deal(data) {
            if (!data) {
                errorCabllback($.extend(unknownErrorObject, {errorType: "smsSettingFail", errorText: "error_info"}));
                return;
            }
            if (data.result == "success") {
                var timer = window.setInterval(function () {
                    getSmsStatusInfo({
                        smsCmd: 3,
                        timer: timer,
                        errorType: "smsSettingFail",
                        errorText: "error_info"
                    }, callback, errorCabllback);
                }, 1000);
            } else {
                errorCabllback($.extend(unknownErrorObject, {errorType: "deleteFail", errorText: "delete_fail_try_again"}));
            }
        }
    }

    /**
     * æ¢å¤åºåè®¾ç½®
     * @method restoreFactorySettings
     * @return {Object} JSON
     */
    function restoreFactorySettings() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "RESTORE_FACTORY_SETTINGS";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æ£æµæ¢å¤åºåè®¾ç½®æ¯å¦å®æ
     * @method checkRestoreStatus
     */
    function checkRestoreStatus(successCallback) {
        var requestParams = {};
        requestParams.isTest = isTest;
        requestParams.cmd = "restore_flag";
        requestParams.multi_data = 1;
        asyncRequest(requestParams, function (data) {
            if (data && data.restore_flag === "1") {
                successCallback();
            } else {
                setTimeout(function () {
                    checkRestoreStatus(successCallback);
                }, 5000);
            }
        }, function () {
            setTimeout(function () {
                checkRestoreStatus(successCallback);
            }, 5000);
        }, false);
    }

    /**
     * è·åwpsç¸å³ä¿¡æ¯
     * @method getWpsInfo
     */
    function getWpsInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "WscModeOption,AuthMode,RadioOff,EncrypType,wps_mode,WPS_SSID,m_ssid_enable,SSID1,m_SSID,m_EncrypType";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.wpsFlag = data.WscModeOption;
                result.authMode = data.AuthMode;
                result.wpsType = data.wps_mode;
                result.radioFlag = data.RadioOff;
                result.encrypType = data.EncrypType;
                result.wpsSSID = data.WPS_SSID;
                result.ssidEnable = data.m_ssid_enable;
                result.ssid = data.SSID1;
                result.multiSSID = data.m_SSID;
                result.m_encrypType = data.m_EncrypType;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å¼å¯wps
     * @method openWps
     */
    function openWps() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "WIFI_WPS_SET";
            requestParams.WPS_SSID = params.wpsSSID;
            requestParams.wps_mode = params.wpsType;
            if (requestParams.wps_mode == 'PIN') {
                requestParams.wps_pin = params.wpsPin;
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åwifi ä¼ç ä¿¡æ¯
     * @method getSleepInfo
     */
    function getSleepMode() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "sysIdleTimeToSleep";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.sleepMode = data.sysIdleTimeToSleep;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®wifiä¼ç ä¿¡æ¯
     * @method
     */
    function setSleepMode() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SET_WIFI_SLEEP_INFO";
            requestParams.sysIdleTimeToSleep = params.sleepMode;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åé²ç«å¢å®å¨ä¿¡æ¯
     * @method getSysSecurity
     */
    function getSysSecurity() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "RemoteManagement,WANPingFilter";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.remoteFlag = data.RemoteManagement == "1" ? "1" : "0";
                result.pingFlag = data.WANPingFilter == "1" ? "1" : "0";
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®é²ç«å¢å®å¨ä¿¡æ¯
     * @method setSysSecurity
     */
    function setSysSecurity() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "FW_SYS";
            requestParams.remoteManagementEnabled = params.remoteFlag;
            requestParams.pingFrmWANFilterEnabled = params.pingFlag;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åç«¯å£è½¬åä¿¡æ¯
     * @method getPortForward
     */
    function getPortForward() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "PortForwardEnable,PortForwardRules_0,PortForwardRules_1,PortForwardRules_2,PortForwardRules_3,PortForwardRules_4,PortForwardRules_5,PortForwardRules_6,PortForwardRules_7,PortForwardRules_8,PortForwardRules_9";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.portForwardEnable = data.PortForwardEnable;
                //from 93, refactory later
                var rules = [];
                if (data.PortForwardRules_0 != "") {
                    rules.push([0, data.PortForwardRules_0]);
                }
                if (data.PortForwardRules_1 != "") {
                    rules.push([1, data.PortForwardRules_1]);
                }
                if (data.PortForwardRules_2 != "") {
                    rules.push([2, data.PortForwardRules_2]);
                }
                if (data.PortForwardRules_3 != "") {
                    rules.push([3, data.PortForwardRules_3]);
                }
                if (data.PortForwardRules_4 != "") {
                    rules.push([4, data.PortForwardRules_4]);
                }
                if (data.PortForwardRules_5 != "") {
                    rules.push([5, data.PortForwardRules_5]);
                }
                if (data.PortForwardRules_6 != "") {
                    rules.push([6, data.PortForwardRules_6]);
                }
                if (data.PortForwardRules_7 != "") {
                    rules.push([7, data.PortForwardRules_7]);
                }
                if (data.PortForwardRules_8 != "") {
                    rules.push([8, data.PortForwardRules_8]);
                }
                if (data.PortForwardRules_9 != "") {
                    rules.push([9, data.PortForwardRules_9]);
                }
                result.portForwardRules = parsePortForwardRules(rules);
                return result;
            } else {
                return unknownErrorObject;
            }
        }

        //from 93, refactory later
        function parsePortForwardRules(data) {
            var rules = [];
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    var aRule = {};
                    var elements = data[i][1].split(",");
                    aRule.index = data[i][0];
                    aRule.ipAddress = elements[0];
                    aRule.portRange = elements[1] + ' - ' + elements[2];
                    aRule.protocol = transProtocol(elements[3]);
                    aRule.comment = elements[4];
                    rules.push(aRule);
                }
            }
            return rules;
        }
    }

    /**
     * è®¾ç½®ç«¯å£è½¬åä¿¡æ¯
     * @method setPortForward
     */
    function setPortForward() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "FW_FORWARD_ADD";
            requestParams.PortForwardEnable = params.portForwardEnable;
            requestParams.ipAddress = params.ipAddress;
            requestParams.portStart = params.portStart;
            requestParams.portEnd = params.portEnd;
            requestParams.protocol = params.protocol;
            requestParams.comment = params.comment;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å é¤ç«¯å£è½¬åè§å
     * @method setPortForward
     */
    function deleteForwardRules() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "FW_FORWARD_DEL";
            requestParams.delete_id = params.indexs.join(';') + ";";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * èææå¡å¨è®¾ç½®
     * @method enableVirtualServer
     */
    function enableVirtualServer() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "VIRTUAL_SERVER";
            requestParams.PortForwardEnable = params.portForwardEnable;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åå¿«éè®¾ç½®éè¦çæ°æ®
     * @method getQuickSettingInfo
     */
    function getQuickSettingInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            var wpask = config.PASSWORD_ENCODE ? ",WPAPSK1_encode" : ",WPAPSK1";
            requestParams.cmd = "pdp_type,ipv6_pdp_type,RadioOff,SSID1,HideSSID,AuthMode,WscModeOption,ppp_status,apn_index,ipv6_apn_index,ipv6_APN_index,m_profile_name,apn_mode" + wpask +
                ",APN_config0,APN_config1,APN_config2,APN_config3,APN_config4,APN_config5,APN_config6,APN_config7,APN_config8,APN_config9,APN_config10,APN_config11,APN_config12,APN_config13,APN_config14,APN_config15,APN_config16,APN_config17,APN_config18,APN_config19" +
                ",ipv6_APN_config0,ipv6_APN_config1,ipv6_APN_config2,ipv6_APN_config3,ipv6_APN_config4,ipv6_APN_config5,ipv6_APN_config6,ipv6_APN_config7,ipv6_APN_config8,ipv6_APN_config9,ipv6_APN_config10,ipv6_APN_config11,ipv6_APN_config12,ipv6_APN_config13,ipv6_APN_config14,ipv6_APN_config15,ipv6_APN_config16,ipv6_APN_config17,ipv6_APN_config18,ipv6_APN_config19";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (config.PASSWORD_ENCODE) {
                    data.WPAPSK1 = Base64.decode(data.WPAPSK1_encode);
                }
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å¿«éè®¾ç½®
     * @method getQuickSettingInfo
     */
    function setQuickSetting() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                isTest: isTest,
                goformId: "QUICK_SETUP",
                apn_mode: params.apnMode,
                Profile_Name: params.Profile_Name,
                APN_name: params.APN_name,
                ppp_auth_mode: params.ppp_auth_mode,
                ppp_username: params.ppp_username,
                ppp_passwd: params.ppp_passwd,
                SSID_name: params.SSID_name,
                SSID_Broadcast: params.SSID_Broadcast,
                Encryption_Mode_hid: params.Encryption_Mode_hid,
                security_shared_mode: params.security_shared_mode,
                WPA_PreShared_Key: config.PASSWORD_ENCODE ? Base64.encode(params.WPA_PreShared_Key) : (params.WPA_PreShared_Key),
                wep_default_key: params.wep_default_key,
                WPA_ENCRYPTION_hid: params.WPA_ENCRYPTION_hid
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return $.extend(unknownErrorObject, {errorType: "SetSetUpError"});
            }
        }

    }

    /**
     * å¿«éè®¾ç½®(æ¯æIPv6)
     * @method setQuickSetting4IPv6
     */
    function setQuickSetting4IPv6() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                isTest: isTest,
                goformId: "QUICK_SETUP_EX",
                index: params.apn_index,
                pdp_type: params.pdp_type,
                apn_mode: params.apnMode,
                profile_name: params.profile_name,
                SSID_name: params.SSID_name,
                SSID_Broadcast: params.SSID_Broadcast,
                Encryption_Mode_hid: params.Encryption_Mode_hid,
                security_shared_mode: params.security_shared_mode,
                WPA_PreShared_Key: config.PASSWORD_ENCODE ? Base64.encode(params.WPA_PreShared_Key) : params.WPA_PreShared_Key,
                wep_default_key: params.wep_default_key,
                WPA_ENCRYPTION_hid: params.WPA_ENCRYPTION_hid
            }
            if (params.pdp_type == "IP" || params.pdp_type == "IPv6") {
                $.extend(requestParams, {
                    wan_apn: params.wan_apn,
                    ppp_auth_mode: params.ppp_auth_mode,
                    ppp_username: params.ppp_username,
                    ppp_passwd: params.ppp_passwd,
                    ipv6_wan_apn: params.ipv6_wan_apn,
                    ipv6_ppp_auth_mode: params.ipv6_ppp_auth_mode,
                    ipv6_ppp_username: params.ipv6_ppp_username,
                    ipv6_ppp_passwd: params.ipv6_ppp_passwd
                });
            } else {
                if (config.DOUBLE_PDP_STACK_SUPPORT) {
                    $.extend(requestParams, {
                        wan_apn: params.wan_apn,
                        ppp_auth_mode: params.ppp_auth_mode,
                        ppp_username: params.ppp_username,
                        ppp_passwd: params.ppp_passwd,
                        ipv6_wan_apn: params.ipv6_wan_apn,
                        ipv6_ppp_auth_mode: params.ipv6_ppp_auth_mode,
                        ipv6_ppp_username: params.ipv6_ppp_username,
                        ipv6_ppp_passwd: params.ipv6_ppp_passwd
                    });
                } else {
                    $.extend(requestParams, {
                        wan_apn: params.wan_apn,
                        ppp_auth_mode: params.ppp_auth_mode,
                        ppp_username: params.ppp_username,
                        ppp_passwd: params.ppp_passwd,
                        ipv6_wan_apn: params.wan_apn,
                        ipv6_ppp_auth_mode: params.ppp_auth_mode,
                        ipv6_ppp_username: params.ppp_username,
                        ipv6_ppp_passwd: params.ppp_passwd
                    });
                }
            }

            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return $.extend(unknownErrorObject, {errorType: "SetSetUpError"});
            }
        }
    }

    /**
     * ä¸å¡å¤çåï¼è½®è¯¢æ£æµæå¡å¨æ¯å¦å¯ä»¥è¿æ¥ï¼å¯è¿æ¥æ¶æ§è¡åè°å½æ°
     * @method doStuffAndCheckServerIsOnline
     */
    function doStuffAndCheckServerIsOnline(arg, prepare, deal) {
        //serveræ¯å¦æ­£å¸¸
        var isServerOnline = false;
        //callbackæ¯å¦æ§è¡
        var isCallbackExecuted = false;
        var params = prepare(arg[0]);
        var callback = arg[1];
        var successCallback = function (data) {
            isServerOnline = true;
            if (!isCallbackExecuted && callback) {
                callback(deal(data));
            }
            isCallbackExecuted = true;
        };
        var errorMethod = arg[2];
        var errorCallback = function () {
            isServerOnline = true;
            if (errorMethod) {
                errorMethod();
            }
        };

        asyncRequest(params, successCallback, errorCallback, true);

        addTimeout(function () {
            if (isServerOnline == false) {
                var timer = addInterval(function () {
                    if (isServerOnline == false) {
                        getLanguage({}, function (data) {
                            window.clearInterval(timer);
                            successCallback({result: "success"});
                        });
                    }
                }, 1000);
            }
        }, 5000);
    }

    /**
     * è·åSD Cardéç½®ä¿¡æ¯
     * @method getSDConfiguration
     */
    function getSDConfiguration() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                cmd: "sdcard_mode_option,sd_card_state,HTTP_SHARE_STATUS,HTTP_SHARE_CARD_USER,HTTP_SHARE_WR_AUTH,HTTP_SHARE_FILE",
                multi_data: 1
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var fileToShare;
                if ("mmc2" == data.HTTP_SHARE_FILE || "/mmc2" == data.HTTP_SHARE_FILE || "/mmc2/" == data.HTTP_SHARE_FILE) {
                    fileToShare = "1";
                } else {
                    fileToShare = "0";
                }
                var result = {
                    sd_mode: data.sdcard_mode_option == "1" ? "0" : "1",
                    sd_status: data.sd_card_state,
                    share_status: data.HTTP_SHARE_STATUS == "Enabled" ? "1" : "0",
                    share_user: data.HTTP_SHARE_CARD_USER,
                    share_auth: data.HTTP_SHARE_WR_AUTH == "readWrite" ? "1" : "0",
                    file_to_share: fileToShare,
                    share_file: data.HTTP_SHARE_FILE
                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®SD Card Mode
     * @method setSdCardMode
     */
    function setSdCardMode() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                goformId: "HTTPSHARE_MODE_SET",
                mode_set: params.mode == "0" ? "http_share_mode" : "usb_mode"
            };
            return requestParams;
        }

        function deal(data) {
            if (data && data.result == 'success') {
                return {result: true};
            } else {
                return {result: false};
            }
        }
    }

    /**
     * æ£æ¥æä»¶æ¯å¦å­å¨
     * @method checkFileExists
     */
    function checkFileExists() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                goformId: "GOFORM_HTTPSHARE_CHECK_FILE",
                path_SD_CARD: params.path
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (data.result == "no_sdcard") {
                    return {
                        status: "no_sdcard"
                    };
                } else if (data.result == "noexist") {
                    return {
                        status: "noexist"
                    };
                } else {
                    return {
                        status: "exist"
                    };
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è¿å¥æä»¶å¤¹ï¼å¹¶è·åæä»¶å¤¹åæä»¶åè¡¨
     *
     * @method getFileList
     * @return {Object}
     * @example
     *        {"result":{"totalRecord":"4", "fileInfo":[
	 *          {"fileName":"card","attribute":"document","size":"0","lastUpdateTime":"20120510"},
	 *          {"fileName":"cf","attribute":"document","size":"0","lastUpdateTime":"20120510"},
	 *          {"fileName":"net","attribute":"document","size":"0","lastUpdateTime":"20120510"},
	 *          {"fileName":"ram","attribute":"document","size":"0","lastUpdateTime":"20120510"}]}}
     */
    function getFileList() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                goformId: "HTTPSHARE_ENTERFOLD",
                path_SD_CARD: params.path,
                indexPage: params.index
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (data.result == 'failure') {
                    return $.extend(unknownErrorObject, {
                        errorType: "get_file_list_failure"
                    });
                } else if (data.result == "no_sdcard") {
                    return $.extend(unknownErrorObject, {
                        errorType: "no_sdcard"
                    });
                } else {
                    return parseSdCardFile(data.result);
                }
            } else {
                return unknownErrorObject;
            }
        }

        function parseSdCardFile(result) {
            var fileInfo = {};
            fileInfo.totalRecord = result.totalRecord;
            var fileArr = [];
            var details = result.fileInfo;
            for (var i = 0; details && i < details.length; i++) {
                if (details[i].fileName == "") {
                    continue;
                }
                var obj = {};
                obj.fileName = details[i].fileName;
                obj.attribute = details[i].attribute;
                obj.size = details[i].size;
                obj.lastUpdateTime = details[i].lastUpdateTime;
                fileArr.push(obj);
            }
            fileInfo.details = fileArr;
            return fileInfo;
        }
    }

    /**
     * sd card æä»¶éå½å
     * @method fileRename
     * @return {Object}
     * @example
     * requestParams = {
			goformId : "HTTPSHARE_FILE_RENAME",
            path_SD_CARD : params.path,
			OLD_NAME_SD_CARD : oldpath,
			NEW_NAME_SD_CARD : newpath
		}
     */
    function fileRename() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var d = new Date();
            var currentTime = d.getTime();
            var zoneOffsetSeconds = d.getTimezoneOffset() * 60;
            return {
                isTest: isTest,
                goformId: "HTTPSHARE_FILE_RENAME",
                path_SD_CARD: params.path,
                OLD_NAME_SD_CARD: params.oldPath,
                NEW_NAME_SD_CARD: params.newPath,
                path_SD_CARD_time: transUnixTime(currentTime),
                path_SD_CARD_time_unix: Math.round((currentTime - zoneOffsetSeconds * 1000) / 1e3)
            };
        }

        function deal(data) {
            if (data) {
                if (data.result == "success") {
                    return {
                        result: true
                    };
                } else if (data.result == "no_sdcard") {
                    return $.extend(unknownErrorObject, {
                        errorType: "no_sdcard"
                    });
                } else {
                    return {
                        result: false
                    };
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åSD Cardå®¹é
     * @method getSdMemorySizes
     * @return {Object}
     * @example
     * {
			totalMemorySize : data.sd_card_total_size,
			availableMemorySize : data.sd_card_avi_space
		}
     */
    function getSdMemorySizes() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                cmd: "HTTPSHARE_GETCARD_VALUE"
            };
            return requestParams;
        }

        function deal(data) {
            if (!data || (data.result && data.result == "no_sdcard")) {
                return $.extend(unknownErrorObject, {
                    errorType: "no_sdcard"
                });
            } else {
                return {
                    totalMemorySize: data.sd_card_total_size == "" ? 0 : data.sd_card_total_size * 32 * 1024,
                    availableMemorySize: data.sd_card_avi_space == "" ? 0 : data.sd_card_avi_space * 32 * 1024
                };
            }
        }
    }

    /**
     * å é¤æä»¶åæä»¶å¤¹
     *
     * @method deleteFilesAndFolders
     * @return {Object}
     * @example
     * {
	 * 		goformId : "HTTPSHARE_DEL",
	 * 		path_SD_CARD: params.path,
	 *  	name_SD_CARD: params.names
	 *  }
     */
    function deleteFilesAndFolders() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                goformId: "HTTPSHARE_DEL",
                path_SD_CARD: params.path,
                name_SD_CARD: params.names
            };
            return requestParams;
        }

        function deal(data) {
            if (data.result && data.result == "failure") {
                return $.extend(unknownErrorObject, {
                    errorType: "delete_folder_failure"
                });
            } else if (data.result && data.result == "no_sdcard") {
                return $.extend(unknownErrorObject, {
                    errorType: "no_sdcard"
                });
            } else if (data.result && data.result == "success") {
                return {
                    result: true
                };
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * åå»ºæä»¶å¤¹
     *
     * @method createFolder
     * @return {Object}
     * @example
     * {
	 * 		goformId : "HTTPSHARE_DEL",
	 * 		path_SD_CARD: params.path,
	 *  	name_SD_CARD: params.names
	 *  }
     */
    function createFolder() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var d = new Date();
            var currentTime = d.getTime();
            var zoneOffsetSeconds = d.getTimezoneOffset() * 60;
            return {
                isTest: isTest,
                goformId: "HTTPSHARE_NEW",
                path_SD_CARD: params.path,
                path_SD_CARD_time: transUnixTime(currentTime),
                path_SD_CARD_time_unix: Math.round((currentTime - zoneOffsetSeconds * 1000) / 1e3)
            };
        }

        function deal(data) {
            if (data.result && data.result == "failure") {
                return $.extend(unknownErrorObject, {
                    errorType: "create_folder_failure"
                });
            } else if (data.result && data.result == "no_sdcard") {
                return $.extend(unknownErrorObject, {
                    errorType: "no_sdcard"
                });
            } else if (data.result && data.result == "success") {
                return {
                    result: true
                };
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æ£æ¥æä»¶ä¸ä¼ ç¶æ
     *
     * @method checkUploadFileStatus
     * @return {Object}
     */
    function checkUploadFileStatus() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                cmd: "CheckUploadFileStatus"
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (data.result == "5") {
                    return {
                        result: false
                    };
                } else if (data.result == "6") {
                    return {
                        result: true
                    };
                } else {
                    return {
                        result: false
                    };
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®SD å¡å±äº«åæ°
     *
     * @method setSdCardSharing
     * @return {Object}
     * @example
     * requestParams = {
	            isTest : isTest,
	            goformId : "HTTPSHARE_AUTH_SET",
        		HTTP_SHARE_STATUS: params.share_status == "1" ? "Enabled" : "Disabled",
        		HTTP_SHARE_WR_AUTH: params.share_auth == "1" ? "readWrite" : "readOnly",
        		HTTP_SHARE_FILE: params.share_file
            };
     */
    function setSdCardSharing() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                goformId: "HTTPSHARE_AUTH_SET",
                HTTP_SHARE_STATUS: params.share_status == "1" ? "Enabled" : "Disabled",
                HTTP_SHARE_WR_AUTH: params.share_auth == "1" ? "readWrite" : "readOnly",
                HTTP_SHARE_FILE: params.share_file
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (data.result == "no_sdcard") {
                    return $.extend(unknownErrorObject, {
                        errorType: "no_sdcard"
                    });
                } else {
                    return {
                        result: true
                    };
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åç«¯å£è¿æ»¤ä¿¡æ¯
     * @method getPortFilter
     */
    function getPortFilter() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "IPPortFilterEnable,DefaultFirewallPolicy,IPPortFilterRules_0,IPPortFilterRules_1,IPPortFilterRules_2,IPPortFilterRules_3,IPPortFilterRules_4,IPPortFilterRules_5,IPPortFilterRules_6,IPPortFilterRules_7,IPPortFilterRules_8,IPPortFilterRules_9";

            if (config.USE_IPV6_INTERFACE) {
                requestParams.cmd += ",IPPortFilterRulesv6_0,IPPortFilterRulesv6_1,IPPortFilterRulesv6_2,IPPortFilterRulesv6_3,IPPortFilterRulesv6_4,IPPortFilterRulesv6_5,IPPortFilterRulesv6_6,IPPortFilterRulesv6_7,IPPortFilterRulesv6_8,IPPortFilterRulesv6_9";
            }

            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.portFilterEnable = data.IPPortFilterEnable;
                result.defaultPolicy = data.DefaultFirewallPolicy;
                //from 93, refactory later
                var rules = [];
                if (data.IPPortFilterRules_0 != "") {
                    rules.push([0, data.IPPortFilterRules_0]);
                }
                if (data.IPPortFilterRules_1 != "") {
                    rules.push([1, data.IPPortFilterRules_1]);
                }
                if (data.IPPortFilterRules_2 != "") {
                    rules.push([2, data.IPPortFilterRules_2]);
                }
                if (data.IPPortFilterRules_3 != "") {
                    rules.push([3, data.IPPortFilterRules_3]);
                }
                if (data.IPPortFilterRules_4 != "") {
                    rules.push([4, data.IPPortFilterRules_4]);
                }
                if (data.IPPortFilterRules_5 != "") {
                    rules.push([5, data.IPPortFilterRules_5]);
                }
                if (data.IPPortFilterRules_6 != "") {
                    rules.push([6, data.IPPortFilterRules_6]);
                }
                if (data.IPPortFilterRules_7 != "") {
                    rules.push([7, data.IPPortFilterRules_7]);
                }
                if (data.IPPortFilterRules_8 != "") {
                    rules.push([8, data.IPPortFilterRules_8]);
                }
                if (data.IPPortFilterRules_9 != "") {
                    rules.push([9, data.IPPortFilterRules_9]);
                }
                result.portFilterRules = parsePortFilterRules(rules, "IPv4");

                //ipv6
                if (config.USE_IPV6_INTERFACE) {
                    var v6Rules = [];
                    if (data.IPPortFilterRulesv6_0 != "") {
                        v6Rules.push([10, data.IPPortFilterRulesv6_0]);
                    }
                    if (data.IPPortFilterRulesv6_1 != "") {
                        v6Rules.push([11, data.IPPortFilterRulesv6_1]);
                    }
                    if (data.IPPortFilterRulesv6_2 != "") {
                        v6Rules.push([12, data.IPPortFilterRulesv6_2]);
                    }
                    if (data.IPPortFilterRulesv6_3 != "") {
                        v6Rules.push([13, data.IPPortFilterRulesv6_3]);
                    }
                    if (data.IPPortFilterRulesv6_4 != "") {
                        v6Rules.push([14, data.IPPortFilterRulesv6_4]);
                    }
                    if (data.IPPortFilterRulesv6_5 != "") {
                        v6Rules.push([15, data.IPPortFilterRulesv6_5]);
                    }
                    if (data.IPPortFilterRulesv6_6 != "") {
                        v6Rules.push([16, data.IPPortFilterRulesv6_6]);
                    }
                    if (data.IPPortFilterRulesv6_7 != "") {
                        v6Rules.push([17, data.IPPortFilterRulesv6_7]);
                    }
                    if (data.IPPortFilterRulesv6_8 != "") {
                        v6Rules.push([18, data.IPPortFilterRulesv6_8]);
                    }
                    if (data.IPPortFilterRulesv6_9 != "") {
                        v6Rules.push([19, data.IPPortFilterRulesv6_9]);
                    }
                    result.portFilterRules = _.union(result.portFilterRules, parsePortFilterRules(v6Rules, "IPv6"));
                }

                return result;
            } else {
                return unknownErrorObject;
            }
        }

        //from 93, refactory later
        function parsePortFilterRules(data, ipTypeTmp) {
            var rules = [];
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    var aRule = {};
                    //192.168.0.5,0,1,6,192.168.0.53,0,1,655,1,1,kk,00:1E:90:FF:FF:FF
                    var elements = data[i][1].split(",");
                    aRule.index = data[i][0];
                    aRule.macAddress = elements[11];
                    aRule.destIpAddress = elements[4] == "any/0" ? "" : elements[4];
                    aRule.sourceIpAddress = elements[0] == "any/0" ? "" : elements[0];
                    aRule.destPortRange = elements[6] == '0' ? '' : elements[6] + " - " + elements[7];
                    aRule.sourcePortRange = elements[2] == '0' ? '' : elements[2] + " - " + elements[3];
                    aRule.action = elements[9] == 1 ? "filter_accept" : "filter_drop";
                    aRule.protocol = transProtocol(elements[8]);
                    aRule.comment = elements[10];
                    aRule.ipType = ipTypeTmp;
                    rules.push(aRule);
                }
            }
            return rules;
        }
    }

    /**
     * è®¾ç½®ç«¯å£è¿æ»¤åºæ¬ä¿¡æ¯
     * @method setPortFilterBasic
     */
    function setPortFilterBasic() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "BASIC_SETTING";
            requestParams.portFilterEnabled = params.portFilterEnable;
            requestParams.defaultFirewallPolicy = params.defaultPolicy;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®ç«¯å£è¿æ»¤ä¿¡æ¯
     * @method setPortFilter
     */
    function setPortFilter() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            if (config.USE_IPV6_INTERFACE) {
                requestParams.goformId = "ADD_IP_PORT_FILETER_V4V6";
                requestParams.ip_version = params.ipType;
            } else {
                requestParams.goformId = "ADD_IP_PORT_FILETER";
            }

            requestParams.mac_address = params.macAddress;
            requestParams.dip_address = params.destIpAddress;
            requestParams.sip_address = params.sourceIpAddress;
            requestParams.dFromPort = params.destPortStart;
            requestParams.dToPort = params.destPortEnd;
            requestParams.sFromPort = params.sourcePortStart;
            requestParams.sToPort = params.sourcePortEnd;
            requestParams.action = params.action;
            requestParams.protocol = params.protocol;
            requestParams.comment = params.comment;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å é¤ç«¯å£è¿æ»¤ä¿¡æ¯
     * @method deleteFilterRules
     */
    function deleteFilterRules() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;

            var deleteIds = _.filter(params.indexs, function (item) {
                return item.length == 1;
            });

            if (config.USE_IPV6_INTERFACE) {
                requestParams.goformId = "DEL_IP_PORT_FILETER_V4V6";
                var deletev6Ids = [];
                _.each(params.indexs, function (item) {
                    if (item.length == 2) {
                        deletev6Ids.push(item.substring(1));
                    }
                });

                requestParams.delete_id_v6 = deletev6Ids.length > 0 ? deletev6Ids.join(';') + ";" : "";
            } else {
                requestParams.goformId = "DEL_IP_PORT_FILETER";
            }

            requestParams.delete_id = deleteIds.length > 0 ? deleteIds.join(';') + ";" : "";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åwifié«çº§ä¿¡æ¯
     * @method getWifiAdvance
     * @return {Object} wifi JSON å¯¹è±¡
     */
    function getWifiAdvance() {

        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "WirelessMode,CountryCode,Channel,HT_MCS,wifi_band,wifi_11n_cap";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {
                    mode: data.WirelessMode,
                    countryCode: data.CountryCode,
                    channel: data.Channel,
                    rate: data.HT_MCS,
                    wifiBand: data.wifi_band == 'a' ? 'a' : 'b',
                    bandwidth: data.wifi_11n_cap
                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®wifié«çº§ä¿¡æ¯
     * @method setWifiAdvance
     * @param {Object} JSON åæ°å¯¹è±¡
     */
    function setWifiAdvance() {
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "SET_WIFI_INFO",
                isTest: isTest,
                wifiMode: params.mode,
                countryCode: params.countryCode
            };
            if (config.WIFI_BAND_SUPPORT) {
                requestParams.wifi_band = params.wifiBand;
            }
            requestParams.selectedChannel = params.channel;
            if (!config.WIFI_BAND_SUPPORT || params.wifiBand != 'a') { // 2.4G
                requestParams.abg_rate = params.rate;
            }
            if (config.WIFI_BANDWIDTH_SUPPORT) {
                requestParams.wifi_11n_cap = params.bandwidth;
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åè®¾å¤åºæ¬ä¿¡æ¯
     * @method getDeviceInfo
     */
    function getDeviceInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {
                isTest: isTest,
                cmd: "wifi_coverage,m_ssid_enable,imei,web_version,wa_inner_version,hardware_version,MAX_Access_num," +
                    "SSID1,m_SSID,m_HideSSID,m_MAX_Access_num,lan_ipaddr," +
                    "mac_address,msisdn,LocalDomain,wan_ipaddr,ipv6_wan_ipaddr,ipv6_pdp_type,pdp_type,ppp_status,sim_imsi,rssi,rscp,lte_rsrp,network_type",
                multi_data: 1
            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var signal = null;
                var type_2g = ["GSM", "GPRS", "EDGE"];
                var type_3g = ["UMTS", "HSDPA", "HSUPA", "HSPA", "HSPA+", "DC-HSPA+"];
                var type_4g = ["LTE"];
                if ($.inArray(data.network_type, type_2g) != -1) {
                    signal = data.rssi;
                } else if ($.inArray(data.network_type, type_3g) != -1) {
                    signal = data.rscp;
                } else if ($.inArray(data.network_type, type_4g) != -1) {
                    signal = data.lte_rsrp;
                }

                return {
                    ssid: data.SSID1,
                    m_ssid: data.m_SSID,
                    m_max_access_num: data.m_MAX_Access_num,
                    multi_ssid_enable: data.m_ssid_enable,
                    ipAddress: data.lan_ipaddr,
                    wanIpAddress: data.wan_ipaddr,
                    ipv6WanIpAddress: data.ipv6_wan_ipaddr,
                    ipv6PdpType: data.ipv6_pdp_type,
                    macAddress: data.mac_address,
                    simSerialNumber: data.msisdn,
                    lanDomain: data.LocalDomain,
                    imei: data.imei,
                    web_version: data.web_version,
                    fw_version: data.wa_inner_version,
                    hw_version: data.hardware_version,
                    max_access_num: data.MAX_Access_num,
                    wifiRange: data.wifi_coverage,
                    pdpType: data.pdp_type,
                    connectStatus: data.ppp_status,
                    imsi: data.sim_imsi,
                    cur_netcable_mode: data.cur_netcable_mode,
                    cable_wan_ipaddr: data.cable_wan_ipaddr,
                    cable_wan_netmask: data.cable_wan_netmask,
                    cable_wan_gateway: data.cable_wan_gateway,
                    cable_prefer_dns: data.cable_prefer_dns,
                    cable_standby_dns: data.cable_standby_dns,
                    signal: signal
                };
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åwifiè¦çèå´
     * @method getWifiRange
     */
    function getWifiRange() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "wifi_coverage";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.wifiRangeMode = data.wifi_coverage;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®wifiè¦çèå´
     * @method getWifiRange
     */
    function setWifiRange() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "SET_WIFI_COVERAGE";
            requestParams.isTest = isTest;
            requestParams.wifi_coverage = params.wifiRangeMode;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è·åupnpä¿¡æ¯
     * @method getUpnpSetting
     */
    function getUpnpSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "upnpEnabled";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.upnpSetting = data.upnpEnabled == "1" ? "1" : "0";
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è®¾ç½®upnpä¿¡æ¯
     * @method setUpnpSetting
     */
    function setUpnpSetting() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "UPNP_SETTING";
            requestParams.isTest = isTest;
            requestParams.upnp_setting_option = params.upnpSetting;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è·ådmzä¿¡æ¯
     * @method getUpnpSetting
     */
    function getDmzSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "DMZEnable,DMZIPAddress";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.dmzSetting = data.DMZEnable == "1" ? "1" : "0";
                result.ipAddress = data.DMZIPAddress;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è®¾ç½®dmzä¿¡æ¯
     * @method setDmzSetting
     */
    function setDmzSetting() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "DMZ_SETTING";
            requestParams.isTest = isTest;
            requestParams.DMZEnabled = params.dmzSetting;
            if (requestParams.DMZEnabled == '1') {
                requestParams.DMZIPAddress = params.ipAddress;
            }

            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åç«¯å£æ å°è§å
     * @method getPortMap
     */
    function getPortMap() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "PortMapEnable,PortMapRules_0,PortMapRules_1,PortMapRules_2,PortMapRules_3,PortMapRules_4,PortMapRules_5,PortMapRules_6,PortMapRules_7,PortMapRules_8,PortMapRules_9",
                requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.portMapEnable = data.PortMapEnable;
                //from 93, refactory later
                var rules = [];
                if (data.PortMapRules_0 != "") {
                    rules.push([0, data.PortMapRules_0]);
                }
                if (data.PortMapRules_1 != "") {
                    rules.push([1, data.PortMapRules_1]);
                }
                if (data.PortMapRules_2 != "") {
                    rules.push([2, data.PortMapRules_2]);
                }
                if (data.PortMapRules_3 != "") {
                    rules.push([3, data.PortMapRules_3]);
                }
                if (data.PortMapRules_4 != "") {
                    rules.push([4, data.PortMapRules_4]);
                }
                if (data.PortMapRules_5 != "") {
                    rules.push([5, data.PortMapRules_5]);
                }
                if (data.PortMapRules_6 != "") {
                    rules.push([6, data.PortMapRules_6]);
                }
                if (data.PortMapRules_7 != "") {
                    rules.push([7, data.PortMapRules_7]);
                }
                if (data.PortMapRules_8 != "") {
                    rules.push([8, data.PortMapRules_8]);
                }
                if (data.PortMapRules_9 != "") {
                    rules.push([9, data.PortMapRules_9]);
                }
                result.portMapRules = parsePortMapRules(rules);
                return result;
            } else {
                return unknownErrorObject;
            }
        }

        //from 93, refactory later
        function parsePortMapRules(data) {
            var rules = [];
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    var aRule = {};
                    var elements = data[i][1].split(",");
                    aRule.index = data[i][0];
                    aRule.sourcePort = elements[1];
                    aRule.destIpAddress = elements[0];
                    aRule.destPort = elements[2];
                    aRule.protocol = transProtocol(elements[3]);
                    aRule.comment = elements[4];
                    rules.push(aRule);
                }
            }
            return rules;
        }
    }

    /**
     * è®¾ç½®ç«¯å£æ å°ä¿¡æ¯
     * @method setPortMap
     */
    function setPortMap() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "ADD_PORT_MAP";
            requestParams.portMapEnabled = params.portMapEnable;
            requestParams.fromPort = params.sourcePort;
            requestParams.ip_address = params.destIpAddress;
            requestParams.toPort = params.destPort;
            requestParams.protocol = params.protocol;
            requestParams.comment = params.comment;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å¯ç¨/ç¦ç¨ç«¯å£æ å°
     * @method enablePortMap
     */
    function enablePortMap() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "ADD_PORT_MAP";
            requestParams.portMapEnabled = params.portMapEnable;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å é¤ç«¯å£æ å°ä¿¡æ¯
     * @method deleteMapRules
     */
    function deleteMapRules() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "DEL_PORT_MAP";
            requestParams.delete_id = params.indexs.join(';') + ";";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åæµéæéæ°æ®
     * @method getTrafficAlertInfo
     */
    function getTrafficAlertInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                cmd: "data_volume_limit_switch,data_volume_limit_unit,data_volume_limit_size,data_volume_alert_percent",
                multi_data: 1
            };
        }

        function deal(data) {
            if (data) {
                var isData = data.data_volume_limit_unit == 'data';
                var result = {
                    dataLimitChecked: data.data_volume_limit_switch,
                    dataLimitTypeChecked: isData ? '1' : '0',
                    limitDataMonth: isData ? data.data_volume_limit_size : '0',
                    alertDataReach: isData ? data.data_volume_alert_percent : '0',
                    limitTimeMonth: isData ? '0' : data.data_volume_limit_size,
                    alertTimeReach: isData ? '0' : data.data_volume_alert_percent

                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®æµéæé
     * @method setTrafficAlertInfo
     */
    function setTrafficAlertInfo() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var isData = params.dataLimitTypeChecked == '1';
            var requestParams = {
                isTest: isTest,
                goformId: "DATA_LIMIT_SETTING",
                data_volume_limit_switch: params.dataLimitChecked
            };
            if (params.dataLimitChecked == '1') {
                requestParams.data_volume_limit_unit = isData ? 'data' : 'time';
                requestParams.data_volume_limit_size = isData ? params.limitDataMonth : params.limitTimeMonth;
                requestParams.data_volume_alert_percent = isData ? params.alertDataReach : params.alertTimeReach;
            }
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * åéUSSDå½ä»¤ï¼è·åååº
     * @method getUSSDResponse
     */
    function getUSSDResponse() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            if (params.sendOrReply == "send") {
                return {
                    isTest: isTest,
                    goformId: "USSD_PROCESS",
                    USSD_operator: params.operator,
                    USSD_send_number: params.strUSSDCommand,
                    notCallback: true
                };
            } else if (params.sendOrReply == "reply") {
                return {
                    isTest: isTest,
                    goformId: "USSD_PROCESS",
                    USSD_operator: params.operator,
                    USSD_reply_number: params.strUSSDCommand,
                    notCallback: true
                };
            }
        }

        function deal(data) {
            if (!data) {
                callback(false, "ussd_fail");
                return;
            }
            if (data.result == "success") {
                callbackTemp = callback;
                getResponse();
            } else {
                callback(false, "ussd_fail");
            }
        }

    }

    /**
     * è·åååº
     * @method getResponse
     */
    function getResponse() {
        $.ajax({
            url: "/goform/goform_get_cmd_process",
            data: {cmd: "ussd_write_flag"},
            cache: false,
            async: false,
            dataType: "json",
            success: function (result) {
                if (result.ussd_write_flag == "1") {
                    callbackTemp(false, "ussd_no_service");
                } else if (result.ussd_write_flag == "4" || result.ussd_write_flag == "unknown") {
                    callbackTemp(false, "ussd_timeout");
                } else if (result.ussd_write_flag == "15") {
                    setTimeout(getResponse, 1000);
                } else if (result.ussd_write_flag == "10") {
                    callbackTemp(false, "ussd_retry");
                } else if (result.ussd_write_flag == "99") {
                    callbackTemp(false, "ussd_unsupport");
                } else if (result.ussd_write_flag == "16") {
                    $.ajax({
                        url: "/goform/goform_get_cmd_process",
                        data: {cmd: "ussd_data_info"},
                        dataType: "json",
                        async: false,
                        cache: false,
                        success: function (data) {
                            var content = {};
                            content.data = data.ussd_data;
                            content.ussd_action = data.ussd_action;
                            callbackTemp(true, content);
                        },
                        error: function () {
                            callbackTemp(false, "ussd_info_error");
                        }
                    });
                } else {
                    callbackTemp(false, "ussd_fail");
                }
            },
            error: function () {
                callbackTemp(false, "ussd_fail");
            }
        });
    }

    /**
     * åéUSSDåæ¶å½ä»¤
     * @method USSDReplyCancel
     */
    function USSDReplyCancel(callback) {
        $.ajax({
            url: "/goform/goform_set_cmd_process",
            data: {goformId: "USSD_PROCESS", USSD_operator: "ussd_cancel"},
            cache: false,
            dataType: "json",
            success: function (data) {
                if (data.result == "success") {
                    getCancelResponse();
                } else {
                    callback(false);
                }
            }
        });

        function getCancelResponse() {
            $.ajax({
                url: "/goform/goform_get_cmd_process",
                data: {cmd: "ussd_write_flag"},
                cache: false,
                async: false,
                dataType: "json",
                success: function (result) {
                    if (result.ussd_write_flag == "15") {
                        setTimeout(getCancelResponse, 1000);
                    } else if (result.ussd_write_flag == "13") {
                        callback(true);
                    } else {
                        callback(false);
                    }
                },
                error: function () {
                    callback(false);
                }
            });
        }
    }

    /**
     *è·åSTKä¿¡æ¯
     * @method getSTKFlagInfo
     */
    function getSTKFlagInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "stk_write_flag";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.stk_write_flag = data.stk_write_flag;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è·åSTKä¿¡æ¯
     * @method getSTKInfo
     */
    function getSTKInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "stk";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.stk = data.stk;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è·åSTKmenuä¿¡æ¯
     * @method getSTKMenuInfo
     */
    function getSTKMenuInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "stk_menu";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {};
                result.stk_menu = data.stk_menu;
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     *è®¾ç½®stkä¿¡æ¯
     * @method setSTKMenuInfo
     */
    function setSTKMenuInfo() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "STK_PROCESS";
            requestParams.isTest = isTest;
            requestParams.operator = params.operator;
            requestParams.item_no = params.item_no;
            requestParams.stk_content = params.stk_content;
            requestParams.stk_encode_type = params.stk_encode_type;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**
     * è·ådlnaåæ°
     * @method getDlnaSetting
     */
    function getDlnaSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "dlna_language,dlna_name,dlna_share_audio,dlna_share_video,dlna_share_image,dlna_scan_state,sd_card_state,sdcard_mode_option";
            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {
                    language: data.dlna_language,
                    deviceName: data.dlna_name,
                    shareAudio: data.dlna_share_audio,
                    shareVideo: data.dlna_share_video,
                    shareImage: data.dlna_share_image,
                    needRescan: data.dlna_scan_state == "1",
                    dlnaEnable: data.sd_card_state == "1" && data.sdcard_mode_option == "1"
                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®dlnaåæ°
     * @method setDlnaSetting
     */
    function setDlnaSetting() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                notCallback: true,
                goformId: "DLNA_SETTINGS",
                dlna_language: params.language,
                dlna_name: params.deviceName,
                dlna_share_audio: params.shareAudio,
                dlna_share_video: params.shareVideo,
                dlna_share_image: params.shareImage
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("dlna_rescan_end", checkSetDlnaSetting);
            } else {
                callback(data);
            }
        }

        function checkSetDlnaSetting(data) {
            checkRescanStatus(data, callback, checkSetDlnaSetting);
        }
    }

    /**
     * éæ°æ«ædlna, ä½¿å±äº«æä»¶ä¸Tå¡æä»¶åæ­¥
     * @method rescanDlna
     */
    function rescanDlna() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                notCallback: true,
                goformId: "DLNA_RESCAN"
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                addTimerThings("dlna_rescan_end", checkRescanDlna);
            } else {
                callback(data);
            }
        }

        function checkRescanDlna(data) {
            checkRescanStatus(data, callback, checkRescanDlna);
        }
    }

    function checkRescanStatus(data, callback, fn) {
        if (data.dlna_rescan_end == "1") {
            removeTimerThings("dlna_rescan_end", fn);
            callback({result: "success"});
        }
    }

    /**
     * ç½ç»è§£é
     * @method unlockNetwork
     */
    function unlockNetwork() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "UNLOCK_NETWORK",
                unlock_network_code: params.unlock_network_code
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åè§£éæ¬¡æ°
     * @method getNetworkUnlockTimes
     */
    function getNetworkUnlockTimes() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                cmd: "unlock_nck_time"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®åçº§æéä¿¡æ¯
     * @method setUpdateInfoWarning
     */
    function setUpdateInfoWarning() {
        var callback = arguments[1];
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "SET_UPGRADE_NOTICE",
                upgrade_notice_flag: params.upgrade_notice_flag,
                notCallback: true
            };
        }

        function deal(data) {
            if (data.result == "success") {
                callback(true);
            } else {
                callback(false);
            }
        }
    }

    /**
     * è·ååçº§æéä¿¡æ¯
     * @method getUpdateInfoWarning
     */
    function getUpdateInfoWarning() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                cmd: "upgrade_notice_flag"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·ååçº§ä¿¡æ¯
     * @method getUpdateInfo
     */
    function scanForUpdateInfo(callback) {
        if (isTest) {
            callback(true);
        }
        $.post("/goform/goform_set_cmd_process", {
            goformId: "SET_UPGRADE_MANU"
        },function (data) {
            if (data.result == "success") {
                checkScanStatus();
            } else {
                callback(false);
            }
        }, "json").error(function () {
                callback(false);
            });

        function checkScanStatus() {
            $.getJSON("/goform/goform_get_cmd_process", {
                cmd: "update_agent_state",
                "_": new Date().getTime()
            },function (data) {
                if (data.update_agent_state == "1") {
                    setTimeout(checkScanStatus, 30000);
                } else {
                    callback(true);
                }
            }).error(function () {
                    callback(false);
                });
        }

    }

    /**
     * è·åAP Stationåºæ¬è®¾ç½®
     * @method getAPStationBasic
     */
    function getAPStationBasic() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                multi_data: 1,
                cmd: "wifi_sta_connection,ap_station_mode,wifi_profile"
            };
        }

        function deal(data) {
            if (data) {
                return {
                    ap_station_enable: data.wifi_sta_connection,
                    ap_station_mode: data.ap_station_mode,
                    wifi_profile: data.wifi_profile
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åAP Stationåºæ¬è®¾ç½®
     * @method setAPStationBasic
     */
    function setAPStationBasic() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "WIFI_STA_CONTROL",
                wifi_sta_connection: params.ap_station_enable,
                ap_station_mode: params.ap_station_mode
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åé¢ç½®åä¿å­çç­ç¹åè¡¨
     * @method getHotspotList
     */
    function getHotspotList() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                multi_data: 1,
                cmd: "wifi_profile,wifi_profile1,wifi_profile2,wifi_profile3,wifi_profile4,wifi_profile5,wifi_profile_num"
            };
        }

        function deal(data) {
            if (data) {
                var wifiList = [];
                for (var i = 0; i <= 5; i++) {
                    var wifiStr = "";
                    if (i == 0) {
                        wifiStr = data.wifi_profile;
                    } else {
                        wifiStr = data["wifi_profile" + i];
                    }
                    var wifiArray = wifiStr.split(";");
                    for (var j = 0; j < wifiArray.length; j++) {
                        var item = wifiArray[j].split(",");
                        if (!item[0]) {
                            break;
                        }
                        var wifiJson = {
                            profileName: item[0],
                            fromProvider: item[1],
                            connectStatus: item[2],
                            signal: item[3],
                            ssid: item[4],
                            authMode: item[5],
                            encryptType: item[6],
                            password: item[7] == "0" ? "" : item[7],
                            keyID: item[8]
                        }
                        wifiList.push(wifiJson);
                    }
                }

                return { hotspotList: wifiList };

            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æç´¢ç­ç¹
     * @method searchHotspot
     */
    function searchHotspot() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "WLAN_SET_STA_REFRESH"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åæå¯»å°çç­ç¹åè¡¨
     * @method getSearchHotspotList
     */
    function getSearchHotspotList() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                multi_data: 1,
                cmd: "scan_finish,EX_APLIST,EX_APLIST1"
            }
        }

        function deal(data) {
            if (data) {
                if (data.scan_finish == "0") {
                    return { scan_finish: false, hotspotList: [] };
                }
                var wifiList = [];
                for (var i = 0; i <= 1; i++) {
                    var wifiStr;
                    if (i == 0) {
                        wifiStr = data.EX_APLIST;
                    } else {
                        wifiStr = data.EX_APLIST1;
                    }
                    var wifiArray = wifiStr.split(";");
                    for (var j = 0; j < wifiArray.length; j++) {
                        var item = wifiArray[j].split(",");
                        if (!item[0]) {
                            break;
                        }
                        var wifiJson = {
                            fromProvider: item[0],
                            connectStatus: item[1],
                            ssid: item[2],
                            signal: item[3],
                            channel: item[4],
                            authMode: item[5],
                            encryptType: item[6]
                        }
                        wifiList.push(wifiJson);
                    }
                }

                return {scan_finish: true, hotspotList: wifiList };

            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å°ç­ç¹ä¿¡æ¯ç»æå­ç¬¦ä¸²
     * @method creatHotspotString
     */
    function creatHotspotString(hotspot) {
        var item = [];
        item.push(hotspot.profileName);
        item.push(hotspot.fromProvider || "0");
        item.push(hotspot.connectStatus || "0");
        item.push(hotspot.signal);
        item.push(hotspot.ssid);
        item.push(hotspot.authMode);
        item.push(hotspot.encryptType);
        item.push(hotspot.password || "0");
        item.push(hotspot.keyID);
        return item.join(",");
    }

    /**
     * ä¿å­ç­ç¹
     * @method saveHotspot
     */
    function saveHotspot() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            var wifi_profile_length = params.wifi_profile().split(";").length;
            var apList = params.apList;
            var action = "modify";
            if (params.profileName == "") {
                action = "add";
                var newName = ( jQuery.fn.jquery + Math.random() ).replace(/\D/g, "");
                params.profileName = newName;
                apList.push({
                    profileName: newName,
                    fromProvider: "0",
                    connectStatus: "0",
                    signal: params.signal,
                    ssid: params.ssid,
                    authMode: params.authMode,
                    encryptType: params.encryptType,
                    password: params.password || "0",
                    keyID: params.keyID
                });
            }

            var wifi = {"profile0": [], "profile1": [], "profile2": [], "profile3": [], "profile4": [], "profile5": []};
            var activeHotspotStr = "";
            for (var i = 0; i < apList.length; i++) {
                var hotspotStr = "";
                if (params.profileName == apList[i].profileName) {
                    hotspotStr = creatHotspotString(params);
                    activeHotspotStr = hotspotStr;
                } else {
                    hotspotStr = creatHotspotString(apList[i]);
                }
                var index = parseInt(i / 5);
                wifi["profile" + index].push(hotspotStr);
            }

            return {
                isTest: isTest,
                goformId: "WIFI_SPOT_PROFILE_UPDATE",
                wifi_profile: wifi.profile0.join(";"),
                wifi_profile1: wifi.profile1.join(";"),
                wifi_profile2: wifi.profile2.join(";"),
                wifi_profile3: wifi.profile3.join(";"),
                wifi_profile4: wifi.profile4.join(";"),
                wifi_profile5: wifi.profile5.join(";"),
                wifi_profile_num: apList.length,
                wifi_update_profile: activeHotspotStr,
                action: action
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * å é¤ç­ç¹
     * @method deleteHotspot
     */
    function deleteHotspot() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            var apList = params.apList;
            var wifi = {"profile0": [], "profile1": [], "profile2": [], "profile3": [], "profile4": [], "profile5": []};
            var foundDelete = false;
            var activeHotspotStr = "";
            for (var i = 0; i < apList.length; i++) {
                var hotspotStr = creatHotspotString(apList[i]);
                if (apList[i].profileName == params.profileName) {
                    foundDelete = true;
                    activeHotspotStr = hotspotStr;
                    continue;
                }
                var idIndex = i;
                if (foundDelete) {
                    idIndex = i - 1;
                }
                var index = parseInt(idIndex / 5);
                wifi["profile" + index].push(hotspotStr);
            }
            var num = foundDelete ? apList.length - 1 : apList.length;

            return {
                isTest: isTest,
                goformId: "WIFI_SPOT_PROFILE_UPDATE",
                wifi_profile: wifi.profile0.join(";"),
                wifi_profile1: wifi.profile1.join(";"),
                wifi_profile2: wifi.profile2.join(";"),
                wifi_profile3: wifi.profile3.join(";"),
                wifi_profile4: wifi.profile4.join(";"),
                wifi_profile5: wifi.profile5.join(";"),
                wifi_profile_num: num,
                wifi_update_profile: activeHotspotStr,
                action: "delete"
            };
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * é¾æ¥ç­ç¹
     * @method connectHotspot
     */
    function connectHotspot() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "WLAN_SET_STA_CON",
                EX_SSID1: params.EX_SSID1,
                EX_AuthMode: params.EX_AuthMode,
                EX_EncrypType: params.EX_EncrypType,
                EX_DefaultKeyID: params.EX_DefaultKeyID,
                EX_WEPKEY: params.EX_WEPKEY,
                EX_WPAPSK1: params.EX_WPAPSK1,
                EX_wifi_profile: params.EX_wifi_profile
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * æ­å¼ç­ç¹
     * @method disconnectHotspot
     */
    function disconnectHotspot() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "WLAN_SET_STA_DISCON"
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åå¿«éå¼æºè®¾ç½®
     * @method getFastbootSetting
     */
    function getFastbootSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params) {
            return {
                isTest: isTest,
                cmd: "mgmt_quicken_power_on"
            };
        }

        function deal(data) {
            return {fastbootEnabled: data.mgmt_quicken_power_on == '1' ? '1' : '0'};
        }
    }

    /**
     * è®¾ç½®å¿«éå¼æºä¿¡æ¯
     * @method setFastbootSetting
     */
    function setFastbootSetting() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params) {
            return {
                isTest: isTest,
                goformId: "MGMT_CONTROL_POWER_ON_SPEED",
                mgmt_quicken_power_on: params.fastbootEnabled
            };
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * éå¯è®¾å¤
     * @method restart
     */
    function restart() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "REBOOT_DEVICE";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAæ°çæ¬ä¿¡æ¯
     * @method getNewVersionState
     * @return {Object} JSON å¯¹è±¡
     */
    function getNewVersionState() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "new_version_state";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var hasNewVersion = (data.new_version_state == "1" || data.new_version_state == 'version_has_new_critical_software' || data.new_version_state == 'version_has_new_optional_software');
                data.hasNewVersion = hasNewVersion;
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**
     * è·åOTAæ°çæ¬ä¿¡æ¯
     * @method getPackSizeInfo
     * @return {Object} JSON å¯¹è±¡
     */
    function getNewVersionInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "update_info";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAå¼ºå¶åçº§ç¶æ
     * @method getMandatory
     * @return {Object} JSON å¯¹è±¡
     */
    function getMandatory() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "is_mandatory";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAåçº§ç»æ
     * @method getUpgradeResult
     * @return {Object} JSON å¯¹è±¡
     */
    function getUpgradeResult() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "upgrade_result";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAåçº§ç¶æ
     * @method getCurrentUpgradeState
     * @return {Object} JSON å¯¹è±¡
     */
    function getCurrentUpgradeState() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "current_upgrade_state";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAä¸è½½ç¶æ
     * @method getPackSizeInfo
     * @return {Object} JSON å¯¹è±¡
     */
    function getPackSizeInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "pack_size_info";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è·åOTAéæ©ç¶æ
     * @method getUserChoice
     * @return {Object} JSON å¯¹è±¡
     */
    function getUserChoice() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "if_has_select";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**
     *ç¨æ·éæ©æ¯å¦è¿è¡åçº§ååçº§ä¸­åæ¶
     * @method setUpgradeSelectOp
     */
    function setUpgradeSelectOp() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.goformId = "IF_UPGRADE";
            requestParams.isTest = isTest;
            requestParams.select_op = params.selectOp;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }

    function getOTAUpdateSetting() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "GetUpgAutoSetting";
            return requestParams;
        }

        function deal(data) {
            if (data) {
                return {
                    "updateMode": data.UpgMode,
                    "updateIntervalDay": data.UpgIntervalDay,
                    "allowRoamingUpdate": data.UpgRoamPermission
                };
            } else {
                return unknownErrorObject;
            }
        }
    }

    function setOTAUpdateSetting() {
        return doStuff(arguments, {}, prepare, deal, null, true);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.goformId = "SetUpgAutoSetting";
            requestParams.UpgMode = params.updateMode;
            requestParams.UpgIntervalDay = params.updateIntervalDay;
            requestParams.UpgRoamPermission = params.allowRoamingUpdate;

            return requestParams;
        }

        function deal(data) {
            if (data && data.result == "success") {
                return data;
            } else {
                return unknownErrorObject;
            }
        }
    }


    /**
     * è·åæçº¿èç½ä¿¡æ¯
     * @method getEthernetInfo
     * @return {Object} wifi JSON å¯¹è±¡
     */
    function getEthernetInfo() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            var requestParams = {};
            requestParams.isTest = isTest;
            requestParams.cmd = "cur_netcable_mode,cable_dial_mode,cable_static_wan_ipaddr," +
                "cable_static_wan_netmask,cable_static_wan_gateway,cable_static_prefer_dns," +
                "cable_static_standby_dns,pppoe_status,pppoe_username,pppoe_password," +
                "pppoe_auto_dial,pppoe_psw_save,cur_netcable_mode,pppoe_save_psw";

            requestParams.multi_data = 1;
            return requestParams;
        }

        function deal(data) {
            if (data) {
                var result = {
                    cur_netcable_mode: data.cur_netcable_mode,
                    cable_dial_mode: data.cable_dial_mode,
                    cable_static_wan_ipaddr: data.cable_static_wan_ipaddr,
                    cable_static_wan_netmask: data.cable_static_wan_netmask,
                    cable_static_wan_gateway: data.cable_static_wan_gateway,
                    cable_static_prefer_dns: data.cable_static_prefer_dns,
                    cable_static_standby_dns: data.cable_static_standby_dns,
                    pppoe_status: data.pppoe_status,
                    pppoe_username: data.pppoe_username,
                    pppoe_password: data.pppoe_password,
                    pppoe_auto_dial: data.pppoe_auto_dial,
                    pppoe_psw_save: data.pppoe_psw_save,
                    cur_netcable_mode: data.cur_netcable_mode,
                    pppoe_psw_save: data.pppoe_psw_save
                };
                return result;
            } else {
                return unknownErrorObject;
            }
        }
    }

    /**
     * è®¾ç½®æçº¿æ¨¡å¼ä¿¡æ¯
     * @method setEthernetInfo
     * @param {Object} JSON åæ°å¯¹è±¡
     * @return {Object}
     */
    function checkEthConnectedStatus(currentConnStatus) {
        return currentConnStatus == "ppp_connected" || currentConnStatus == "ipv6_connected" || currentConnStatus == "ipv4_ipv6_connected";
    }

    function setEthernetInfo() {
        var pppoe_status = arguments[0].pppoe_status;
        var cable_dial_mode = arguments[0].cable_dial_mode;
        var callback = arguments[1];
        doStuffAndCheckServerIsOnline(arguments, prepare, deal);

        function prepare(params) {
            var requestParams = {
                goformId: "CABLE_CONFIG",
                isTest: isTest,
                notCallback: true,
                cable_dial_mode: params.cable_dial_mode,
                cable_static_wan_ipaddr: params.cable_static_wan_ipaddr,
                cable_static_wan_netmask: params.cable_static_wan_netmask,
                cable_static_wan_gateway: params.cable_static_wan_gateway,
                cable_static_prefer_dns: params.cable_static_prefer_dns,
                cable_static_standby_dns: params.cable_static_standby_dns,
                pppoe_username: params.pppoe_username,
                pppoe_password: params.pppoe_password,
                pppoe_auto_dial: params.pppoe_auto_dial,
                pppoe_psw_save: params.pppoe_psw_save,
                action: params.action,
                mode: params.mode

            };
            return requestParams;
        }

        function deal(data) {
            if (data) {
                if (cable_dial_mode == "pppoe") {
                    addTimerThings("pppoe_status", checkEthConnectStatus);
                } else {
                    return data;
                }
            } else {
                return unknownErrorObject;
            }
        }

        function checkEthConnectStatus(data) {
            if (pppoe_status == "ppp_connected") {
                if (data.pppoe_status == "ppp_disconnected") {
                    removeTimerThings("pppoe_status", checkEthConnectStatus);
                    callback({
                        result: 'success'
                    });
                }
            } else {
                if (data.pppoe_status == "ppp_connected") {
                    removeTimerThings("pppoe_status", checkEthConnectStatus);
                    callback({
                        result: 'success'
                    });
                }
            }
        }
    }

    /*
     *
     *
     */
    function getEthernetConnect() {
        return doStuff(arguments, {}, prepare, deal, null, false);

        function prepare(params, isPost) {
            return {
                isTest: isTest,
                multi_data: 1,
                cmd: "cur_netcable_mode,pppoe_status"
            };
        }

        function deal(data) {
            if (data) {
                return {
                    cur_netcable_mode: data.cur_netcable_mode,
                    pppoe_status: data.pppoe_status
                }
            } else {
                return unknownErrorObject;
            }
        }
    }

    return {
        getEthernetConnect: getEthernetConnect,
        getWifiBasic: getWifiBasic,//Test Done
        setWifiBasic: setWifiBasic,//Test Done
        setWifiSwitch: setWifiSwitch,//Test Done
        getEthernetInfo: getEthernetInfo,//Test Done
        setEthernetInfo: setEthernetInfo,//Test Done
        setWifiBasic4SSID2: setWifiBasic4SSID2,//Test Done
        setWifiBasicMultiSSIDSwitch: setWifiBasicMultiSSIDSwitch,//Test Done
        getSecurityInfo: getSecurityInfo,//Test Done
        setSecurityInfo: setSecurityInfo,//Test Done
        getCurrentlyAttachedDevicesInfo: getCurrentlyAttachedDevicesInfo,//Test Done
        getLanguage: getLanguage,//Test Done
        setLanguage: setLanguage,//Test Done
        getNetSelectInfo: getNetSelectInfo,//Test Done
        setBearerPreference: setBearerPreference,//Test Done
        scanForNetwork: scanForNetwork,//No Test
        getConnectionInfo: getConnectionInfo,//Test Done
        getStatusInfo: getStatusInfo,//Test Done
        connect: connect,//No Test
        disconnect: disconnect,//No Test
        setNetwork: setNetwork,//Test Done
        getCurrentNetwork: getCurrentNetwork,//Test Done
        savePhoneBook: savePhoneBook,//Test Done
        deletePhoneBooks: deletePhoneBooks,//Test Done
        deleteAllPhoneBooks: deleteAllPhoneBooks, //Test Done
        deleteAllPhoneBooksByGroup: deleteAllPhoneBooksByGroup,//Test Done
        getDevicePhoneBooks: getDevicePhoneBooks,//Test Done
        getSIMPhoneBooks: getSIMPhoneBooks,//Test Done
        getPhoneBooks: getPhoneBooks,//Test Done
        getPhoneBookReady: getPhoneBookReady,//Test Done
        getPhoneBooksByGroup: getPhoneBooksByGroup,//Test Done
        getConnectionMode: getConnectionMode,//Test Done
        setConnectionMode: setConnectionMode,//Test Done
        getApnSettings: getApnSettings,//Test Done
        deleteApn: deleteApn,//Test Done
        setDefaultApn: setDefaultApn,//Test Done
        addOrEditApn: addOrEditApn,//Test Done
        getSIMPhoneBookCapacity: getSIMPhoneBookCapacity,//Test Done
        getDevicePhoneBookCapacity: getDevicePhoneBookCapacity,//Test Done
        getLoginData: getLoginData,//Test Done
        login: login,//Test Done
        logout: logout,//Test Done
        getLoginStatus: getLoginStatus,//Test Done
        enterPIN: enterPIN,//Test Done
        enterPUK: enterPUK,//Test Done
        getSMSReady: getSMSReady,//Test Done
        getSMSMessages: getSMSMessages,//Test Done
        sendSMS: sendSMS,//Test Done
        saveSMS: saveSMS,//Test Done
        deleteAllMessages: deleteAllMessages,//Test Done
        deleteMessage: deleteMessage,//Test Done
        setSmsRead: setSmsRead,//Test Done
        resetNewSmsReceivedVar: resetNewSmsReceivedVar,
        resetSmsReportReceivedVar: resetSmsReportReceivedVar,
        getSMSDeliveryReport: getSMSDeliveryReport,
        getSmsCapability: getSmsCapability,//Test Done
        changePassword: changePassword,//Test Done
        getPinData: getPinData,//Test Done
        enablePin: enablePin,//Test Done
        disablePin: disablePin,//Test Done
        changePin: changePin,//Test Done
        getLanInfo: getLanInfo,//Test Done
        setLanInfo: setLanInfo,//Test Done
        getSmsSetting: getSmsSetting,//Test Done
        setSmsSetting: setSmsSetting,//Test Done
        restoreFactorySettings: restoreFactorySettings,//Test Done
        checkRestoreStatus: checkRestoreStatus,//Test Done
        getWpsInfo: getWpsInfo,//Test Done
        openWps: openWps,//Test Done
        getSleepMode: getSleepMode,//Test Done
        setSleepMode: setSleepMode,//Test Done
        getSysSecurity: getSysSecurity,//Test Done
        setSysSecurity: setSysSecurity,//Test Done
        getPortForward: getPortForward,//Test Done
        setPortForward: setPortForward,//Test Done
        deleteForwardRules: deleteForwardRules,//Test Done
        enableVirtualServer: enableVirtualServer,//Test Done
        getSDConfiguration: getSDConfiguration,//Test Done
        setSdCardMode: setSdCardMode,//Test Done
        checkFileExists: checkFileExists,//No Test
        getFileList: getFileList,//Test Done
        fileRename: fileRename,//Test Done
        getSdMemorySizes: getSdMemorySizes,//Test Done
        deleteFilesAndFolders: deleteFilesAndFolders,//Test Done
        createFolder: createFolder,//Test Done
        checkUploadFileStatus: checkUploadFileStatus,//No Test
        setSdCardSharing: setSdCardSharing,//Test Done
        getQuickSettingInfo: getQuickSettingInfo,//Test Done
        setQuickSetting: setQuickSetting,//Test Done
        setQuickSetting4IPv6: setQuickSetting4IPv6, //Test Done
        getPortFilter: getPortFilter,//Test Done
        setPortFilterBasic: setPortFilterBasic,//Test Done
        setPortFilter: setPortFilter,//Test Done
        deleteFilterRules: deleteFilterRules,//Test Done
        getWifiAdvance: getWifiAdvance,//Test Done
        setWifiAdvance: setWifiAdvance,//Test Done
        getWifiRange: getWifiRange,//Test Done
        setWifiRange: setWifiRange,//Test Done
        getUpnpSetting: getUpnpSetting,//Test Done
        setUpnpSetting: setUpnpSetting,//Test Done
        getDmzSetting: getDmzSetting,//Test Done
        setDmzSetting: setDmzSetting,//Test Done
        getDeviceInfo: getDeviceInfo, //Test Done
        getPortMap: getPortMap,//Test Done
        setPortMap: setPortMap,//Test Done
        enablePortMap: enablePortMap,//Test Done
        deleteMapRules: deleteMapRules, //Test Done
        getTrafficAlertInfo: getTrafficAlertInfo,//Test Done
        setTrafficAlertInfo: setTrafficAlertInfo,//Test Done
        getDlnaSetting: getDlnaSetting, //Test Done
        setDlnaSetting: setDlnaSetting, //Test Done
        rescanDlna: rescanDlna,//Test Done
        getUSSDResponse: getUSSDResponse,//No Test
        USSDReplyCancel: USSDReplyCancel,//No Test
        getNetworkUnlockTimes: getNetworkUnlockTimes,//No Test
        unlockNetwork: unlockNetwork,//No Test
        setUpdateInfoWarning: setUpdateInfoWarning,//No Test
        getUpdateInfoWarning: getUpdateInfoWarning,//No Test
        getAPStationBasic: getAPStationBasic,//Test Done
        setAPStationBasic: setAPStationBasic,//Test Done
        getHotspotList: getHotspotList,//Test Done
        searchHotspot: searchHotspot,//No Test
        getSearchHotspotList: getSearchHotspotList,//Test Done
        saveHotspot: saveHotspot,
        deleteHotspot: deleteHotspot,
        connectHotspot: connectHotspot,
        disconnectHotspot: disconnectHotspot,
        getFastbootSetting: getFastbootSetting,//Test Done
        setFastbootSetting: setFastbootSetting, //Test Done
        restart: restart,
        clearTrafficData: clearTrafficData,
        getNewVersionState: getNewVersionState,
        getUpgradeResult: getUpgradeResult,
        getCurrentUpgradeState: getCurrentUpgradeState,
        setUpgradeSelectOp: setUpgradeSelectOp,
        addTimerThings: addTimerThings,
        removeTimerThings: removeTimerThings,
        getPackSizeInfo: getPackSizeInfo,
        getNewVersionInfo: getNewVersionInfo,
        getMandatory: getMandatory,
        getUserChoice: getUserChoice,
        getOTAUpdateSetting: getOTAUpdateSetting,
        setOTAUpdateSetting: setOTAUpdateSetting,
        getSTKFlagInfo: getSTKFlagInfo,
        getSTKMenuInfo: getSTKMenuInfo,
        setSTKMenuInfo: setSTKMenuInfo,
        getSTKInfo: getSTKInfo,
        scanForUpdateInfo: scanForUpdateInfo,
        setMacFilter: setMacFilter,
        getMacFilterInfo: getMacFilterInfo,
        getPbmCurIndex:getPbmCurIndex
    };
});
<div class="form-body">
    <!--hide wifi range settings until sw implements it-->
    <form id='wifiRangeForm'>
        <div class="form-title hide" trans='wifi_range_settings'></div>

        <div class="content hide">
            <div class="row-fluid">
                <label class="span4 side-right" trans='wifi_range'></label>
                <div class="span8">
                    <input type="radio" name="rangeGroup" id='short_mode' value="short_mode" data-bind="checked: wifiRangeMode" />
                    <label for='short_mode' trans='wifi_short_mode'></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right"></label>
                <div class="span8">
                    <input type="radio" name="rangeGroup" id='medium_mode'  value="medium_mode" data-bind="checked: wifiRangeMode" />
                    <label for='medium_mode' trans='wifi_medium_mode'></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right"></label>
                <div class="span8">
                    <input type="radio" name="rangeGroup" id='long_mode'  value="long_mode" data-bind="checked: wifiRangeMode" />
                    <label for='long_mode' trans='wifi_long_mode'></label>
                </div>
            </div>
        </div>
        <div class="form-buttons hide">
            <input type="submit" class="btn-1 " trans='apply'/>
        </div>
        <div class="form-note hide">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="wifi_range_note_info"></li>
                <li trans="wifi_range_note_range"></li>
                <li class="no-style">
                    <ul>
                        <li trans="wifi_range_note_short"></li>
                        <li trans="wifi_range_note_medium"></li>
                        <li trans="wifi_range_note_long"></li>
                    </ul>
                </li>
            </ul>
        </div>
    </form>
    <form id='sleepModeForm'>
        <div class="form-title" trans='wifi_sleep'></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" for='mode' trans='sleep_time'></label>
                <div class="span8">
                <select transid='sleep_mode' id="mode" data-bind="options: modes, value: selectedMode, optionsText: transOption('sleep_mode'), optionsValue: 'value'"></select>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans='apply'/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="wifi_sleep_note_info"></li>
            </ul>
        </div>
    </form>
</div>/**
 * @module sleep_mode
 * @class sleep_mode
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    var sleepModes = _.map(config.SLEEP_MODES, function(item) {
        return new Option(item.name, item.value);
    });

    /**
     * sleepmode VM
     * @class SleepModeVM
     */
	function SleepModeVM() {
        var self = this;
        var info = getSleepMode();

        self.modes = ko.observableArray(sleepModes);
        self.selectedMode = ko.observable(info.sleepMode);

        var wifiRangeInfo = getWifiRange();

        self.wifiRangeMode = ko.observable(wifiRangeInfo.wifiRangeMode);

        /**
         * è®¾ç½®wifiä¼ç æ¨¡å¼
         * @method setSleepMode
         */
        self.setSleepMode = function() {
            showLoading();
            var params = {};
            params.sleepMode = self.selectedMode();
            service.setSleepMode(params, function(result) {
                if (result.result == "success") {
                    successOverlay();
                } else {
                    errorOverlay();
                }
            });
        };

        /**
         * è®¾ç½®wifiè¦çèå´
         * @method setWifiRange
         */
        self.setWifiRange = function() {
            showLoading();
            var params = {};
            params.wifiRangeMode = self.wifiRangeMode();
            service.setWifiRange(params, function(result) {
                if (result.result == "success") {
                    successOverlay();
                } else {
                    errorOverlay();
                }
            });
        };
    }

    /**
     * è·åwifiè¦çèå´ä¿¡æ¯
     * @method getWifiRange
     */
    function getWifiRange() {
        return service.getWifiRange();
    }

    /**
     * è·åwifiä¼ç æ¨¡å¼
     * @method getSleepInfo
     */
    function getSleepMode() {
        return service.getSleepMode();
    }

    /**
     * åå§åsleep mode view model
     * @method init
     */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new SleepModeVM();
		ko.applyBindings(vm, container[0]);
        $('#sleepModeForm').validate({
            submitHandler : function() {
                vm.setSleepMode();
            }
        });

        $('#wifiRangeForm').validate({
            submitHandler : function() {
                vm.setWifiRange();
            }
        });
	}

	return {
		init : init
	};
});<script type="text/x-jquery-tmpl" id="smsMeTmpl">
    <div id="talk-item-${id}" class="talk-item talk-b">
        <div class="layout grid-talk">
            <div class="col-main">
                <div class="info-talk">
                    {{if tag == 3}}
                    <div class="msg_container msg_fail">
                        <s class="arrow"></s>
                        <div class="J_content"><pre>{{html dealContent(content, id)}}</pre></div>
                    </div>
                    {{else}}
                    <div class="msg_container msg">
                        <s class="arrow"></s>
                        <div class="J_content"><pre>{{html dealContent(content, id)}}</pre></div>
                    </div>
                    {{/if}}
                    <div class="time paddingtop10">
                        <div class="smslist-item-time floatright paddingTop4 paddingright10">${time}</div>
                        <div class="hiddenButton">
                            <div class="smslist-item-repeat cursorhand floatright marginRight6 paddingright10" onclick="forwardClickHandler('${id}')">
                                <span class="sms-forward-icon paddingright10"></span>
                            </div>
                            <div class="smslist-item-delete paddingright10 floatright cursorhand  marginRight6" target="${number}" onclick="deleteSingleItemClickHandler('${id}')">
                                <span class="trash-icon cursorhand  paddingright10"></span>
                            </div>
                        </div>
                        {{if tag == 3}}
                        <div class="smslist-item-resend cursorhand floatright marginRight6" target="${target}" onclick="resendClickHandler('${id}')">
                            <span class="sms-resend-icon cursorhand paddingright10 marginbottom5"></span>
                        </div>
                        {{/if}}
                        <div class="floatright marginRight6 paddingTop4 error paddingright10">${errorText}</div>
						{{if targetName}}
                        <div class="floatright marginRight6 paddingTop4 paddingright10">To: ${targetName}</div>
						{{/if}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/x-jquery-tmpl" id="smsOtherTmpl">
<div id="talk-item-${id}" class="talk-item talk-a">
	<div class="layout grid-talkf">
		<div class="col-main">
			<div class="info-talk">
				<div class="msg_container msg">
					<s class="arrow"></s>
					<div class="J_content"><pre>{{html dealContent(content)}}</pre></div>
				</div>
				<div class="time paddingtop10">
					<div class="smslist-item-time floatleft paddingleft10 marginRight6 paddingTop4">${time}</div>
					<div class="hiddenButton">
						<div class="smslist-item-repeat paddingleft10 cursorhand floatleft" onclick="forwardClickHandler('${id}')">
							<span class="sms-forward-icon floatleft paddingleft10"></span>
						</div>
						<div class="smslist-item-delete cursorhand floatleft  marginRight6" target="${number}" onclick="deleteSingleItemClickHandler('${id}')">
							<span class="trash-icon smslist-item-delete cursorhand"></span>
						</div>
					</div>
					<div class="floatleft paddingTop4 error">
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
</script>
<script type="text/x-jquery-tmpl" id="addPhonebookTmpl">
<div class="tagPopup">
	<div id="innerTagPopup" class="popup tag-popup">
		<div class="popup-wrapper">
			<p class="tag-popup-close">
				<a href="javascript:hidePopup();"></a>
			</p>
			<form id="quickSaveContactForm">
				<p><span trans="name"></span><i class='colorRed'>&nbsp;*</i></p><p><input type="text" name="name" id="name" value="" maxlength="22" class="required"/></p>
				<p><span trans="send_numbers"></span><i class='colorRed'>&nbsp;*</i></p><p><input type="text" name="number" id="number" value="${number}" maxlength="40" class="required"/></p>
				<p class="textRight"><input type="submit" class="btn-1 " trans="save"/></p>
			</form>
		</div>
	</div>
</div>
</script>
<div id="smsChatRoom">
	<div id="chosenUser">
		<div id="chosenUserList">
			<select id="chosenUserSelect" multiple class="chzn-select-deselect"></select>

	    </div>
    </div>
    <div id="chosenUser1" class="hide form-title"></div>
	<div id="chatpanel">
		<div class="clear-container">
			<div id="chatlist">
				
			</div>
		</div>
	</div>
	<div id="inputpanel">
		<div class="chatform">
			<div class="chattextinput">
				<textarea id="chat-input" trans="chat_input_placehoder"></textarea>
			</div>
			<div class="chatfun">
				<div id="toolbar" class="ext span8">
					<span><em id="inputcount">(0/765)</em> <em id="inputItemCount"></em></span>
					<span class="error" id="sendSmsErrorLi" data-action="sendimage"></span>
				</div>
				<div class="btn span4 side-right">
                    <span><input id="btn-send" type="button" class="btn-1 " onclick="sendSmsClickHandler()" trans="send"/></span>
					<span><input id="btn-back" type="button" class="btn-1 " onclick="chatCancelClickHandler()" trans="back"/></span>
				</div>
                <div class="clear"></div>
			</div>
		</div>
	</div>
</div>
<script type="text/x-jquery-tmpl" id="smsListTmpl">
	{{each(i, sms) data }}
        {{if hasDraft && groupId != ''}}
        <div class="height115 width100p smslist-item" id="smslist-item-${groupId}">
            <table class="width100p height100p">
                <tbody>
                <tr>
                    <td class="vMiddle width20">
                        <div class="smslist-item-checkbox">
                            <p class="checkbox" id="${id}">
                                <input type="checkbox" target="smslist-checkAll" name="smsid" id="checkbox${id}" value="${id}" groupid="${groupId}" />
                            </p>
                        </div>
                    </td>
                    <td  style="width:680px;">
                        <table>
                            <tr>
                                <td style="width:600px;">
                                    <div class="smslist-item-name  side-left txtBold  cursorhand" onclick="draftSmsItemClickHandler('${groupId}')" title="${draftShowNameTitle}">
                                        <div class="smslist-item-name-draftShowName"><span>${draftShowName}</span></div>
                                        <div class="smslist-item-total-count smslist-item-total-count-style">(${totalCount})</div>
                                    </div>
                                </td>
                                <td style="width:80px;"><div  class="smslist-item-draft-flag floatright paddingright10  side-right colorRed" trans="draft"></div></td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr class="margintop8">
                    <td class="vMiddle width20">&nbsp;</td>
                    <td class="font10px lh20px" onclick="draftSmsItemClickHandler('${groupId}')">
                        <div class="smslist-item-msg cursorhand">
                            <pre class="lh20px">${content}</pre>
                        </div>
                    </td>
                </tr>
                <tr class="margintop10">
                    <td class="vMiddle width20">&nbsp;</td>
                    <td class="height30 clock-time">
                        <div class="margintop10 height30 floatleft marginright5">
                            <span class="clock-icon floatleft marginright5"></span>
                            <span class="clock-time">${latestTime}</span>
                        </div>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
        {{else}}
        <div class="height115 width100p smslist-item" id="smslist-item-${itemId}">
            <table class="width100p height100p">
                <tbody>
                    <tr>
                        <td class="vMiddle width20">
                            <div class="smslist-item-checkbox">
                                <p class="checkbox" id="${id}">
                                    <input type="checkbox" target="smslist-checkAll" name="smsid" id="checkbox${id}" value="${id}" number="${number}" ${checked?"checked=checked":""} />
                                </p>
                            </div>
                        </td>
                        <td>
                            {{if name.length == 0}}
                            <div class="smslist-item-name floatleft txtBold cursorhand" onclick="smsItemClickHandler('${number}')"><span>${number}</span></div>
                            <div style="float:left;" class="smslist-item-total-count floatleft txtBold" onclick="smsItemClickHandler('${number}')">(${totalCount})</div>
                            <div class="floatleft cursorhand paddingtop10" id="listNumber${itemId}" style="line-height: 35px; width:30px;"><span class="sms-add-contact-icon" onclick="openPhoneBook(null, '${number}')"></span></div>
                            <div class="smslist-item-new-count cursorhand floatright ${newCount > 0?'':'hide'}" onclick="smsItemClickHandler('${number}')"><span>${newCount}</span></div>
                            {{else}}
                            <div class="smslist-item-name floatleft txtBold cursorhand" onclick="smsItemClickHandler('${number}')"><span>${name}/${number}</span></div><div class="smslist-item-total-count floatleft txtBold" onclick="smsItemClickHandler('${number}')">(${totalCount})</div><div class="smslist-item-new-count cursorhand floatright ${newCount > 0?'':'hide'}" onclick="smsItemClickHandler('${number}')"><span>${newCount}</span></div>
                            {{/if}}
                            <div class="smslist-item-draft-flag paddingright10 floatright colorRed ${hasDraft?'':'hide'}"><span trans="draft"></span></div>
                        </td>
                    </tr>
                    <tr class="margintop8">
                        <td class="vMiddle width20">&nbsp;</td>
                        <td class="font10px lh20px" onclick="smsItemClickHandler('${number}')">
                            <div class="smslist-item-msg cursorhand">
                                <pre class="lh20px ${newCount > 0?'txtBold':''}">${latestSms}</pre>
                            </div>
                        </td>
                    </tr>
                    <tr class="margintop10">
                        <td class="vMiddle width20">&nbsp;</td>
                        <td class="height30 clock-time">
                            <div class="smslist-item-repeat margintop10 cursorhand floatleft marginright30" style="display:none;">
                                <span class="sms-forward-icon floatleft" onclick="forwardClickHandler(${latestId})"></span>
                            </div>
                            <div class="smslist-item-delete margintop10 height30 cursorhand floatleft marginright30"  style="display:none;">
                                <span class="trash-icon floatleft" onclick="deletePhoneMessageClickHandler('${number}')"></span>
                            </div>
                            <div class="margintop10 height30 floatleft marginright5">
                                <span class="clock-icon floatleft marginright5"></span>
                                <span class="clock-time">${latestTime}</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        {{/if}}
	{{/each}}
</script>
<div id="smslist-main">
    <div class="form-title"><span trans="smslist"></span> <span id="smsCapability"></span></div>
	<form id="smsListForm">
		<div class="smslist-btns">
			<div class="floatleft paddingright15">
				<p id="smslist-checkAll" target="smslist_container" class="checkbox checkboxToggle floatleft marginTop8">
					<input id="checkbox-all" type="checkbox" />
				</p>
			</div>
			<div>
				<input type="button" id="smslist-new-sms" onclick="newMessageClickHandler()" class="btn-1 " trans="new"/>
				<input type="button" id="smslist-delete" onclick="deleteSelectClickHandler()" class="btn-1  disabled" disabled="disabled" trans="delete"/>
				<input style="display: none;" type="button" id="smslist-delete-all" onclick="deleteAllClickHandler()" class="btn-1  disabled marginright10" disabled="disabled" trans="delete_all"/>
				<input type="button" id="smslist-refresh" onclick="refreshClickHandler()" class="btn-1 " trans="refresh"/>
			</div>
		</div>
		<div class="width100p overflow-only-y">
			<div class="jspContainer width100p height100p" id="smslist_container"></div>
		</div>
	</form>
</div>ï»¿
define([ 'underscore', 'jquery', 'knockout', 'config/config', 'service', 'lib/jquery/chosen.jquery' ],
/**
 * Sms list
 * @module smslist
 * @class smslist
 */
function(_, $, ko, config, service, chosen) {
	/**
	 * å½åé¡µ
	 * @attribute {Integer} currentPage
	 */
	var currentPage = 1;
	/**
	 * æ°æ®æ¯å¦å è½½å®æ
	 * @attribute {Array} ready
	 */
	var ready = false,
    /**
     * èå¤©å®¤ä¿¡æ¯æ­£å¨å è½½ä¸­
     * @attribute {Boolean} chatRoomInLoading
     */
        chatRoomInLoading = false;
	/**
	 * å¿«éæ·»å èç³»äººæ¨¡æ¿
	 * @attribute {Object} addPhonebookTmpl
	 */
	var addPhonebookTmpl = null,
    /**
     * ç­æ¶æ¯æ¨¡æ¿
     * @attribute {Object} smsListTmpl
     */
        smsListTmpl = null,
    /**
     * æ¥æ¶ç­ä¿¡æ¨¡æ¿
     * @attribute {Object} smsOtherTmpl
     */
        smsOtherTmpl = null,
    /**
     * åéç­ä¿¡æ¨¡æ¿
     * @attribute {Object} smsMeTmpl
     */
        smsMeTmpl = null,
    /**
     * ç¾¤èèç¨¿
     * @attribute {Array} groupDrafts
     */
        groupDrafts = [],
    /**
     * ç­ä¿¡åè¡¨æ¾ç¤ºç¾¤èèç¨¿
     * @attribute {Array} groupDraftItems
     */
        groupDraftItems = [],
    /**
     * ç­ä¿¡åè¡¨æ¾ç¤ºç¾¤èèç¨¿åå¶èç¨¿ç¾¤èç»è
     * @attribute {Object} groupedDraftsObject
     */
        groupedDraftsObject = {},
    /**
     * ç­ä¿¡å®¹éä¿¡æ¯
     * @attribute {Object} smsCapability
     */
        smsCapability = {},
    /**
     * ç­æ¯æ¯å¦è¿æå­å¨ç©ºé´
     * @attribute {Object} hasCapability
     */
        hasCapability = true;
	/**
	 * è·åå¨é¨ç­æ¶æ¯ï¼å¹¶å°ç­ä¿¡éè¿åè°å½æ°getPhoneBooksï¼ä¸çµè¯æ¬è¿è¡å³è
	 *
	 * @method getSMSMessages
	 * @param {getPhoneBooks} callback åè°ï¼è·åå¨é¨çµè¯æ¬ä¿¡æ¯getPhoneBooks
	 */
	function getSMSMessages(callback) {
		return service.getSMSMessages({
			page : 0,
			smsCount : 500,
			nMessageStoreType : 1,
			tags : 10,
			orderBy : "order by id desc"
		}, function(data) {
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), data.messages.length);
			config.dbMsgs = data.messages;
			config.listMsgs = groupSms(config.dbMsgs);
			callback();
		}, function() {
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), 0);
			config.dbMsgs = [];
			config.listMsgs = [];
			cleanSmsList();
		});
	}

	/**
	 * æ¸æ¥ç­ä¿¡åè¡¨åå®¹
	 * @method cleanSmsList
	 */
	cleanSmsList = function(){
		$("#smslist_container").empty();
	};

	/**
	 * å³èåçç­æ¶æ¯æ ¹æ®çµè¯å·ç è¿è¡åç»
	 *
	 * @method groupSms
	 * @param {Array} messages ç­æ¶æ¯æ°ç»
	 */
	function groupSms(messages) {
		var peoples = {},
            theSortedPeoples = [];
		config.listMsgs = [];
		groupDrafts = [];
		$.each(messages, function(i, e) {
			if(e.tag == '4' && e.groupId != ''){ // ç¾¤èèç¨¿
				groupDrafts.push(e);
				return;
			}
			e.target = e.number;
			if(parseInt(e.id, 10) > config.smsMaxId) {
				config.smsMaxId = e.id;
			}
			var last8 = getLast8Number(e.number);
			if (last8 in peoples) {
				peoples[last8].push(e);
			} else {
				peoples[last8] = [ e ];
                theSortedPeoples.push(e);
			}
		});
        theSortedPeoples = _.sortBy(theSortedPeoples, function(ele){
            return 0 - parseInt(ele.id + "", 10);
        });
        $.each(theSortedPeoples, function(s_i, sp){
            var people = getLast8Number(sp.number);
            var newCount = 0;
            var hasDraft = false;
            for (var i = 0; i < peoples[people].length; i++){
                if(peoples[people][i].isNew){
                    newCount++;
                }
                if(peoples[people][i].tag == '4' && peoples[people][i].groupId == ''){ // åæ¡èç¨¿
                    hasDraft = true;
                }
            }
            config.listMsgs.push({
                id : peoples[people][0].id,
                name : "",
                number : peoples[people][0].number,
                latestId : peoples[people][0].id,
                totalCount : peoples[people].length,
                newCount : newCount,
                latestSms : peoples[people][0].content,
                latestTime : peoples[people][0].time,
                checked : false,
                itemId : getLast8Number(people),
                groupId: peoples[people][0].groupId,
                hasDraft : hasDraft
            });
        });
		return config.listMsgs;
	}

	/**
	 * è·åçµè¯æ¬ä¿¡æ¯ï¼å¹¶ä¸ç­æ¶æ¯å³è
	 * @method getPhoneBooks
	 */
    function getPhoneBooks(callback) {
        service.getPhoneBooks({
            page: 0,
            data_per_page: 2000,
            orderBy: "name",
            isAsc: true
        }, function (books) {
            if ($.isArray(books.pbm_data) && books.pbm_data.length > 0) {
                config.phonebook = books.pbm_data;
            }
            dealPhoneBooks();
            if ($.isFunction(callback)) {
                callback();
            }
        });
    }

	/**
	 * åå¼æ­¥è·åè®¾å¤ä¾§åsimå¡æµå¾ç­ä¿¡æ¯ï¼å¹¶å°å¶åå¹¶
	 * @method dealPhoneBooks
	 */
	function dealPhoneBooks(){
		var select = $("#chosenUserList .chzn-select-deselect");
		select.empty();
		var options = [];
		var tmp = [];
        var pbTmp = [];
		for(var j = 0; j < config.phonebook.length; j++){
			var book = config.phonebook[j];
			if($.inArray(book.pbm_number, pbTmp) == -1){
				options.push(new Option(book.pbm_name + "/" + book.pbm_number , book.pbm_number, false, true));
                if($.inArray(getLast8Number(book.pbm_number), tmp) == -1){
                    tmp.push(getLast8Number(book.pbm_number));
                }
                pbTmp.push(book.pbm_number);
			}
		}
		var groupIds = [];
		for(var k = 0; k < groupDrafts.length; k++){ // å°èç¨¿åå¯¹è±¡Mapå°è£ï¼ä¾èç¨¿ç»ç¹å»åçèç¨¿åè§£
			if($.inArray(groupDrafts[k].groupId, groupIds) == -1){
				groupIds.push(groupDrafts[k].groupId);
				var draft = groupDrafts[k];
				groupedDraftsObject[groupDrafts[k].groupId] = [draft];
			} else {
				var draft = groupDrafts[k];
				groupedDraftsObject[groupDrafts[k].groupId].push(draft);
			}
            var itemId = getLast8Number(groupDrafts[k].number);
            if($.inArray(itemId, tmp) == -1){
                options.push(new Option(groupDrafts[k].number , groupDrafts[k].number));
                tmp.push(itemId);
            }
		}
		for(var g in groupedDraftsObject){ // å¤çåè¡¨æ¾ç¤ºçèç¨¿ä¿¡æ¯
			var drafts = groupedDraftsObject[g];
			var draftItem = drafts[drafts.length - 1];
			draftItem.draftShowName = '';
			draftItem.draftShowNameTitle = '';
			$.each(drafts, function(i, n){
				var showName = getShowNameByNumber(n.number);
				//if(i < 2){
					draftItem.draftShowName += (i == 0 ? '' : ';') + showName;
				//}
				draftItem.draftShowNameTitle += (i == 0 ? '' : ';') + showName;
				/*if(drafts.length == i + 1 && drafts.length != 2){
					draftItem.draftShowName += '...';
				}*/
			});

            var len = 45;
            if(getEncodeType(draftItem.draftShowName).encodeType == "UNICODE"){
                len = 30;
            }
            draftItem.draftShowName = draftItem.draftShowName.length > len ? draftItem.draftShowName.substring(0, len) + "..." : draftItem.draftShowName;
			draftItem.totalCount = drafts.length;
			draftItem.hasDraft = true;
            draftItem.latestTime = draftItem.time;
			groupDraftItems.push(draftItem);
		}
		for(var i = 0; i < config.listMsgs.length; i++){
			for(var j = 0; j < config.phonebook.length; j++){
				var book = config.phonebook[j];
				/*if($.inArray(getLast8Number(book.pbm_number), tmp) == -1){
				 options.push(new Option(book.pbm_name + "/" + book.pbm_number , book.pbm_number, false, true));
				 tmp.push(getLast8Number(book.pbm_number));
				 }*/
				if (config.listMsgs[i].itemId == getLast8Number(book.pbm_number)) {
					config.listMsgs[i].name = book.pbm_name;
					break;
				}
			}
			if($.inArray(config.listMsgs[i].itemId, tmp) == -1){
				options.push(new Option(config.listMsgs[i].number , config.listMsgs[i].number));
				tmp.push(config.listMsgs[i].itemId);
			}
		}

		var opts = "";
		$.each(options, function(i, e){
			opts += "<option value='"+e.value+"'>"+e.text+"</option>";
		});
		select.append(opts);
		select.chosen({max_selected_options: 5, search_contains: true, width: '694px'});
		showSmsListData();
		showMultiDraftListData();
		//changeShownMsgs();
		ready = true;
	}

	function showSmsListData(){
		if(smsListTmpl == null){
			smsListTmpl = $.template("smsListTmpl", $("#smsListTmpl"));
		}
		$.tmpl("smsListTmpl", {data: config.listMsgs}).translate().appendTo("#smslist_container");

		if(config.HAS_PHONEBOOK){
			$(".sms-add-contact-icon").removeClass("hide");
		}else{
			$(".sms-add-contact-icon").addClass("hide");
		}
	}

	function showMultiDraftListData(){
		if(groupDraftItems.length == 0){
			return false;
		}
		if(smsListTmpl == null){
			smsListTmpl = $.template("smsListTmpl", $("#smsListTmpl"));
		}
		$.tmpl("smsListTmpl", {data: groupDraftItems}).translate().prependTo("#smslist_container");
	}

	/**
	 * é¡µé¢åçæ»å¨åï¼æ¹åé¡µé¢æ¾ç¤ºçç­æ¶æ¯
	 *
	 * @method changeShownMsgs
	 */
	function changeShownMsgs() {
		var shownMsgsTmp = [];
		var range = _.range((currentPage - 1) * 5, currentPage * 5);
		$.each(range, function(i, e) {
			if (config.listMsgs[e]) {
				shownMsgsTmp.push(config.listMsgs[e]);
			}
		});
		//shownMsgsTmp = config.listMsgs;
		currentPage++;

		if(smsListTmpl == null){
			smsListTmpl = $.template("smsListTmpl", $("#smsListTmpl"));
		}
		$.tmpl("smsListTmpl", {data: shownMsgsTmp}).translate().appendTo("#smslist_container");

		renderCheckbox();
		if(shownMsgsTmp.length == 0){
			disableBtn($("#smslist-delete-all"));
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), 0);
		}else{
			enableBtn($("#smslist-delete-all"));
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), 1);
		}
		if(currentPage == 2 && window.innerHeight == $("body").height()){
			changeShownMsgs();
		}
		return shownMsgsTmp;
	}

	/**
	 * å°è¢«checkedçæ¡ç®æ·»å å°self.checkedItemä¸­ï¼ç¨äºå¨æ»å¨è¿åcheckbox
	 * @event checkboxClickHandler
	 * @param {Integer} id
	 */
	checkboxClickHandler = function(id) {
		checkDeleteBtnStatus();
	};

	/**
	 * è·åå·²éæ©çæ¡ç®
	 * @method getSelectedItem
	 * @return {Array}
	 */
	getSelectedItem = function(){
		var selected = [];
		var checkedItem = $("#smslist_container input:checkbox:checked");
		checkedItem.each(function(i, e){
			selected.push($(e).val());
		});
		return selected;
	};

	/**
	 * å é¤æé®ç¦ç¨å¯ç¨å¤ç
	 * @method checkDeleteBtnStatus
	 */
	checkDeleteBtnStatus = function(){
		var size = getSelectedItem().length;
		if(size == 0){
			disableBtn($("#smslist-delete"));
		} else {
			enableBtn($("#smslist-delete"));
		}
	};

	/**
	 * å·æ°ç­æ¶æ¯åè¡¨
	 * @event refreshClickHandler
	 */
	refreshClickHandler = function() {
		$("#smslist_container").empty();
		disableBtn($("#smslist-delete"));
        disableCheckbox($("#smslist-checkAll", "#smsListForm"));
		init();
        renderCheckbox();
	};

	/**
	 * å é¤å¨é¨ç­æ¶æ¯
	 * @event deleteAllClickHandler
	 */
	deleteAllClickHandler = function() {
		showConfirm("confirm_data_delete", function() {
            showLoading('deleting');
			service.deleteAllMessages({
				location : "native_inbox"
			}, function(data) {
				cleanSmsList();
                tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), 0);
				successOverlay();
			}, function(error){
				errorOverlay(error.errorText);
			});
		});
	};

	/**
	 * å é¤éä¸­çç­æ¶æ¯
	 * @event deleteSelectClickHandler
	 */
	deleteSelectClickHandler = function(){
		showConfirm("confirm_data_delete", function() {
            showLoading('deleting');
			var items = getIdsBySelectedIds();
			service.deleteMessage({
				ids: items.ids
			}, function(data){
				renderAfterDelete(items);
				disableBtn($("#smslist-delete"));
				$("#checkbox-all").removeAttr("checked");
				renderCheckbox();
				successOverlay();
			}, function(error){
				errorOverlay(error.errorText);
			});
		});

		function renderAfterDelete(items){
			var ids = items.ids;
			var nums = [];
			$.each(config.dbMsgs, function(i, e){
				if($.inArray(e.id, items.normalIds) != -1){
					nums.push(e.number);
				}
			});
			nums = _.uniq(nums);
			$.each(nums, function(i, e){
				$("#smslist-item-" + getLast8Number(e)).hide().remove();
			});
			$.each(items.groups, function(i, e){
				$("#smslist-item-" + e).hide().remove();
			});
			synchSmsList(nums, ids);
		}

		function getIdsBySelectedIds(){
			var nums = [];
			var resultIds = [];
            var normalIds = [];
			var groups = [];
            var selectedItem = getSelectedItem();
			$.each(selectedItem, function(i, e) {
				var checkbox = $("#checkbox" + e);
				if(checkbox.attr("groupid")){
					groups.push(checkbox.attr("groupid"));
				} else {
					nums.push(getLast8Number(checkbox.attr("number")));
				}
			});

			$.each(config.dbMsgs, function(i, e) {
				if ($.inArray(getLast8Number(e.number), nums) != -1 && (typeof e.groupId == "undefined" || _.isEmpty(e.groupId+''))) {
					resultIds.push(e.id);
                    normalIds.push(e.id);
				} else if ($.inArray(e.groupId + '', groups) != -1) { //å é¤èç¨¿ç»
					resultIds.push(e.id);
				}
			});
            resultIds = _.uniq(resultIds);
			return {ids: resultIds, groups: groups, normalIds: normalIds};
		}
	};

	/**
	 * æ°ç­ä¿¡æé®ç¹å»
	 * @event newMessageClickHandler
	 */
	newMessageClickHandler = function(){
		$("#chosenUser1", "#smsChatRoom").addClass("hide");
		$("#chosenUser", "#smsChatRoom").show();

		cleanChatInput();
        checkSmsCapacityAndAlert();
		$("select.chzn-select-deselect").val("").trigger("liszt:updated");
		$("#smslist-main").slideUp(function(){
			$("#smsChatRoom").slideDown(gotoBottom);
			clearChatList();
		});
	};

	/**
	 * è¿åèå¤©å®¤åè¡¨
	 * @event chatCancelClickHandler
	 */
	chatCancelClickHandler = function(){
		if(config.CONTENT_MODIFIED.modified) {
			var confirmMessage = 'sms_to_save_draft';
			var selectedContact = syncSelectAndChosen($("select#chosenUserSelect"), $('.search-choice', '#chosenUserSelect_chzn'));
			var noContactSelected = !selectedContact || selectedContact.length == 0;
			if(noContactSelected){
				confirmMessage = 'sms_no_recipient';
			}
            if(noContactSelected){
                showConfirm(confirmMessage, {ok: function() {
                    if(!noContactSelected){
                        saveDraftAction({
                            content : $("#chat-input", "#smsChatRoom").val(),
                            numbers :  selectedContact,
                            isFromBack : true
                        });
                    }
                    config.resetContentModifyValue();
                    backToSmsListMainPage();
                }, no: function(){
                    if(noContactSelected){
                        return true;
                    }
                    config.resetContentModifyValue();
                    backToSmsListMainPage();
                }});
            } else {
                saveDraftAction({
                    content : $("#chat-input", "#smsChatRoom").val(),
                    numbers :  selectedContact,
                    isFromBack : true
                });
                config.resetContentModifyValue();
                backToSmsListMainPage();
            }
			return false;
		}
		backToSmsListMainPage();
	};

	function backToSmsListMainPage(){
		$("select.chzn-select-deselect").val("").trigger("liszt:updated");
		config.currentChatObject = null;
        $(".smslist-btns", "#smslist-main").removeClass('smsListFloatButs');
		$("#smsChatRoom").slideUp(function(){
			$("#smslist-main").slideDown();
		});
	}

	var sendSmsErrorTimer = null;
	/**
	 * æ·»å åééè¯¯æ¶æ¯
	 * @method addSendSmsError
	 */
	addSendSmsError = function(msg){
		if(sendSmsErrorTimer){
			window.clearTimeout(sendSmsErrorTimer);
			sendSmsErrorTimer = null;
		}
		$("#sendSmsErrorLi").text($.i18n.prop(msg));
		sendSmsErrorTimer = addTimeout(function(){
			$("#sendSmsErrorLi").text("");
		}, 5000);
	};

	/**
	 * åéç­æ¶æ¯
	 * @event sendSmsClickHandler
	 */
	sendSmsClickHandler = function(){
		if(!hasCapability){
			showAlert("sms_capacity_is_full_for_send");
			return;
		}
		var inputVal = $("#chat-input", "#smsChatRoom");
		var msgContent = inputVal.val();
		if(msgContent == $.i18n.prop("chat_input_placehoder")){
			inputVal.val("");
			msgContent = "";
		}
        var nums = syncSelectAndChosen($("select#chosenUserSelect"), $('.search-choice', '#chosenUserSelect_chzn'));
        if($.isArray(nums)){
            nums = $.grep(nums, function(n, i){
                return !_.isEmpty(n);
            });
        }
		if(!nums || nums.length == 0){
			addSendSmsError("sms_contact_required");
			return;
		}
		/*å¯ä»¥åè®¸åç©ºç­ä¿¡
		 if($.trim(msgContent).length == 0){
		 addSendSmsError("sms_content_required");
		 return;
		 }*/
        if(nums.length + smsCapability.nvUsed > smsCapability.nvTotal){
            showAlert({msg: "sms_capacity_will_full_just", params: [smsCapability.nvTotal - smsCapability.nvUsed]});
            return;
        }
		if(nums.length == 1){
			config.currentChatObject = getLast8Number(nums[0]);
			showLoading('sending');
		} else if (nums.length > 1) {
			showLoading("sending", "<button id='sms_cancel_sending' onclick='cancelSending()' class='btn-1 btn-primary'>"
				+ $.i18n.prop("sms_stop_sending")
				+ "</button>");
			config.currentChatObject = null;
		}
		var i = 0;
		var leftNum = nums.length;
		couldSend = true;
        disableBtn($("#btn-send", "#inputpanel"));
		sendSms = function(){
			if(!couldSend){
				hideLoading();
				return;
			}
			var newMsg = {
				id: -1,
				number: nums[i],
				content: msgContent,
				isNew: false
			};

			if(leftNum == 1){
				$("#loading #loading_container").html("");
			}

			leftNum--;
			service.sendSMS({
				number : newMsg.number,
				message : newMsg.content,
				id : -1
			}, function(data){
				var latestMsg = getLatestMessage();
				var latestId = !!latestMsg ? latestMsg.id : parseInt(config.smsMaxId, 10) + 1;
				config.smsMaxId = latestId;
				newMsg.id = config.smsMaxId;
				newMsg.time = latestMsg ? latestMsg.time : transUnixTime($.now());
				newMsg.tag = 2;
				newMsg.hasDraft = false;
				if(nums.length > 1){
					newMsg.targetName = getNameOrNumberByNumber(newMsg.number);
				}
                addSendMessage(newMsg, i+1 != nums.length);
				updateDBMsg(newMsg);
				updateMsgList(newMsg);
                tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
				gotoBottom();
				if(i+1 == nums.length){
					updateChatInputWordLength();
                    enableBtn($("#btn-send", "#inputpanel"));
					hideLoading();
					return;
				}
				i++;
				sendSms();
			}, function(error){
				var latestMsg = getLatestMessage();
				var latestId = !!latestMsg ? latestMsg.id : parseInt(config.smsMaxId, 10) + 1;
				config.smsMaxId = latestId;
				newMsg.id = config.smsMaxId;
				newMsg.time = latestMsg ? latestMsg.time : transUnixTime($.now());
				newMsg.errorText = $.i18n.prop(error.errorText);
				newMsg.tag = 3;
				newMsg.target = newMsg.number;
				newMsg.hasDraft = false;
				if(nums.length > 1){
					newMsg.targetName = getNameOrNumberByNumber(newMsg.number);
				}
				addSendMessage(newMsg, i+1 != nums.length);
				updateDBMsg(newMsg);
				updateMsgList(newMsg);
                tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
				gotoBottom();
				if(i+1 == nums.length){
					updateChatInputWordLength();
                    enableBtn($("#btn-send", "#inputpanel"));
					hideLoading();
					return;
				}
				i++;
				sendSms();
			});
		};
		sendSms();
	};

	var couldSend = true;

	/**
	 * åæ¶å©ä½ç­ä¿¡åéæä½
	 * @method cancelSending
	 */
	cancelSending = function(){
		couldSend = false;
		$("#loading #loading_container").html($.i18n.prop('sms_cancel_sending'));
	};

	/**
	 * è·åææ°çéæ¶æ¯
	 * @method getLatestMessage
	 * @return {Object} new message
	 */
	getLatestMessage = function(){
		var data = service.getSMSMessages({
			page : 0,
			smsCount : 5,
			nMessageStoreType : 1,
			tags : 10,
			orderBy : "order by id desc"
		});
		if(data.messages.length > 0){
			for(var i = 0; i < data.messages.length; i++){
				if(data.messages[i].tag == '2' || data.messages[i].tag == '3'){
					return data.messages[i];
				}
			}
			return null;
		} else {
			return null;
		}
	};

	/**
	 * åéç­ä¿¡åï¼æ´æ°ç­ä¿¡æ°æ®å¯¹è±¡
	 * @method updateDBMsg
	 * @param {Object} msg
	 */
	function updateDBMsg(msg){
		if(config.dbMsgs.length == 0){
			config.dbMsgs = [msg];
		} else {
			for(var j = 0; j < config.dbMsgs.length; j++){
				if(config.dbMsgs[j].id == msg.id){
					config.dbMsgs[j] = msg;
					return;
				} else {
					var newMsg = [msg];
					$.merge(newMsg, config.dbMsgs);
					config.dbMsgs = newMsg;
					return;
				}
			}
		}
	}

	/**
	 * åéç­ä¿¡åï¼æ´æ°ç­ä¿¡åè¡¨
	 * @method updateMsgList
	 * @param {Object} msg
	 * @param {String} number å·ç ä¸ä¸ºç©ºåå é¤å¤çï¼ä¸ºç©ºåå¢å å¤ç
	 */
	function updateMsgList(msg, number, counter){
		if((!msg || !msg.number) && !number){
			return;
		}
		var itemId = '';
		if(msg && typeof msg.groupId != "undefined" && msg.groupId != ''){
			itemId = msg.groupId;
		} else {
			itemId = getLast8Number(number || msg.number);
		}
		var item = $("#smslist-item-" + itemId);
		if(item && item.length > 0){
			var totalCountItem = item.find(".smslist-item-total-count");
			var count = totalCountItem.text();
			count = Number(count.substring(1, count.length - 1));
			if(number){
				if(count == 1 || msg == null){
					item.hide().remove();
					return;
				}else{
					totalCountItem.text("(" + (count - (counter || 1)) + ")");
					item.find(".smslist-item-draft-flag").addClass('hide');
				}
			} else {
				totalCountItem.text("(" + (count + 1) + ")");
				if(msg.tag == '4'){
					item.find(".smslist-item-draft-flag").removeClass('hide');
				}
			}
			item.find(".smslist-item-checkbox p.checkbox").attr("id", msg.id);
			item.find(".smslist-item-checkbox input:checkbox").val(msg.id).attr("id", "checkbox" + msg.id);
			item.find(".smslist-item-msg pre").text(msg.content);//.addClass("txtBold");
			item.find(".smslist-item-repeat span").die().click(function() {
				forwardClickHandler(msg.id);
			});
			item.find("span.clock-time").text(msg.time);
			var tmpItem = item;
			item.hide().remove();
			$("#smslist_container").prepend(tmpItem.show());
		} else {
			if(smsListTmpl == null){
				smsListTmpl = $.template("smsListTmpl", $("#smsListTmpl"));
			}
			msg.checked = false;
			msg.newCount = 0;
			msg.latestId = msg.id;
			msg.latestSms = msg.content;
			msg.latestTime = msg.time;
			if(msg.groupId == '' || typeof msg.groupId == "undefined"){
				msg.totalCount = 1;
			}
			if(!msg.hasDraft){
				msg.hasDraft = false;
			}
			msg.itemId = itemId;
			msg.name = getNameByNumber(msg.number);
			$.tmpl("smsListTmpl", {data: [msg]}).translate().prependTo("#smslist_container");
		}
		if(config.HAS_PHONEBOOK){
			$(".sms-add-contact-icon").removeClass("hide");
		}else{
			$(".sms-add-contact-icon").addClass("hide");
		}
	}

	/**
	 * å¢å åéåå®¹å°èå¤©å®¤
	 * @method addSendMessage
     * @param {Object} sms JSON
     * @param {Boolean} notCleanChatInput æ¯å¦æ¸é¤è¾å¥æ¡åå®¹
	 */
	addSendMessage = function(sms, notCleanChatInput){
		if(smsMeTmpl == null){
			smsMeTmpl = $.template("smsMeTmpl", $("#smsMeTmpl"));
		}
		$.tmpl("smsMeTmpl", sms).appendTo("#chatlist");
        if(!notCleanChatInput){
            cleanChatInput();
        }
		clearMySmsErrorMessage(sms.id);
	};

	/**
	 * æ¸æ¥éè¯¯æ¶æ¯ï¼é¿åç¿»è¯é®é¢
	 * @method clearMySmsErrorMessage
	 * @param {Integer} id ç­ä¿¡ç¼å·
	 */
	clearMySmsErrorMessage = function(id){
		addTimeout(function(){
			$("div.error", "#talk-item-" + id).text("");
		}, 3000);
	};

	/**
	 * å¿«éæ·»å èç³»äººoverlayæ¯å¦æå¼
	 * @attribute {Boolean} isPoped
	 */
	var isPoped = false;

	/**
	 * å³é­å¿«éæ·»å èç³»äººoverlay
	 * @method hidePopup
	 */
	hidePopup = function(){
		$(".tagPopup").remove();
		isPoped = false;
	};

	/**
	 * æ¸ç©ºèå¤©å®¤åå®¹
	 * @method clearChatList
	 */
	clearChatList = function(){
		$("#chatlist").empty();
		updateChatInputWordLength();
	};

	/**
	 * è¿æ»¤ç­æ¶æ¯åå®¹
	 * @method dealContent
	 * @param {String} content ç­æ¶æ¯åå®¹
	 */
	dealContent = function(content){
		if(config.HAS_PHONEBOOK){
			return HTMLEncode(content).replace(/(\d{3,})/g, function(word){
                var r = (new Date().getTime() + '').substring(6) + (getRandomInt(1000) + 1000);
				return "<a id='aNumber" + r + "' href='javascript:openPhoneBook(\"" + r + "\", \"" + word + "\")'>" + word + "</a>";
			});
		}else{
			return HTMLEncode(content);
		}

	};

	/**
	 * æå¼å¿«éæ·»å èç³»äººoverlay
	 * @event openPhoneBook
	 * @param {Integer} id éæºID
	 * @param {Integer} num å¿«éæ·»å çå·ç 
	 */
	openPhoneBook = function(id, num){
		var target = null;
		var outContainer = "";
		var itemsContainer = null;
		var isChatRoom = false;
		if(!id){
			target = $("#listNumber" + getLast8Number(num));
			outContainer = ".smslist-item";
			itemsContainer = $("#smslist_container");
		} else {
			target = $("#aNumber" + id);
			outContainer = ".msg_container";
			itemsContainer = $("#chatlist");
			isChatRoom = true;
		}
		if(isPoped){
			hidePopup();
		}
		isPoped = true;
		$("#tagPopup").remove();

		if(addPhonebookTmpl == null){
			addPhonebookTmpl = $.template("addPhonebookTmpl", $("#addPhonebookTmpl"));
		}
		$.tmpl("addPhonebookTmpl", {number: num}).appendTo(itemsContainer);
		var p = target.position();
		var msgContainer = target.closest(outContainer);
		var msgP = msgContainer.position();
		var _left = 0,
			_top = 0;
		if(isChatRoom){
			var containerWidth = itemsContainer.width();
			var containerHeight = itemsContainer.height();
			var pop = $("#innerTagPopup");
			_left = msgP.left + p.left;
			_top = msgP.top + p.top + 20;
			if(pop.width() + _left > containerWidth){
				_left = containerWidth - pop.width() - 20;
			}
			if(containerHeight > 100 && pop.height() + _top > containerHeight){
				_top = containerHeight - pop.height() - 5;
			}
		} else {
			_left = p.left;
			_top = p.top;
		}
		$("#innerTagPopup").css({top: _top + "px", left: _left + "px"});
		$('#quickSaveContactForm').translate().validate({
			submitHandler:function () {
				quickSaveContact(isChatRoom);
			},
			rules:{
				name:"name_check",
				number:"phonenumber_check"
			}
		});
	};

	/**
	 * å¿«éæ·»å èç³»äºº
	 * @event quickSaveContact
	 */
	quickSaveContact = function(){
		var name = $(".tagPopup #innerTagPopup #name").val();
		var number = $(".tagPopup #innerTagPopup #number").val();
		var newContact = {
			index : -1,
			location : 1,
			name : name,
			mobile_phone_number : number,
			home_phone_number : "",
			office_phone_number : "",
			mail : ""
		};
		var device = service.getDevicePhoneBookCapacity();
		if(device.pcPbmUsedCapacity >= device.pcPbmTotalCapacity){
			showAlert("device_full");
			return false;
		}
		showLoading();
		service.savePhoneBook(newContact, function(data){
			config.phonebook.push({pbm_name: name, pbm_number: number});
			updateItemShowName(name, number);
			hidePopup();
			successOverlay();
		}, function(data){
			errorOverlay();
		});
	};

	function updateItemShowName(name, number){
		var lastNum = getLast8Number(number);
		$("div.smslist-item-name span", "#smslist-item-" + lastNum).text(name + "/" + number);
		$("#listNumber" + lastNum).hide();
	};

	/**
	 * èå¤©å®¤å é¤åæ¡æ¶æ¯
	 * @event deleteSingleItemClickHandler
	 */
	deleteSingleItemClickHandler = function(id, resendCallback){
		if(resendCallback){
			deleteTheSingleItem(id);
		} else {
			showConfirm("confirm_data_delete", function(){
                showLoading('deleting');
				deleteTheSingleItem(id);
			});
		}

		function deleteTheSingleItem(id){
			service.deleteMessage({
				ids: [id]
			}, function(data){
				var target = $(".smslist-item-delete", "#talk-item-" + id).attr("target");
				$("#talk-item-" + id).hide().remove();

				synchSmsList(null, [id]);
				updateMsgList(getPeopleLatestMsg(target), target);
				if(resendCallback){
					resendCallback();
				} else {
					hideLoading();
				}
                tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
			}, function(error){
				if(resendCallback){
					resendCallback();
				} else {
//					errorOverlay(error.errorText);
					hideLoading();
				}
			});
		}
	};

	/**
	 * å é¤èç¨¿
	 * @method deleteDraftSms
	 * @param ids
	 * @param numbers
	 */
	function deleteDraftSms(ids, numbers){
		service.deleteMessage({
			ids: ids
		}, function(data){
			for(var i = 0; i < numbers.length; i++){
				updateMsgList(getPeopleLatestMsg(numbers[i]), numbers[i], ids.length);
			}
            synchSmsList(null, ids);
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
		}, function(error){
			// Do nothing
		});
	}

	/**
	 * å é¤ç¾¤èèç¨¿èç¨¿
	 * @method deleteMultiDraftSms
	 * @param ids
	 */
	function deleteMultiDraftSms(ids, groupId){
		service.deleteMessage({
			ids: ids
		}, function(data){
			synchSmsList(null, ids);
			$("#smslist-item-" + groupId).hide().remove();
            checkSmsCapacityAndAlert();
            tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
		}, function(error){
			// Do nothing
		});
	}

	getCurrentChatObject = function(){
		var nums = $("select.chzn-select-deselect").val();
		if(!nums){
			config.currentChatObject = null;
		} else if(nums.length == 1){
			config.currentChatObject = getLast8Number(nums);
		} else if (nums.length > 1) {
			config.currentChatObject = null;
		}
		return config.currentChatObject;
	};

	/**
	 * è·åå½åèå¤©å¯¹è±¡ææ°çç­æ¶æ¯
	 * @method getPeopleLatestMsg
	 */
	getPeopleLatestMsg = function(number){
		for(var j = 0; j < config.dbMsgs.length; j++){
			if(config.dbMsgs[j].groupId == '' && getLast8Number(config.dbMsgs[j].number) == getLast8Number(number)){
				return config.dbMsgs[j];
			}
		}
		return null;
	};

	/**
	 * éæ°åéï¼å¤å¶æ¶æ¯å°åéæ¡
	 * @event resendClickHandler
	 */
	resendClickHandler = function(id){
		if(!hasCapability){
			showAlert("sms_capacity_is_full_for_send");
			return;
		}
        showLoading('sending');
		$("div.error", "#talk-item-" + id).text($.i18n.prop("sms_resending"));
		var targetNumber = $("div.smslist-item-resend", "#talk-item-" + id).attr("target");
		var content = $("div.J_content", "#talk-item-" + id).text();
		for(var j = 0; j < config.dbMsgs.length; j++){
			if(config.dbMsgs[j].id == id){
				content = config.dbMsgs[j].content;
			}
		}

        disableBtn($("#btn-send", "#inputpanel"));
		var newMsg = {
			id: -1,
			number: targetNumber,
			content: content,
			isNew: false
		};
		service.sendSMS({
			number : newMsg.number,
			message : newMsg.content,
			id : -1
		}, function(data){
			var latestMsg = getLatestMessage();
			var latestId = !!latestMsg ? latestMsg.id : parseInt(config.smsMaxId, 10) + 1;
			config.smsMaxId = latestId;
			newMsg.id = config.smsMaxId;
			newMsg.time = latestMsg.time;
			newMsg.tag = 2;
			newMsg.target = latestMsg.number;
			//if(!getCurrentChatObject()){
			newMsg.targetName = getNameOrNumberByNumber(targetNumber);
			//}
			updateDBMsg(newMsg);
			updateMsgList(newMsg);
			deleteSingleItemClickHandler(id, function(){
				addSendMessage(newMsg, true);
                updateChatInputWordLength();
                enableBtn($("#btn-send", "#inputpanel"));
				hideLoading();
				gotoBottom();
			});
			return;
		}, function(error){
			var latestMsg = getLatestMessage();
			var latestId = !!latestMsg ? latestMsg.id : parseInt(config.smsMaxId, 10) + 1;
			config.smsMaxId = latestId;
			newMsg.id = config.smsMaxId;
			newMsg.time = latestMsg.time;
			newMsg.errorText = $.i18n.prop("sms_resend_fail");
			newMsg.tag = 3;
			newMsg.target = latestMsg.number;
			//if(!getCurrentChatObject()){
			newMsg.targetName = getNameOrNumberByNumber(targetNumber);
			//}
			updateDBMsg(newMsg);
			updateMsgList(newMsg);
			deleteSingleItemClickHandler(id, function(){
				addSendMessage(newMsg, true);
                updateChatInputWordLength();
                enableBtn($("#btn-send", "#inputpanel"));
				hideLoading();
				gotoBottom();
			});
			return;
		});
	};

	/**
	 * æ»å¨å°åºé¨
	 * @method gotoBottom
	 */
	gotoBottom = function(){
		$("#chatpanel .clear-container").animate({scrollTop: $("#chatlist").height()});
	};

	/**
	 * æåä¸æ¡ç­æ¶æ¯è·ç¦»é¡¶é¨çè·ç¦»
	 * @attribute lastItemOffsetTop
	 */
	var lastItemOffsetTop = 0;
	/**
	 * é¡µé¢æ¯å¦å¤äºæ»å¨ä¸­
	 * @attribute scrolling
	 */
	var scrolling = false;
	/**
	 * åå§åé¡µé¢ç¶æä¿¡æ¯
	 * @method initStatus
	 */
	function initStatus(){
		currentPage = 1;
		config.dbMsgs = [];
		config.listMsgs = null;
		config.smsMaxId = 0;
		config.phonebook = [];
		ready = false;
		shownMsgs = [];
		scrolling = false;
		lastItemOffsetTop = 0;
		groupDrafts = groupDraftItems = [];
		groupedDraftsObject = {};
	}

	function getReadyStatus() {
		showLoading('waiting');
        config.currentChatObject = null;
		var getSMSReady = function () {
			service.getSMSReady({}, function (data) {
				if (data.sms_cmd_status_result == "2") {
                    $("input:button", "#smsListForm .smslist-btns").attr("disabled", "disabled");
					hideLoading();
					showAlert("sms_init_fail");
				} else if (data.sms_cmd_status_result == "1") {
					addTimeout(getSMSReady, 1000);
				} else {
					if(config.HAS_PHONEBOOK){
						getPhoneBookReady();
					}else{
						initSMSList(false);
					}
				}
			});
		};

		var getPhoneBookReady = function () {
			service.getPhoneBookReady({}, function (data) {
				if (data.pbm_init_flag == "6") {
					initSMSList(false);
				} else if (data.pbm_init_flag != "0") {
					addTimeout(getPhoneBookReady, 1000);
				}
				else {
					initSMSList(true);
				}
			});
		};

		var initSMSList = function (isPbmInitOK) {
			initStatus();
			if (isPbmInitOK) {
                getSMSMessages(function(){
                    getPhoneBooks(function () {
                        hideLoading()
                    });
                });
			} else {
				getSMSMessages(function () {
					config.phonebook = [];
					if(!config.HAS_PHONEBOOK){
						dealPhoneBooks();
					}
					hideLoading();
				});
			}
			bindingEvents();
			fixScrollTop();
			window.scrollTo(0, 0);
			initSmsCapability();
		};

		getSMSReady();
	}

	/**
	 * åå§åç­ä¿¡å®¹éç¶æ
	 * @method initSmsCapability
	 */
	function initSmsCapability(){
		var capabilityContainer = $("#smsCapability");
		updateSmsCapabilityStatus(capabilityContainer);
		checkSimStatusForSend();
		addInterval(function(){
			updateSmsCapabilityStatus(capabilityContainer);
			checkSimStatusForSend();
		}, 5000);
	}

	/**
	 * SIMå¡æªåå¤å¥½æ¶ï¼ç¦ç¨åéæé®
	 * @method checkSimStatusForSend
	 */
	function checkSimStatusForSend(){
		var data = service.getStatusInfo();
		if(data.simStatus != 'modem_init_complete'){
			disableBtn($("#btn-send"));
			$("#sendSmsErrorLi").html('<span trans="no_sim_card_message">' + $.i18n.prop('no_sim_card_message') + '</span>');
			$("#chatpanel .smslist-item-resend:visible").hide();
		}else{
			enableBtn($("#btn-send"));
			//$("#sendSmsErrorLi").empty();
			$("#chatpanel .smslist-item-resend:hidden").show();
		}
	}

	/**
	 * æ´æ°ç­ä¿¡å®¹éç¶æ
	 * @method updateSmsCapabilityStatus
	 * @param capabilityContainer {Object} æ¾ç½®å®¹éä¿¡æ¯çå®¹å¨
	 */
	function updateSmsCapabilityStatus(capabilityContainer){
		service.getSmsCapability({}, function(capability){
			capabilityContainer.text("(" + (capability.nvUsed > capability.nvTotal ? capability.nvTotal : capability.nvUsed) + "/" + capability.nvTotal + ")");
			hasCapability = capability.nvUsed < capability.nvTotal;
            smsCapability = capability;
		});
	}

	/**
	 * åå§åé¡µé¢åVM
	 * @method init
	 */
	function init() {
		getReadyStatus();
	}

	/**
	 * äºä»¶ç»å®
	 * @method bindingEvents
	 */
	bindingEvents = function(){
		var $win = $(window);
		var $smsListBtns = $("#smslist-main .smslist-btns");
		var offsetTop = $("#mainContainer").offset().top;
		$win.unbind("scroll").scroll(function() {
			if($win.scrollTop() > offsetTop){
				$smsListBtns.addClass("smsListFloatButs marginnone");
			} else {
				$smsListBtns.removeClass("smsListFloatButs marginnone");
			}
			//loadData(); //ç±äºç®åæ°æ®æ¾ç¤ºæ¯å¨æ¾ç¤ºï¼ä¸åå¨æå è½½ï¼å æ­¤ææ¶æ³¨éæ
		});

		$("#smslist_container p.checkbox").die().live("click", function(){
			checkboxClickHandler($(this).attr("id"));
		});

		$("#smslist-checkAll", "#smsListForm").die().live("click", function(){
			checkDeleteBtnStatus();
		});

		$("#chat-input", "#smsChatRoom").die().live("drop", function(){
            $("#inputpanel .chatform").addClass("chatformfocus");
            var $this = $(this);
            $this.removeAttr("trans");
            if($this.val() == $.i18n.prop("chat_input_placehoder")){
                $this.val("");
            }
            updateChatInputWordLength();
        }).live("focusin", function(){
                $("#inputpanel .chatform").addClass("chatformfocus");
                var $this = $(this);
                $this.removeAttr("trans");
                if($this.val() == $.i18n.prop("chat_input_placehoder")){
                    $this.val("");
                }
                updateChatInputWordLength();
            }).live("focusout", function(){
				$("#inputpanel .chatform").removeClass("chatformfocus");
				var $this = $(this);
				if($this.val() == "" || $this.val() == $.i18n.prop("chat_input_placehoder")){
					$this.val($.i18n.prop("chat_input_placehoder")).attr("trans", "chat_input_placehoder");
				}
				updateChatInputWordLength();
			}).live("keyup", function(){
                updateChatInputWordLength();
            }).live("paste", function(){
                window.setTimeout(function () {
                    updateChatInputWordLength();
                }, 0);
            }).live("cut", function(){
                window.setTimeout(function () {
                    updateChatInputWordLength();
                }, 0);
            }).live("drop", function(){
                window.setTimeout(function () {
                    updateChatInputWordLength();
                }, 0);
            });

		$("select.chzn-select-deselect", "#smsChatRoom").die().live('change', function(){
			draftListener();
		})
	};

	/**
	 * è·åèå¤©å¯¹è±¡çåå­åå·ç 
	 * @method getShowNameByNumber
	 * @param {String} num çµè¯å·ç 
	 */
	getShowNameByNumber = function(num){
		for(var i = 0 ; i < config.phonebook.length; i++){
			if(getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(num)){
				return config.phonebook[i].pbm_name + "/" + num;
			}
		}
		return num;
	};

	/**
	 * è·åèå¤©å¯¹è±¡çåå­
	 * @method getNameByNumber
	 * @param {String} num çµè¯å·ç 
	 */
	getNameByNumber = function(num){
		for(var i = 0 ; i < config.phonebook.length; i++){
			if(getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(num)){
				return config.phonebook[i].pbm_name;
			}
		}
		return "";
	};

	/**
	 * è·åèå¤©å¯¹è±¡çåå­,å¦ææ²¡æåå­ï¼åæ¾ç¤ºå·ç 
	 * @method getNameOrNumberByNumber
	 * @param {String} num çµè¯å·ç 
	 */
	getNameOrNumberByNumber = function(num){
        for(var i = 0 ; i < config.phonebook.length; i++){
            if(config.phonebook[i].pbm_number == num){
                return config.phonebook[i].pbm_name;
            }
        }
        for(var i = 0 ; i < config.phonebook.length; i++){
            if(getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(num)){
                return config.phonebook[i].pbm_name;
            }
        }
		return num;
	};

	/**
	 * ç¹å»ç­ä¿¡åè¡¨æ¡ç®ï¼è¿å¥èå¤©å®¤é¡µé¢
	 * @event smsItemClickHandler
	 * @param {Integer} num çµè¯å·ç 
	 */
	smsItemClickHandler = function(num){
        if(chatRoomInLoading){
            return false;
        }
        chatRoomInLoading = true;
		if(smsOtherTmpl == null){
			smsOtherTmpl = $.template("smsOtherTmpl", $("#smsOtherTmpl"));
		}
		if(smsMeTmpl == null){
			smsMeTmpl = $.template("smsMeTmpl", $("#smsMeTmpl"));
		}

		var name = getShowNameByNumber(num);
        $("#chosenUser", "#smsChatRoom").hide();
        $("#chosenUser1", "#smsChatRoom").addClass("hide");

		config.currentChatObject = getLast8Number(num);
		setAsRead(num);
		cleanChatInput();
		clearChatList();
        var userSelect = $("select.chzn-select-deselect", "#smsChatRoom");
		var ops = $("option", userSelect);
        var numberExist = false;
		for(var i = 0 ; i < ops.length; i++){
			var n = ops[i];
            if(getLast8Number(n.value) == config.currentChatObject){
				num = n.value;
                numberExist = true;
				break;
			}
		}
        if(!numberExist){
            userSelect.append("<option value='" + num + "' selected='selected'>" + num + "</option>");
        }
        checkSmsCapacityAndAlert();
		$("select.chzn-select-deselect").val(num).trigger("liszt:updated");
		$("#smslist-main").slideUp(function(){
			$("#smsChatRoom").slideDown(function(){
				config.dbMsgs = _.sortBy(config.dbMsgs, function(e){
					return 0 - e.id;
				});
				var draftIds = [];
                var dbMsgsTmp = [];
                var dbMsgsTmpIds = [];
                var chatHasDraft = false;
				for(var i = config.dbMsgs.length - 1; i >= 0; i--){
                    var e = config.dbMsgs[i];
                    if(_.indexOf(dbMsgsTmpIds, e.id) != -1){
                        continue;
                    }
					if(getLast8Number(e.number) == config.currentChatObject && _.isEmpty(e.groupId)){
						e.isNew = false;
						e.errorText = '';
						e.targetName = '';
						if(e.tag == "0" || e.tag == "1"){
							$.tmpl("smsOtherTmpl", e).appendTo("#chatlist");
                            dbMsgsTmpIds.push(e.id);
                            dbMsgsTmp.push(e);
						}else if(e.tag == "2" || e.tag == "3"){
							$.tmpl("smsMeTmpl", e).appendTo("#chatlist");
                            dbMsgsTmpIds.push(e.id);
                            dbMsgsTmp.push(e);
						}else if(e.tag == "4"){
							draftIds.push(e.id);
							$("#chat-input", "#smsChatRoom").val(e.content);
                            updateChatInputWordLength();
                            draftListener();
                            chatHasDraft = true;
						}
					} else {
                        dbMsgsTmpIds.push(e.id);
                        dbMsgsTmp.push(e);
                    }
				}
                if(chatHasDraft){
                    $("#chosenUser", "#smsChatRoom").show();
                    $("#chosenUser1", "#smsChatRoom").addClass("hide");
                } else {
                    $("#chosenUser", "#smsChatRoom").hide();
                    $("#chosenUser1", "#smsChatRoom").removeClass("hide").html(name);
                }
                config.dbMsgs = dbMsgsTmp.reverse();
				if(draftIds.length > 0){
					deleteDraftSms(draftIds, [num]);
				}
				checkSimStatusForSend();
				gotoBottom();
                chatRoomInLoading = false;
			});
		});
	};

    function checkSmsCapacityAndAlert(){
        var capabilityContainer = $("#smsCapability");
        updateSmsCapabilityStatus(capabilityContainer);
        setTimeout(function(){
            if(!hasCapability){
                showAlert("sms_capacity_is_full_for_send");
            }
        }, 2000);
    }

	cleanChatInput = function(){
		$("#chat-input", "#smsChatRoom").val($.i18n.prop("chat_input_placehoder")).attr("trans", "chat_input_placehoder");
	};

	/**
	 * è®¾ç½®ä¸ºå·²è¯»
	 * @event setAsRead
	 * @param {Integer} num çµè¯å·ç 
	 */
	setAsRead = function(num){
		var ids = [];
		$.each(config.dbMsgs, function(i, e) {
			if (getLast8Number(e.number) == getLast8Number(num) && e.isNew) {
				ids.push(e.id);
				e.isNew = false;
			}
		});
		if(ids.length > 0){
			service.setSmsRead({ids: ids}, function(data){
				if(data.result){
					$("#smslist-item-" + getLast8Number(num) +" .smslist-item-new-count").text("").addClass("hide");
					$("#smslist-item-" + getLast8Number(num) +" .smslist-item-msg pre").removeClass("txtBold");
				}
				$.each(config.listMsgs, function(i, e) {
					if (e.number == num && e.newCount > 0) {
						e.newCount = 0;
					}
				});
			});
		}
	};

	/**
	 * è½¬åæé®ç¹å»äºä»¶
	 * @event forwardClickHandler
	 * @param {String} id SMSç­ä¿¡ID
	 */
	forwardClickHandler = function(id){
		clearChatList();

		$("#chosenUser1", "#smsChatRoom").addClass("hide");
		$("#chosenUser", "#smsChatRoom").show();

		for(var j = 0; j < config.dbMsgs.length; j++){
			if(config.dbMsgs[j].id == id){
				$("#chat-input", "#smsChatRoom").val(config.dbMsgs[j].content);
			}
		}
		$("select.chzn-select-deselect").val("").trigger("liszt:updated");
		updateChatInputWordLength();
		$("#smslist-main").slideUp(function(){
			$("#smsChatRoom").slideDown(gotoBottom);
		});
	};

	/**
	 * æ´æ°å©ä½å­æ°
	 * @method updateChatInputWordLength
	 */
	updateChatInputWordLength = function(){
        var msgInput = $("#chat-input", "#smsChatRoom");
        var msgInputDom = msgInput[0];
        var strValue = msgInput.val();
        var encodeType = getEncodeType(strValue);
        var maxLength = encodeType.encodeType == 'UNICODE' ? 335 : 765;
        if (strValue.length + encodeType.extendLen > maxLength) {
            var scrollTop = msgInputDom.scrollTop;
            var insertPos = getInsertPos(msgInputDom);
            var moreLen = strValue.length + encodeType.extendLen - maxLength;
            var insertPart = strValue.substr(insertPos - moreLen > 0 ? insertPos - moreLen : 0, moreLen);
            var reversed = insertPart.split('').reverse();
            var checkMore = 0;
            var cutNum = 0;
            for (var i = 0; i < reversed.length; i++) {
                if (getEncodeType(reversed[i]).extendLen > 0) {
                    checkMore += 2;
                } else {
                    checkMore++;
                }
                if (checkMore >= moreLen) {
                    cutNum = i + 1;
                    break;
                }
            }
            var iInsertToStartLength = insertPos - cutNum;
            msgInputDom.value = strValue.substr(0, iInsertToStartLength) + strValue.substr(insertPos);
            setInsertPos(msgInputDom, iInsertToStartLength);
            msgInputDom.scrollTop = scrollTop;
        }
        var textLength = 0;
        var newValue = $(msgInputDom).val();
        var newEncodeType = getEncodeType(newValue);
        var newMaxLength = newEncodeType.encodeType == 'UNICODE' ? 335 : 765;
        var $inputCount = $("#inputcount", "#inputpanel");
        var $inputItemCount = $("#inputItemCount", "#inputpanel");
        if (newValue.length + newEncodeType.extendLen >= newMaxLength) {
            $inputCount.addClass("colorRed");
            $inputItemCount.addClass("colorRed");
        } else {
            $("#inputcount", "#inputpanel").removeClass("colorRed");
            $("#inputItemCount", "#inputpanel").removeClass("colorRed");
        }
        if("" != newValue && $.i18n.prop('chat_input_placehoder') != newValue){
            textLength = newValue.length + newEncodeType.extendLen;
        }
        $inputCount.html("(" + textLength + "/" + newMaxLength + ")");
        $inputItemCount.html("(" + getSmsCount(newValue) + "/5)");
        draftListener();
	};

	/**
	 * ææ¡£åå®¹çå¬ï¼å¤æ­æ¯å¦ä¿®æ¹è¿
     * @method draftListener
	 */
	function draftListener(){
		var content = $("#chat-input", "#smsChatRoom").val();
		if(hasCapability){
            //var selectedContact = $("select.chzn-select-deselect").val();
            var selectedContact = getSelectValFromChosen($('.search-choice', '#chosenUserSelect_chzn'));
			var noContactSelected = !selectedContact || selectedContact.length == 0;
			var hasContent = typeof content != "undefined" && content != '' && content != $.i18n.prop('chat_input_placehoder');

			if(!hasContent){
				config.resetContentModifyValue();
				return;
			}
			if(hasContent && !noContactSelected){
				config.CONTENT_MODIFIED.modified = true;
				config.CONTENT_MODIFIED.message = 'sms_to_save_draft';
				config.CONTENT_MODIFIED.callback.ok = saveDraftAction;
				config.CONTENT_MODIFIED.callback.no = $.noop;
				config.CONTENT_MODIFIED.data = {
					content : $("#chat-input", "#smsChatRoom").val(),
					numbers :  selectedContact
				};
				return;
			}
			if(hasContent && noContactSelected){
				config.CONTENT_MODIFIED.modified = true;
				config.CONTENT_MODIFIED.message = 'sms_no_recipient';
				config.CONTENT_MODIFIED.callback.ok = $.noop;
				config.CONTENT_MODIFIED.callback.no = function(){
					// è¿åtrueï¼é¡µé¢ä¿æåç¶
					return true;
				};//$.noop;
				return;
			}
		} else {
			config.resetContentModifyValue();
		}
	}

	/**
	 * ä¿å­èç¨¿åè°å¨ä½
	 * @method saveDraftAction
	 * @param data
	 */
	function saveDraftAction(data){
		var datetime = new Date();
		var params = {
			index: -1,
			currentTimeString: getCurrentTimeString(datetime),
			groupId: data.numbers.length > 1 ? datetime.getTime() : '',
			message: data.content,
			numbers: data.numbers
		};
		service.saveSMS(params, function(){
			if(data.isFromBack){
				getLatestDraftSms();
			} else {
				successOverlay('sms_save_draft_success');
			}
		}, function(){
			errorOverlay("sms_save_draft_failed")
		});

		/**
		 * è·åææ°çèç¨¿ä¿¡æ¯
		 * @method getLatestDraftSms
		 */
		function getLatestDraftSms(){
			service.getSMSMessages({
				page : 0,
				smsCount : 5,
				nMessageStoreType : 1,
				tags : 4,
				orderBy : "order by id desc"
			}, function(data) {
				if(data.messages && data.messages.length > 0){
					var theGroupId = '',
						draftShowName = '',
						draftShowNameTitle = '',
						i = 0,
						drafts = [];
					for(; i < data.messages.length; i++){
						var msg = data.messages[i];
						if(theGroupId != '' && theGroupId != msg.groupId){
							break;
						}
						updateDBMsg(msg);
						if(msg.groupId == ''){ // åæ¡èç¨¿
							break;
						} else { // å¤æ¡èç¨¿
							theGroupId = msg.groupId;
							var showName = getShowNameByNumber(msg.number);
							//if(i < 2){
								draftShowName += (i == 0 ? '' : ';') + showName;
							/*}
							if(i == 2){
								draftShowName += '...';
							}*/
							draftShowNameTitle += (i == 0 ? '' : ';') + showName;
						}
						drafts.push(msg);
					}
					if(theGroupId == ''){ // åæ¡èç¨¿
						var msg = data.messages[0];
						msg.hasDraft = true;
						updateMsgList(msg);
					} else { // å¤æ¡èç¨¿
						var msg = data.messages[0];
                        var len = 45;
                        if(getEncodeType(draftShowName).encodeType == "UNICODE"){
                            len = 30;
                        }
						msg.draftShowNameTitle = draftShowNameTitle;
                        msg.draftShowName = draftShowName.length > len ? draftShowName.substring(0, len) + "..." : draftShowName;
						msg.hasDraft = true;
						msg.totalCount = i;
						groupedDraftsObject[theGroupId] = drafts;
						updateMsgList(msg);
					}
                    tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
					successOverlay('sms_save_draft_success');
				}
			}, function() {
				// do nothing
			});
		}
	}

	/**
	 * ç¹å»ç¾¤èèç¨¿è¿å¥èç¨¿åéé¡µé¢
	 * å¨è¿å¥çè¿ç¨ä¸­ä¼åå æèç¨¿
	 * @method draftSmsItemClickHandler
	 * @param groupId
	 */
	draftSmsItemClickHandler = function(groupId){
        if(chatRoomInLoading){
            return false;
        }
        chatRoomInLoading = true;
		var msgs = groupedDraftsObject[groupId];
		var numbers = [];
		var ids = [];
		for(var i = 0; msgs && i < msgs.length; i++){
			numbers.push(msgs[i].number);
			ids.push(msgs[i].id + '');
		}
		$("#chosenUser", "#smsChatRoom").show();
		$("#chosenUser1", "#smsChatRoom").addClass("hide").html('');
		$("select.chzn-select-deselect").val(numbers).trigger("liszt:updated");
		$("#chat-input", "#smsChatRoom").val(msgs[0].content);
        updateChatInputWordLength();
        clearChatList();
		$("#smslist-main").slideUp(function(){
			$("#smsChatRoom").slideDown(function(){
				draftListener();
				gotoBottom();
                chatRoomInLoading = false;
			});
		});
		deleteMultiDraftSms(ids, groupId);
	};

	/**
	 * æåè¡¨æ¡ç®å é¤ç­æ¶æ¯
	 * @event deletePhoneMessageClickHandler
	 */
	deletePhoneMessageClickHandler = function(num){
		showConfirm("confirm_data_delete", function() {
            showLoading('deleting');
			var ids = [];
			$.each(config.dbMsgs, function(i, e){
				if(e.number == num){
					ids.push(e.id);
				}
			});
			service.deleteMessage({
				ids: ids
			}, function(data){
				$("#smslist-item-" + getLast8Number(num)).hide().remove();
				synchSmsList([num], ids);
				successOverlay();
                tryToDisableCheckAll($("#smslist-checkAll", "#smsListForm"), $(".smslist-item", "#smslist_container").length);
			}, function(error){
				errorOverlay(error.errorText);
			});
		});
	};

	/**
	 * åæ­¥ç­ä¿¡åè¡¨æ°æ®
	 * @method synchSmsList
	 * @param {Array} nums
	 * @param {Array} ids
	 */
	synchSmsList = function(nums, ids){
		if(nums && nums.length > 0){
			config.listMsgs = $.grep(config.listMsgs, function(n, i){
				return $.inArray(n.number, nums) == -1;
			});
		}
		if(ids && ids.length > 0){
			var dbMsgsTmp = [];
			$.each(config.dbMsgs, function(i, e){
				if($.inArray(e.id, ids) == -1){
					dbMsgsTmp.push(e);
				}
			});
			config.dbMsgs = dbMsgsTmp;
		}
	};

	/**
	 * ç¡®å®æåä¸æ¡ç­æ¶æ¯è·ç¦»é¡¶é¨çè·ç¦»
	 * @method fixScrollTop
	 */
	function fixScrollTop() {
		var items = $(".smslist-item");
		var lastOne;
		if (items.length > 0) {
			lastOne = items[items.length - 1];
		} else {
			lastOne = items[0];
		}
		lastItemOffsetTop = lastOne ? lastOne.offsetTop : 600;
	}

	/**
	 * å è½½æ°æ®
	 * @method loadData
	 */
	function loadData() {
		if (ready && !scrolling && lastItemOffsetTop < ($(window).scrollTop() + $(window).height())
			&& $(".smslist-item").length != config.listMsgs.length) {
			scrolling = true;
			addTimeout(function() {
				removeChecked("smslist-checkAll");
				changeShownMsgs();
				//é¡µé¢æ²¡æå è½½i18nä¿¡æ¯ï¼å æ­¤ä¸éè¦ç¿»è¯
				//$(".smslist-item").translate();
				fixScrollTop();
				scrolling = false;
			}, 100);
		}
	}

	return {
		init : init
	};
});
ï»¿/**
 * statusBar æ¨¡å
 * @module statusBar
 * @class statusBar
 */
define([ 'knockout', 'jquery', 'underscore', 'service', 'config/config', 'config/menu', 'tooltip'], function (ko, $, _, service, config, menu, tooltip) {
    var trafficAlertPopuped = false;
    var trafficAlert100Popuped = false;
    var resetTrafficAlertPopuped = false;
    var msgPopStack = {};
    var _smsInitComplete = false;
	var _hasCheckedSmsCapacity = false;
    var _smsNewMessageInDealing = false;
    var _otaUpdateCancelFlag = null;
    var _checkTimes = 0;

    /**
     * åå§åViewModel
     * @method init
     */
    function init() {
        setTimeout(function () {
            var vm = new statusViewModel();
            ko.applyBindings(vm, $('#statusBar')[0]);
            setInterval(function () {
                var info = getStatusInfo();
//                vm.OTAStatus(info.new_version_state);
                vm.networkType(getNetworkType(info.networkType));
                vm.signalCssClass(getSignalCssClass(info.signalImg, info.networkType, info.simStatus));
                var roamStatus=info.roamingStatus?true:false;
                vm.networkOperator(getNetWorkProvider(info.spn_b1_flag,info.spn_name_data,info.spn_b2_flag,info.networkOperator,roamStatus));
                vm.spn(getSPN(info.spn_b1_flag,info.spn_name_data,info.spn_b2_flag,roamStatus,info.networkType));
                vm.roamingStatus(info.roamingStatus ? "R" : "");
                vm.wifiStatusImg(getWifiStatusImg(info.wifiStatus, info.attachedDevices.length));
                vm.simStatus(convertSimStatus(info.simStatus));
                vm.batteryPers(convertBatteryPers(info.batteryPers, info.batteryStatus));
                vm.pinStatus(info.pinStatus);
                vm.batteryStatus(info.batteryStatus);
                vm.attachedDevices(info.attachedDevices);
                vm.showAttachedDevices(info.wifiStatus);
                vm.isLoggedIn(info.isLoggedIn);
                if(config.HAS_SMS && _smsInitComplete && !simStatusInvalid(info.simStatus)){
                    if(!_hasCheckedSmsCapacity && info.isLoggedIn){
                        checkSmsCapacity(info.smsUnreadCount);
                    } else {
                        vm.smsUnreadCount(info.smsUnreadCount);
                    }
                }
                getConnectionCssClass(vm, info.connectStatus, info.data_counter, info.connectWifiSSID, info.connectWifiStatus);
                refreshConnectStatus(vm, info.connectStatus,info.connectWifiSSID,info.connectWifiStatus);
                updateStatusBarTrans({simStatus: info.simStatus, wifiStatus: info.wifiStatus, deviceSize: info.attachedDevices.length, networkType: info.networkType});
            }, 500);

            if(config.HAS_SMS){
                setInterval(function(){
                    if(vm.isLoggedIn()){
                        checkSmsCapacity();
                    }
                }, 10000);

                checkSmsModelReady();
            }

            setInterval(function() {
                if (vm.isLoggedIn() == true && !($("#progress").is(":visible"))){
                    var data = getStatusInfo();
                    if(data.current_upgrade_state == 'connecting_server' || data.current_upgrade_state == 'upgrading'
                        || data.current_upgrade_state == 'accept' || data.current_upgrade_state == 'connect_server_success' ){
                        if(null == _otaUpdateCancelFlag){
                            if(!data.is_mandatory){
                                $.modal.close();
                            }
                            showOtaStatus();
                        }else if(false == _otaUpdateCancelFlag){
                            _otaUpdateCancelFlag = null;
                        }
                    }
                }
            }, 1000);

           /* var OTAResult = setInterval(function () {
                if (config.UPGRADE_TYPE == "FOTA" || config.UPGRADE_TYPE == "OTA") {
                    var info = service.getStatusInfo();
                    if (info.isLoggedIn) {
                        service.getUpgradeResult({}, function (data) {
                            if (data.upgrade_result == "success") {
                                window.clearInterval(OTAResult);
                                showOtaResult(true);
                            } else if (data.upgrade_result == "fail") {
                                window.clearInterval(OTAResult);
                                showOtaResult(false);
                            }
                        });
                    }
                }
            }, 1000);*/

            if (config.UPGRADE_TYPE == "TWO_PORTION") {
                setInterval(function () {
                    var info = getStatusInfo();
                    if (checkConnectedStatus(info.connectStatus) && info.isLoggedIn) {//åªæå¨èç½ä¸­æç»äºæ°çæ¬æç¤º
                        if (!config.ALREADY_NOTICE) {
                            service.getUpdateInfoWarning({}, function (notice) {
                                if (notice.upgrade_notice_flag == 2) {
                                    config.ALREADY_NOTICE = true;
                                    showAlert("update_notice");
                                }
                            });
                        }
                    }
                }, 60000);
            }

            /*var OTAInterval = setInterval(function () {
             if (!config.ALREADY_OTA_NOTICE && config.HAS_OTA_NEW_VERSION) {
             if (_checkTimes > 3) {
             window.clearInterval(OTAInterval);
             }
             _checkTimes++;
             if (checkConnectedStatus(vm.connectStatus())) {
             window.clearInterval(OTAInterval);
             config.ALREADY_OTA_NOTICE = true;
             var data = getStatusInfo();
             if(!data.is_mandatory){
             if (data.current_upgrade_state == 'upgrade_pack_redownload') {
             showConfirm("ota_interrputed", {ok:function () {
             getUserSelector(1)
             }, no:function () {
             getUserSelector(0)
             }});
             } else {
             service.getNewVersionInfo({}, function (info) {
             showConfirm($.i18n.prop('ota_new_version') + "</br>" + $.i18n.prop('ota_version') + info.version, {ok:function () {
             getUserSelector(1)
             }, no:function () {
             getUserSelector(0)
             }});
             });
             }
             }
             }
             }
             }, 1000);*/

            function checkSmsCapacity(unreadCount){
                service.getSmsCapability({}, function(info){
                    var showSmsConfirm = false;
                    if(info.nvTotal != 0 && info.nvUsed >= info.nvTotal){
                        $("#sms_unread_count").attr("tipTitle", "sms_capacity_is_full");
                        showSmsConfirm = true;
                    } else if(info.nvTotal != 0 && info.nvUsed + 5 >= info.nvTotal) {
                        $("#sms_unread_count").attr("tipTitle", "sms_capacity_will_full");
                        showSmsConfirm = true;
                    } else {
                        $("#sms_unread_count").attr("tipTitle", "sms_unread_count");
                    }
                    vm.showSmsDeleteConfirm(showSmsConfirm);
                    if(typeof unreadCount != "undefined"){
                        vm.smsUnreadCount(unreadCount);
                    }
                    _hasCheckedSmsCapacity = true;
                });
            }
        }, 1200);

        tooltip.init();

        /**
         * æ£æ¥ç­æ¯æ¨¡ååå§åç¶æ
         * @method checkSmsModelReady
         */
        function checkSmsModelReady(){
            //var info = getStatusInfo();
            //if(info.isLoggedIn){
                service.getSMSReady({}, function (data) {
                    if (data.sms_cmd_status_result == "1") {
                        setTimeout(function(){checkSmsModelReady();}, 1000);
                    } else {
                        _smsInitComplete = true;
                    }
                });
            //} else {
            //    setTimeout(function(){checkSmsModelReady();}, 1000);
            //}
        }
        /**
         * æ£æ¥æµè§æéç¶æ
         * @method checkTrafficLimitAlert
         */
        /*checkTrafficLimitAlert = function(vm, info){
            var inShow = $("#confirm-container:visible").length > 0;
            if (!info.isLoggedIn || inShow || (trafficAlertPopuped && trafficAlert100Popuped) || !info.limitVolumeEnable || !checkConnectedStatus(info.connectStatus)) {
                return false;
            }
            if(resetTrafficAlertPopuped){
                setTimeout(function(){
                    resetTrafficAlertPopuped = false;
                }, 2000);
                return false;
            }
            var trafficResult = getTrafficResult(info);
            if(trafficResult.showConfirm){
                var confirmMsg = null;
                if(trafficResult.usedPercent > 100 && !trafficAlert100Popuped){
                    trafficAlertPopuped = trafficAlert100Popuped = true;
                    confirmMsg = {msg: 'traffic_beyond_disconnect_msg'};
                } else if(!trafficAlertPopuped){
                    trafficAlertPopuped = true;
                    trafficAlert100Popuped = false;
                    confirmMsg = {msg: 'traffic_limit_disconnect_msg', params: [trafficResult.limitPercent]};
                }
                if(confirmMsg != null){
                    showConfirm(confirmMsg, function(){
                        showLoading("disconnecting");
                        service.disconnect({}, function(data) {
                            if(data.result){
                                successOverlay();
                            } else {
                                errorOverlay();
                            }
                        });
                    });
                }
            }
        };*/
        /**
         * æ´æ°ç¶æä¸­çtooltip
         * @method updateStatusBarTrans
         * @param {String} status
         */
        function updateStatusBarTrans(status){
            $("#statusItemSimStatus").attr("tipTitle", "sim_status_" + status.simStatus);
            if (status.wifiStatus) {
                if (status.deviceSize == 0) {
                    $("#wifi_status").attr("tipTitle","wifi_status_on");
                } else {
                    $("#wifi_status").attr("tipTitle","wifi_status" + status.deviceSize);
                }
            } else {
                $("#wifi_status").attr("tipTitle","wifi_status_off");
            }
        };
        /**
         * å·æ°èç½ç¶æ
         *
         * @method refreshConnectStatus
         */
        function refreshConnectStatus(vm, status, wifiSSID, wifiStatus) {
            /*
             * if (vm.connectStatus() == status) { return; }
             */
            vm.connectStatus(status);
            if (status == "ppp_connecting") {
                vm.connectStatusTrans("connecting");
                vm.connectStatusText($.i18n.prop("connecting"));
            } else if (checkConnectedStatus(status)) {
                vm.connectStatusTrans("connected");
                vm.connectStatusText($.i18n.prop("connected"));
            } else if (status == "ppp_disconnecting") {
                vm.connectStatusTrans("disconnecting");
                vm.connectStatusText($.i18n.prop("disconnecting"));
            } else if(wifiSSID){
                if(wifiStatus =="connect"){
                    vm.connectStatus("wifi_connect");
                    vm.connectStatusTrans("connected");
                    vm.connectStatusText($.i18n.prop("connected"));
                }else if(wifiStatus =="connecting"){
                    vm.connectStatus("wifi_connecting");
                    vm.connectStatusTrans("connecting");
                    vm.connectStatusText($.i18n.prop("connecting"));
                }else{
                    vm.connectStatus("ppp_disconnected");
                    vm.connectStatusTrans("disconnected");
                    vm.connectStatusText($.i18n.prop("disconnected"));
                }
            }else{
                vm.connectStatusTrans("disconnected");
                vm.connectStatusText($.i18n.prop("disconnected"));
            }
        }
        /**
         * è·åå½åç½ç»ç¶æ
         *
         * @method getNetworkType
         */
        getNetworkType = function(networkType) {
            var networkTypeTmp = networkType.toLowerCase();
            if (networkTypeTmp == '') {
                networkTypeTmp = 'limited_service';
            }
            if (networkTypeTmp == 'limited_service' || networkTypeTmp == 'no_service') {
                $("#statusBar #networkType").attr("trans", "network_type_" + networkTypeTmp);
                return $.i18n.prop("network_type_" + networkTypeTmp);
            } else {
                $("#statusBar #networkType").removeAttr("trans");
                var type_2g = ["GSM", "GPRS", "EDGE"];
                var type_3g = ["UMTS", "WCDMA"];
                var type_h = ["HSUPA", "HSPA", "HSPA+", "DC-HSPA+","HSDPA"];
                if($.inArray(networkTypeTmp.toUpperCase(),type_2g)!=-1){
                    networkType = "2G";
                }else if($.inArray(networkTypeTmp.toUpperCase(),type_3g)!=-1){
                    networkType = "3G";
                }else if($.inArray(networkTypeTmp.toUpperCase(),type_h)!=-1){
                    networkType = "H";
                }
                return networkType;
            }
        };
        
		if(config.HAS_SMS && menu.checkIsMenuExist("sms/smslist")){
			setInterval(function () {
                var info = getStatusInfo();
        		if(window.location.hash == "#login" || simStatusInvalid(info.simStatus)){
        			return;
        		}
        		for(key in msgPopStack){
        			var val = msgPopStack[key];
        			if($.now() - val > 5000){
        				delete(msgPopStack["m" + val]);
        				var node = $("#buttom-bubble .bubbleItem#m" + val);
        				node.fadeOut(1000, function(){
        					$(this).remove();
        				});
        			}
        		}
        		if(info.isLoggedIn){
        			if(info.newSmsReceived && !_smsNewMessageInDealing){
                        _smsNewMessageInDealing = true;
        				service.resetNewSmsReceivedVar();
        				checkNewMessages();
        			}
        			if(info.smsReportReceived){
        				service.resetSmsReportReceivedVar();
        				responseSmsReport();
        			}
        		}
			}, 1000);

			setInterval(function(){
				if(menu.checkIsMenuExist("sms/smslist")){
					var info = getStatusInfo();
					if(info.isLoggedIn && !_smsNewMessageInDealing && !simStatusInvalid(info.simStatus)){
                        _smsNewMessageInDealing = true;
						checkNewMessages();
					}
				}
			}, 20001);
		}
    	
    	function checkNewMessages(){
            var smsCount = 5;
            var tags = 1;
            if(!config.dbMsgs || config.dbMsgs.length == 0){
                smsCount = 500;
                tags = 10;
            }
            service.getSMSMessages({
                page : 0,
                smsCount : smsCount,
                nMessageStoreType : 1,
                tags : tags,
                orderBy : "order by id asc"
            }, function(data){
                if(data && data.messages){
                    filterNewMsg(data.messages);
                }
                _smsNewMessageInDealing = false;
            });
    	}

        if(config.HAS_SMS){
            $("#buttom-bubble .bubbleItem").live("mouseover", function(){
                var $this = $(this);
                delete(msgPopStack[$this.attr("id")]);
            }).live("mouseout", function(){
                    var $this = $(this);
                    var now = $.now();
                    msgPopStack["m" + now] = now;
                    $this.attr("id", "m" + now);
                    $("#buttom-bubble .bubbleItem h3 a.bubbleCloseBtn").data("targetid", "m" + now);
                });

            $("#buttom-bubble .bubbleItem h3 a.bubbleCloseBtn").die().live("click", function(){
                var id = $(this).data("targetid");
                delete(msgPopStack[id]);
                var node = $("#buttom-bubble .bubbleItem#" + id);
                node.fadeOut(1000, function(){
                    $(this).remove();
                });
            });
        }
    }

    /**
     * è·åç½ç»ãSIMãWIFIç­ç¶æ
     * @method getStatusInfo
     */
    var getStatusInfo = function () {
        return service.getStatusInfo();
    };

    /**
     * statusViewModel
     * @class statusViewModel
     */
    function statusViewModel() {
        var self = this;
        var info = getStatusInfo();
//        self.OTAStatus = ko.observable(info.new_version_state);
        self.hasWifi = ko.observable(config.HAS_WIFI);
        self.hasBattery = ko.observable(config.HAS_BATTERY);
        self.networkType = ko.observable(getNetworkType(info.networkType));
        self.signalCssClass = ko.observable(getSignalCssClass(info.signalImg, info.networkType, info.simStatus));
        var roamStatus=info.roamingStatus?true:false;
        self.networkOperator = ko.observable(getNetWorkProvider(info.spn_b1_flag,info.spn_name_data,info.spn_b2_flag,info.networkOperator,roamStatus));
        self.spn = ko.observable(getSPN(info.spn_b1_flag,info.spn_name_data,info.spn_b2_flag,roamStatus,info.networkType));
        self.roamingStatus = ko.observable(info.roamingStatus ? "R" : "");
        self.wifiStatusImg = ko.observable(getWifiStatusImg());
        self.simStatus = ko.observable(convertSimStatus(info.simStatus));
        self.pinStatus = ko.observable(info.pinStatus);
        self.pinStatusText = ko.observable();
        self.batteryStatus = ko.observable(info.batteryStatus);
        self.batteryPers = ko.observable(convertBatteryPers(info.batteryPers, info.batteryStatus));
        self.connectStatus = ko.observable(info.connectStatus);
        self.connectStatusText = ko.observable();
        self.connectStatusTrans = ko.observable();
        self.attachedDevices = ko.observable(info.attachedDevices);
        self.showAttachedDevices = ko.observable(info.wifiStatus);
        self.isLoggedIn = ko.observable(info.isLoggedIn);
        self.showSmsDeleteConfirm = ko.observable(false);
        self.smsUnreadCount = ko.observable(0);
        self.connectionCssClass = ko.observable("");
        getConnectionCssClass(self, info.connectStatus, info.data_counter, info.connectWifiSSID, info.connectWifiStatus);
        self.password = ko.observable("");
    }
    function getSPN(spn_b1_flag,spn_name_data,spn_b2_flag,roamStatus,networkType){
        var network_type = getNetworkType(networkType);
        if(network_type == "Limited Service" || network_type == "No Service"){
            return "";
        }
        else{
            if(spn_name_data==""){
                return "";
            }else{
                spn_name_data=decodeMessage(spn_name_data);

                if(spn_b1_flag=="1" && spn_b2_flag=="1"){
                    if(roamStatus){//æ¼«æ¸¸
                        return "";
                    }else{//ä¸æ¼«æ¸¸
                        return spn_name_data;
                    }
                }else if(spn_b1_flag=="1"){
                    return spn_name_data;
                }else if(spn_b2_flag=="1"){
                    if(roamStatus){//æ¼«æ¸¸
                        return "";
                    }else{//ä¸æ¼«æ¸¸
                        return spn_name_data;
                    }
                }else if(spn_b1_flag=="0" && spn_b2_flag=="0"){
                    return spn_name_data;
                }
                return "";
            }
        }
    }

    function getNetWorkProvider(spn_b1_flag,spn_name_data,spn_b2_flag,network_provider,roamStatus){
        if(spn_name_data==""){
            return network_provider;
        }else{
            if(spn_b1_flag=="1" && spn_b2_flag=="1"){
                return network_provider;
            }else if(spn_b1_flag=="1"){
                return network_provider;
            }else if(spn_b2_flag=="1"){
                if(roamStatus){//æ¼«æ¸¸
                    return network_provider;
                }else{//ä¸æ¼«æ¸¸
                    return "";
                }
            }else if(spn_b1_flag=="0" && spn_b2_flag=="0"){
                if(roamStatus){//æ¼«æ¸¸
                    return network_provider;
                }else{//ä¸æ¼«æ¸¸
                    return "";
                }
            }
            return "";
        }
    }
    var dbMsgIds = [];
    /**
     * è¿æ»¤ææ°ç5æ¡ç­æ¶æ¯ï¼å°æªæ·»å å°ç­ä¿¡åè¡¨ä¸­çå¼¹åºæç¤º
     * @method filterNewMsg
     * @param {Array} msgs
     */
    function filterNewMsg(msgs){
    	if(!config.dbMsgs){
    		config.dbMsgs = [];
    	}
    	if(dbMsgIds.length == 0){
    		$.each(config.dbMsgs, function(i, e){
    			dbMsgIds.push(e.id);
    		});
    	}
    	$.each(msgs, function(j, e){
    		if($.inArray(e.id, dbMsgIds) == -1){//å¢å æ°ç­ä¿¡
    			dbMsgIds.push(e.id);
    			config.dbMsgs.push(e);
    			if(e.tag == '1'){
    				addNewMsg(e, false);
    			}
    		}else{
    			for(var i = 0; i < config.dbMsgs.length; i++){//æ´æ°çº§èç­ä¿¡
    				if(config.dbMsgs[i].id == e.id && config.dbMsgs[i].content != e.content && e.tag == '1'){
    					config.dbMsgs[i].content = e.content;
    					addNewMsg(e, true);
    					break;
    				}
    			}
    		}
    	});
    }
    
    var isFirstLoadNewMsg = true;
    var newMessagePopTmpl = null;
    /**
     * æ·»å æ°ç­æ¶æ¯æç¤ºï¼å¹¶æ´æ°ç¸å³åå®¹
     * @method addNewMsg
     * @param {Object} msg
     */
    function addNewMsg(msg, isUpdate) {
        config.smsMaxId = msg.id;
        var now = $.now();
        msgPopStack["m" + now] = now;
        var name = msg.number;
        if (isFirstLoadNewMsg && config.phonebook && config.phonebook.length == 0) {
            isFirstLoadNewMsg = false;
            if (config.HAS_PHONEBOOK) {
                getPhoneBooks(smsProcess);
            } else {
                config.phonebook = [];
                smsProcess();
            }
        }else{
            smsProcess();
        }
        function smsProcess() {
            for (i in config.phonebook) {
                if (getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(msg.number)) {
                    name = config.phonebook[i].pbm_name;
                    break;
                }
            }
            var newMsg = {
                mark: "m" + now,
                name: name,
                title: $.i18n.prop("sms"),
                titleTrans: "sms",
                tag: msg.tag,
                content: msg.content,
                datetime: msg.time
            };
            if (newMessagePopTmpl == null) {
                newMessagePopTmpl = $.template("newMessagePopTmpl", $("#newMessagePopTmpl"));
            }
            $(".bubbleItem:not(.report)", "#buttom-bubble").remove();
            $.tmpl("newMessagePopTmpl", newMsg).appendTo("#buttom-bubble");
            if (window.location.hash == "#sms" || window.location.hash == "#smslist") {
                var inChating = config.currentChatObject && config.currentChatObject == getLast8Number(msg.number);
                var itemId = getLast8Number(msg.number);
                var item = $("#smslist-item-" + itemId);
                if (item && item.length > 0) {
                    // å·²å­å¨åå®¹ï¼æ´æ°åå®¹è°æ´é¡ºåº
                    for (var i = 0; config.listMsgs && i < config.listMsgs.length; i++) {
                        if (getLast8Number(config.listMsgs[i].number) == getLast8Number(msg.number)) {
                            config.listMsgs[i].id = msg.id;
                            config.listMsgs[i].latestId = msg.id;
                            config.listMsgs[i].latestSms = msg.content;
                            config.listMsgs[i].latestTime = msg.time;
                            if (!isUpdate) {
                                config.listMsgs[i].newCount++;
                                config.listMsgs[i].totalCount++;
                            }
                            break;
                        }
                    }
                    item.find(".smslist-item-checkbox p.checkbox").attr("id", msg.id);
                    item.find(".smslist-item-checkbox input:checkbox").val(msg.id).attr("id", "checkbox" + msg.id);
                    if (!isUpdate) {
                        var count = item.find(".smslist-item-total-count").text();
                        count = Number(count.substring(1, count.length - 1));
                        item.find(".smslist-item-total-count").text("(" + (count + 1) + ")");
                        if (!config.currentChatObject || config.currentChatObject != getLast8Number(msg.number)) {
                            var newNum = item.find(".smslist-item-new-count").removeClass("hide");
                            if (newNum && newNum.text().length > 0) {
                                newNum.text(Number(newNum.text()) + 1);
                            } else {
                                newNum.text(1);
                            }
                        }
                    }
                    var msgContent = item.find(".smslist-item-msg pre").text(msg.content);
                    if (config.currentChatObject && config.currentChatObject == getLast8Number(msg.number)) {
                        msgContent.removeClass("txtBold");
                    } else {
                        msgContent.addClass("txtBold");
                    }
                    item.find(".smslist-item-repeat span").die().click(function () {
                        forwardClickHandler(msg.id);
                    });
                    item.find("span.clock-time").text(msg.time);
                    var tmpItem = item;
                    item.hide().remove();
                    $("#smslist_container").prepend(tmpItem.show());
                } else {
                    // å¦æç­ä¿¡åè¡¨ä¸­ä¸å­å¨ç¸åºçèç³»äººç­æ¯ï¼åºå¨ç­ä¿¡åè¡¨ä¸­æ°å¢æ°æ®
                    var theName = "";
                    if (config.phonebook && config.phonebook.length > 0) {
                        for (i in config.phonebook) {
                            if (getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(msg.number)) {
                                theName = config.phonebook[i].pbm_name;
                                break;
                            }
                        }
                    }
                    var theNewMsg = {
                        id: msg.id,
                        name: theName,
                        number: msg.number,
                        latestId: msg.id,
                        totalCount: 1,
                        newCount: inChating ? 0 : 1,
                        latestSms: msg.content,
                        latestTime: msg.time,
                        checked: false,
                        hasDraft: false,
                        itemId: getLast8Number(msg.number)
                    }
                    if (smsListTmpl == null) {
                        smsListTmpl = $.template("smsListTmpl", $("#smsListTmpl"));
                    }
                    $.tmpl("smsListTmpl", {data: [theNewMsg]}).prependTo("#smslist_container");
                }
                if (config.HAS_PHONEBOOK) {
                    $(".sms-add-contact-icon").removeClass("hide");
                } else {
                    $(".sms-add-contact-icon").addClass("hide");
                }
                if (inChating) {
                    var talkItem = $("#talk-item-" + msg.id, "#chatlist");
                    if (talkItem && talkItem.length > 0) {// æ´æ°çº§èç­ä¿¡åå®¹
                        $(".J_content pre", talkItem).html(dealContent(msg.content));
                        $(".time .smslist-item-time", talkItem).text(msg.time);
                        $(".smslist-item-repeat", talkItem).die().click(
                            function () {
                                forwardClickHandler(msg.id);
                            });
                        $(".smslist-item-delete", talkItem).die().click(
                            function () {
                                deleteSingleItemClickHandler(msg.id);
                            });
                    } else {// å¢å æ°çåå¤åå®¹
                        $("#smsOtherTmpl").tmpl(msg).appendTo("#chatlist");
                        $("#chatpanel .clear-container").animate({
                            scrollTop: $("#chatlist").height()
                        });
                    }
                    service.setSmsRead({ids: [msg.id]}, function () {
                    });
                }
                enableCheckbox($("#smslist-checkAll"));
            }
        }
    }

    /**
     * å¤çç­ä¿¡åéæ¥å
     * @method responseSmsReport
     */
    function responseSmsReport() {
        if (isFirstLoadNewMsg && config.phonebook && config.phonebook.length == 0) {
            isFirstLoadNewMsg = false;
            if (config.HAS_PHONEBOOK) {
                getPhoneBooks(smsReport);
            } else {
                config.phonebook = [];
                smsReport();
            }
        }else{
            smsReport();
        }
        function smsReport() {
            service.getSMSDeliveryReport({
                page: 0,
                smsCount: 10
            }, function (data) {
                var messages = data.messages;
                var nums = [];
                $.each(messages, function (i, msg) {
                    if ($.inArray(msg.number, nums) == -1) {
                        nums.push(msg.number);
                        setTimeout(function () {
                            var now = $.now();
                            msgPopStack["m" + now] = now;
                            msg.name = msg.number;
                            for (i in config.phonebook) {
                                if (getLast8Number(config.phonebook[i].pbm_number) == getLast8Number(msg.number)) {
                                    msg.name = config.phonebook[i].pbm_name;
                                    break;
                                }
                            }
                            var msgContent = $.i18n.prop("sms_delivery_report_" + msg.content);
                            var newMsg = {
                                mark: "m" + now,
                                name: msg.name,
                                title: $.i18n.prop("sms_report"),
                                titleTrans: "sms_report",
                                content: msgContent,
                                datetime: msg.time,
                                report: 'report'
                            };
                            if (newMessagePopTmpl == null) {
                                newMessagePopTmpl = $.template("newMessagePopTmpl", $("#newMessagePopTmpl"));
                            }
                            $(".report", "#buttom-bubble").remove();
                            $.tmpl("newMessagePopTmpl", newMsg).appendTo("#buttom-bubble");
                        }, 100);
                    }
                });
            }, function () {
                //No Deal
            });
        }
    }

    /**
     * è·åçµè¯æ¬ä¿¡æ¯
     * @method getPhoneBooks
     */
    function getPhoneBooks(callback) {
        service.getPhoneBooks({
            page:0,
            data_per_page:2000,
            orderBy:"id",
            isAsc:false
        },function(books){
            dealPhoneBooksResult(books);
            callback();
        });

    }
	/**
	 * åå¼æ­¥è·åè®¾å¤ä¾§åsimå¡æµå¾ç­ä¿¡æ¯ï¼å¹¶å°å¶åå¹¶
	 * @method dealPhoneBooksResult
	 * @param {Array} books çµè¯æ¬
	 */
	function dealPhoneBooksResult(books){
		if($.isArray(books.pbm_data) && books.pbm_data.length > 0){
			config.phonebook = books.pbm_data;
		}
	}

    function simStatusInvalid(simStatus){
        return simStatus == 'modem_sim_undetected' || simStatus == 'modem_undetected' || simStatus == 'modem_sim_destroy' || simStatus == 'modem_waitpin' || simStatus == 'modem_waitpuk' || simStatus == 'modem_imsi_waitnck';
    }
    /**
     * è·åä¿¡å·éçCSSæ ·å¼
     * @method getSignalCssClass
     */
    function getSignalCssClass(siganl, networkType, simStatus) {
        networkType = networkType.toLowerCase();
        simStatus = simStatus ? simStatus.toLowerCase() : '';
        if(networkType == '' || networkType == 'limited_service' || networkType == 'no_service'
            || simStatus == 'modem_sim_undetected' || simStatus == 'modem_undetected' || simStatus == 'modem_sim_destroy'){//} || simStatus == 'modem_waitpin' || simStatus == 'modem_waitpuk'){
            siganl = '_none';
        }
        return "signal signal" + siganl;
    }

    function simStatusInvalid(simStatus){
        return simStatus == 'modem_sim_undetected' || simStatus == 'modem_undetected' || simStatus == 'modem_sim_destroy' || simStatus == 'modem_waitpin' || simStatus == 'modem_waitpuk' || simStatus == 'modem_imsi_waitnck';
    }

    /**
     * è·åèç½ç¶æçCSSæ ·å¼
     * @method getConnectionCssClass
     */
    function getConnectionCssClass(vm, status, data_counter, wifiSSID, wifiStatus) {
        var connectionStatus = "icon_connection ";
        if (status == "ppp_disconnected") {
            if (wifiSSID && wifiStatus == "connect") {
                service.getHotspotList({}, function (data) {
                    var cssName = "icon_connection ";
                    var css = "connecting ";
                    for (var i = 0, len = data.hotspotList.length; i < len; i++) {
                        if (data.hotspotList[i].connectStatus == "1") {
                            css = "wifi_connected";
                            break;
                        }
                    }
                    cssName += css;
                    vm.connectionCssClass(cssName);
                });
                return;
            } else if (wifiSSID && wifiStatus == "connecting") {
                connectionStatus += "connecting";
            } else {
                connectionStatus += "disconnect";
            }
        } else if (status == "ppp_connecting" || status == "wifi_connecting") {
            connectionStatus += "connecting";
        } else {
            if (data_counter.uploadRate != '0' && data_counter.downloadRate != '0') {
                connectionStatus += "connectionBoth";
            } else if (data_counter.uploadRate != '0' && data_counter.downloadRate == '0') {
                connectionStatus += "connectionUp";
            } else if (data_counter.uploadRate == '0' && data_counter.downloadRate != '0') {
                connectionStatus += "connectionDown";
            } else {
                connectionStatus += "connectionNone";
            }
        }
        vm.connectionCssClass(connectionStatus);
    }

    /**
     * æ ¹æ®wifiç¶æè·åwifiçå¾çèµæº
     * @method getWifiStatusImg
     */
    function getWifiStatusImg(status, deviceSize) {
        if (status) {
            if (deviceSize == 0) {
                return "./img/wifi0.png";
            } else {
                return "./img/wifi" + deviceSize + ".png";
            }
        } else {
            return "./img/wifi_off.png";
        }
    }

    /**
     * å°SIMå¡ç¶æè½¬åä¸ºååºçæå­æè¿°
     * @method convertSimStatus
     * @return {String}
     */
    function convertSimStatus(status) {
        //modem_sim_undetected, modem_imsi_waitnck, modem_sim_destroy, modem_init_complete, modem_waitpin, modem_waitpuk
        var result;
        switch (status) {
            case "modem_init_complete":
                result = "./img/sim_detected.png";//$.i18n.prop("sim_status_ready");
                break;
            case "modem_waitpin":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_waitpin");
                break;
            case "modem_waitpuk":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_waitpuk");
                break;
            case "modem_sim_undetected":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_undetected");
                break;
            case "modem_undetected":
                result = "./img/sim_undetected.png";
                break;
            case "modem_imsi_waitnck":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_waitnck");
                break;
            case "modem_sim_destroy":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_destroy");
                break;
            case "modem_destroy":
                result = "./img/sim_undetected.png";//$.i18n.prop("sim_status_destroy");
                break;
            default:
                result = "./img/sim_detected.png";//$.i18n.prop("sim_status_ready");
                break;
        }
        return result;
    }

    /**
     * å°çµéè½¬åä¸ºå¯¹åºå¾ç
     * @method convertBatteryPers
     * @param vm
     * @param status
     */
    function convertBatteryPers(pers, status) {
        var src = null;
        if ("0" == status) {
            if ("1" == pers) {
                src = "img/battery_one.png";
            } else if ("2" == pers) {
                src = "img/battery_two.png";
            } else if ("3" == pers) {
                src = "img/battery_three.png";
            } else if ("4" == pers) {
                src = "img/battery_full.png";
            } else { //"5" == pers || "0" == pers
                src = "img/battery_out.png";
            }
        } else {
            src = "img/battery_charging.gif";
        }
        return src;
    }
    gotoSmsList = function(){
        var href = '#sms';
        if(window.location.hash == '#sms'){
            href = '#smslist';
        }
        if(checkFormContentModify(href)){
            window.location.hash = href;
        }
    };

    /**
     * æ¾ç¤ºOTAåçº§ç»æ
     * @method showOtaResult
     */
    /*function showOtaResult(otaResult) {
        if ((!($("#loading").is(":visible"))) && (!($("#confirm").is(":visible")))) {
            if (otaResult) {
                showInfo("ota_update_success");
            } else {
                showAlert("ota_update_failed");
            }
        }else{
            setTimeout(function(){showOtaResult(otaResult)}, 1000);
        }
    }*/

    /**
     * è·åOTAåçº§è¿åº¦
     * @method convertBatteryPers
     * @param vm
     * @param status
     */
    /*function showOtaStatus() {
        _otaUpdateCancelFlag = true;
        if(!($("#progress").is(":visible")))
        {
            hideLoading();
            showOTAUpgradeStatus();
        }
        var getOTAUpgradeState = function() {
            var data = getStatusInfo();
            var state = data.current_upgrade_state;
            var isMandatory = data.is_mandatory;
                if(_otaUpdateCancelFlag){
                    if(state == 'connecting_server'){
                    }else if(state == 'connect_server_failed') {
                        _otaUpdateCancelFlag = false;
                        window.clearTimeout(timer);
                        hideProgressBar();
                        showAlert('ota_connect_server_failed');
                        return;
                    }else if(state == 'connect_server_success') {
                    }else if(state == 'upgrading') {
                        getDownloadSize();
                    }else if(state == 'download_success') {
                    }else if(state == 'upgrade_pack_check_ok') {
                    }else if(state == 'download_failed') {
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showAlert('ota_download_failed');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'server_unavailable'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showAlert('ota_connect_server_failed');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'network_unavailable'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showAlert('ota_no_network');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'pkg_exceed'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showAlert('ota_pkg_exceed');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'accept'){
                    }else if(state == 'low_battery'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showInfo('ota_low_battery');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'upgrade_pack_error'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        showInfo('ota_md5_error');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == 'upgrade_prepare_install'){
                        hideProgressBar();
                        _otaUpdateCancelFlag = false;
                        service.removeTimerThings('current_upgrade_state',function(){});
                        showInfo('ota_download_success');
                        window.clearTimeout(timer);
                        return;
                    }else if(state == ''||state == 'checking' || state == "fota_idle"){
                    }else if(state == 'upgrade_pack_redownload'){
                    }else{
                        _otaUpdateCancelFlag = false;
                        hideProgressBar();
                        window.clearTimeout(timer);
                        return;
                    }
                    timer = setTimeout(getOTAUpgradeState , 1000);
                }
            }

        if(_otaUpdateCancelFlag){
            timer = setTimeout(getOTAUpgradeState , 100);
        }else{
            window.clearTimeout(timer);
        }
    }

    function getUserSelector(choice)
    {
        var selector = service.getUserChoice();
        if(choice){
            var info = getStatusInfo();
            if(!checkConnectedStatus(info.connectStatus)){
                showAlert("ota_network_disconnected");
                return;
            }else if(info.roamingStatus  && ( info.allowRoamingUpdate != "1")){
                showAlert("ota_roamming");
                return;
            }
            if(selector.if_has_select == 'none'){
                startOTAUpgrade();
            }else if(selector.if_has_select == 'accept'){
                showOtaStatus();
            }else if(selector.if_has_select == 'cancel'){
                showAlert("ota_have_cancel");
            }else if(selector.if_has_select == 'downloading_cancel'){
                showAlert("ota_have_cancel");
            }
        }else{
            if(selector.if_has_select == 'none'){
                cancelOTAUpgrade();
            }else if(selector.if_has_select == 'accept'){
                showOtaStatus();
            }else if(selector.if_has_select == 'cancel'){

            }else if(selector.if_has_select == 'downloading_cancel'){

            }
        }
    }

    function getDownloadSize(){
        service.getPackSizeInfo({}, function (data) {
            var percents;
            if (parseInt(data.pack_total_size) == 0) {
                percents = 0;
            } else {
                percents = parseInt(parseInt(data.download_size) * 100 / parseInt(data.pack_total_size));
            }
            if (percents > 100) {
                percents = 100;
            }
            if (percents > 0) {
                if (percents > 95) {
                    showProgressBar("ota_update", "</br>" + $.i18n.prop("ota_update_warning"));
                }
                setProgressBar(percents);
            }
        });
    }

    function startOTAUpgrade(){
        service.setUpgradeSelectOp({selectOp:'1'},function(result){
            if (result.result == "success"){
                showOtaStatus();
            }});
    }

    function cancelOTAUpgrade(){
        service.setUpgradeSelectOp({selectOp:'0'},function(result){ });
    }

    function showOTAUpgradeStatus() {
        var data = getStatusInfo();
        var isMandatory = data.is_mandatory;
        if (isMandatory) {
            showProgressBar("ota_update", "</br>" + $.i18n.prop("ota_update_warning"));
        } else {
            var cancelHtml = "";
            if (config.UPGRADE_TYPE == "OTA") {
                cancelHtml = "</br></br><button id='btnStopUpgrade' onclick='stopOTAUpgrade();' class='btn-1 btn-primary'>" + $.i18n.prop("cancel") + "</button>";
            }
            showProgressBar("ota_update", "</br>" + $.i18n.prop("ota_update_warning") + cancelHtml );
        }
        setProgressBar(0);
    }

    showOTAAlert = function () {
        var time = config.IS_TEST ? 1500 : 10;
        setTimeout(function () {
            var is_mandatory = service.getStatusInfo().is_mandatory;
            if (is_mandatory) {
                showOtaStatus();
            } else {
                var upgradeState = {};
                upgradeState = service.getCurrentUpgradeState();
                if (upgradeState.current_upgrade_state == 'upgrade_pack_redownload') {
                    showConfirm("ota_interrputed", {ok: function () {
                        getUserSelector(1)
                    }, no: function () {
                        getUserSelector(0)
                    }});
                } else {
                    var info = service.getNewVersionInfo();
                    var version = "";
                    if (info.version) {
                        version = "</br>" + $.i18n.prop('ota_version') + info.version;
                    }
                    showConfirm($.i18n.prop('ota_new_version') + version, {ok: function () {
                        getUserSelector(1)
                    }, no: function () {
                        getUserSelector(0)
                    }});
                }
            }
        }, time);
    };*/



    /**
     * ç»æ­¢OTAåçº§
     * @method setTrafficAlertPopuped
     * @param {Boolean} val
     */
    /*stopOTAUpgrade = function () {
        service.setUpgradeSelectOp({selectOp:'2'},function(result){ });
        _otaUpdateCancelFlag = false;
        window.clearTimeout(timer);
        hideLoading();
        showAlert('ota_cancel');
    }*/
    /**
     * è®¾ç½®æµéæéæ¯å¦æéè¿
     * @method setTrafficAlertPopuped
     * @param {Boolean} val
     */
    function setTrafficAlertPopuped(val){
        trafficAlertPopuped = !!val;
        trafficAlert100Popuped = !!val;
        if(!val){
            resetTrafficAlertPopuped = true;
        }
    }

    function setTrafficAlert100Popuped(val){
        trafficAlert100Popuped = !!val;
        if(!val){
            resetTrafficAlertPopuped = true;
        }
    }
    /**
     * è®¡ç®æµéç»æ
     * @method getTrafficResult
     * @param {Object} info service.getStatusInfo()
     */
    function getTrafficResult(info){
        var trafficResult = {
            showConfirm : false,
            limitPercent : info.limitVolumePercent
        };
        if(info.limitVolumeType == '1'){
            var monthlyTraffic = parseInt(info.data_counter.monthlySent, 10) + parseInt(info.data_counter.monthlyReceived, 10);
            trafficResult.usedPercent = monthlyTraffic / info.limitVolumeSize * 100;
            if(trafficResult.usedPercent > trafficResult.limitPercent){
                trafficResult.showConfirm = true;
                trafficResult.type = 'data';
            }
        }else{
            trafficResult.usedPercent = info.data_counter.monthlyConnectedTime / info.limitVolumeSize * 100;
            if(trafficResult.usedPercent > trafficResult.limitPercent){
                trafficResult.showConfirm = true;
                trafficResult.type = 'time';
            }
        }
        return trafficResult;
    }
    
    return {
        init:init,
        setTrafficAlertPopuped: setTrafficAlertPopuped,
        setTrafficAlert100Popuped: setTrafficAlert100Popuped,
        getTrafficResult: getTrafficResult
        //showOTAAlert:showOTAAlert
    };
});<form id="sysSecurityForm">
    <div class="form-body">
        <div class="form-title" trans="system_security"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="remote_management"></label>
                <div class="span8">
                    <input type="radio" name="remoteGrp" id="remoteEnable" data-bind="checked: remoteFlag" value="1"/>
                    <label for="remoteEnable" trans="enable"></label>
                    <input type="radio" name="remoteGrp" id="remoteDisable" data-bind="checked: remoteFlag" value="0"/>
                    <label for="remoteDisable" trans="disable"></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="ping_from_wan"></label>
                <div class="span8">
                    <input type="radio" name="pingGrp" id="pingEnable" data-bind="checked: pingFlag" value="1"/>
                    <label for="pingEnable" trans="enable"></label>
                    <input type="radio" name="pingGrp" id="pingDisable" data-bind="checked: pingFlag" value="0"/>
                    <label for="pingDisable" trans="disable"></label>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
            <input type="button" data-bind="click: clear" class="btn-1 " trans="cancel"/>
        </div>
    </div>
</form>/**
 * @module system_security
 * @class system_security
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    /**
     * system security VM
     * @class SysSecurityModeVM
     */
	function SysSecurityModeVM() {
        var self = this;
        var info = getSysSecurity();

        self.remoteFlag = ko.observable(info.remoteFlag);
        self.pingFlag = ko.observable(info.pingFlag);

        self.clear = function() {
            init();
        };

        self.save = function() {
            showLoading();
            var params = {};
            params.remoteFlag = self.remoteFlag();
            params.pingFlag = self.pingFlag();
            service.setSysSecurity(params, function(result) {
                if (result.result == "success") {
                    successOverlay();
                } else {
                    errorOverlay();
                }
            });

        };
    }

    /**
     * è·åsystem security ä¿¡æ¯
     * @method getSysSecurity
     */
    function getSysSecurity() {
        return service.getSysSecurity();
    }

    /**
     * åå§åsystem security mode view model
     * @method init
     */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new SysSecurityModeVM();
		ko.applyBindings(vm, container[0]);
        $('#sysSecurityForm').validate({
            submitHandler : function() {
                vm.save();
            }
        });
	}

	return {
		init : init
	};
});/*
 RequireJS text 1.0.7 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
(function(){var k=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],n=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,o=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,i=typeof location!=="undefined"&&location.href,p=i&&location.protocol&&location.protocol.replace(/\:/,""),q=i&&location.hostname,r=i&&(location.port||void 0),j=[];define(function(){var g,h,l;typeof window!=="undefined"&&window.navigator&&window.document?h=function(a,c){var b=g.createXhr();b.open("GET",a,!0);b.onreadystatechange=
function(){b.readyState===4&&c(b.responseText)};b.send(null)}:typeof process!=="undefined"&&process.versions&&process.versions.node?(l=require.nodeRequire("fs"),h=function(a,c){var b=l.readFileSync(a,"utf8");b.indexOf("\ufeff")===0&&(b=b.substring(1));c(b)}):typeof Packages!=="undefined"&&(h=function(a,c){var b=new java.io.File(a),e=java.lang.System.getProperty("line.separator"),b=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(b),"utf-8")),d,f,g="";try{d=new java.lang.StringBuffer;
(f=b.readLine())&&f.length()&&f.charAt(0)===65279&&(f=f.substring(1));for(d.append(f);(f=b.readLine())!==null;)d.append(e),d.append(f);g=String(d.toString())}finally{b.close()}c(g)});return g={version:"1.0.7",strip:function(a){if(a){var a=a.replace(n,""),c=a.match(o);c&&(a=c[1])}else a="";return a},jsEscape:function(a){return a.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r")},createXhr:function(){var a,c,
b;if(typeof XMLHttpRequest!=="undefined")return new XMLHttpRequest;else for(c=0;c<3;c++){b=k[c];try{a=new ActiveXObject(b)}catch(e){}if(a){k=[b];break}}if(!a)throw Error("createXhr(): XMLHttpRequest not available");return a},get:h,parseName:function(a){var c=!1,b=a.indexOf("."),e=a.substring(0,b),a=a.substring(b+1,a.length),b=a.indexOf("!");b!==-1&&(c=a.substring(b+1,a.length),c=c==="strip",a=a.substring(0,b));return{moduleName:e,ext:a,strip:c}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,useXhr:function(a,
c,b,e){var d=g.xdRegExp.exec(a),f;if(!d)return!0;a=d[2];d=d[3];d=d.split(":");f=d[1];d=d[0];return(!a||a===c)&&(!d||d===b)&&(!f&&!d||f===e)},finishLoad:function(a,c,b,e,d){b=c?g.strip(b):b;d.isBuild&&(j[a]=b);e(b)},load:function(a,c,b,e){if(e.isBuild&&!e.inlineText)b();else{var d=g.parseName(a),f=d.moduleName+"."+d.ext,m=c.toUrl(f),h=e&&e.text&&e.text.useXhr||g.useXhr;!i||h(m,p,q,r)?g.get(m,function(c){g.finishLoad(a,d.strip,c,b,e)}):c([f],function(a){g.finishLoad(d.moduleName+"."+d.ext,d.strip,a,
b,e)})}},write:function(a,c,b){if(c in j){var e=g.jsEscape(j[c]);b.asModule(a+"!"+c,"define(function () { return '"+e+"';});\n")}},writeFile:function(a,c,b,e,d){var c=g.parseName(c),f=c.moduleName+"."+c.ext,h=b.toUrl(c.moduleName+"."+c.ext)+".js";g.load(f,b,function(){var b=function(a){return e(h,a)};b.asModule=function(a,b){return e.asModule(a,h,b)};g.write(a,f,b,d)},d)}}})})();
/*
 RequireJS text 1.0.7 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
(function() {
    var k = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0"],
        n = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        o = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        i = typeof location !== "undefined" && location.href,
        p = i && location.protocol && location.protocol.replace(/\:/, ""),
        q = i && location.hostname,
        r = i && (location.port || void 0),
        j = [];
    define(function() {
        var g, h, l;
        typeof window !== "undefined" && window.navigator && window
            .document ? h = function(a, c) {
                var b = g.createXhr();
                b.open("GET", a, !0);
                b.onreadystatechange = function() {
                    b.readyState === 4 && c(b.responseText)
                };
                b.send(null)
            } : typeof process !== "undefined" && process.versions &&
            process.versions.node ? (l = require.nodeRequire("fs"),
                h = function(a, c) {
                    var b = l.readFileSync(a, "utf8");
                    b.indexOf("\ufeff") === 0 && (b = b.substring(1));
                    c(b)
                }) : typeof Packages !== "undefined" && (h =
                function(a, c) {
                    var b = new java.io.File(a),
                        e = java.lang.System.getProperty(
                            "line.separator"),
                        b = new java.io.BufferedReader(new java.io.InputStreamReader(
                            new java.io.FileInputStream(b),
                            "utf-8")),
                        d, f, g = "";
                    try {
                        d = new java.lang.StringBuffer;
                        (f = b.readLine()) && f.length() && f.charAt(
                            0) === 65279 && (f = f.substring(1));
                        for (d.append(f);
                            (f = b.readLine()) !== null;) d.append(
                            e), d.append(f);
                        g = String(d.toString())
                    } finally {
                        b.close()
                    }
                    c(g)
                });
        return g = {
            version: "1.0.7",
            strip: function(a) {
                if (a) {
                    var a = a.replace(n, ""),
                        c = a.match(o);
                    c && (a = c[1])
                } else a = "";
                return a
            },
            jsEscape: function(a) {
                return a.replace(/(['\\])/g, "\\$1").replace(
                    /[\f]/g, "\\f").replace(/[\b]/g,
                    "\\b").replace(/[\n]/g, "\\n").replace(
                    /[\t]/g, "\\t").replace(/[\r]/g,
                    "\\r")
            },
            createXhr: function() {
                var a, c,
                    b;
                if (typeof XMLHttpRequest !== "undefined")
                    return new XMLHttpRequest;
                else
                    for (c = 0; c < 3; c++) {
                        b = k[c];
                        try {
                            a = new ActiveXObject(b)
                        } catch (e) {}
                        if (a) {
                            k = [b];
                            break
                        }
                    }
                if (!a) throw Error(
                    "createXhr(): XMLHttpRequest not available"
                );
                return a
            },
            get: h,
            parseName: function(a) {
                var c = !1,
                    b = a.indexOf("."),
                    e = a.substring(0, b),
                    a = a.substring(b + 1, a.length),
                    b = a.indexOf("!");
                b !== -1 && (c = a.substring(b + 1, a.length),
                    c = c === "strip", a = a.substring(
                        0, b));
                return {
                    moduleName: e,
                    ext: a,
                    strip: c
                }
            },
            xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,
            useXhr: function(a, c, b, e) {
                var d = g.xdRegExp.exec(a),
                    f;
                if (!d) return !0;
                a = d[2];
                d = d[3];
                d = d.split(":");
                f = d[1];
                d = d[0];
                return (!a || a === c) && (!d || d === b) &&
                    (!f && !d || f === e)
            },
            finishLoad: function(a, c, b, e, d) {
                b = c ? g.strip(b) : b;
                d.isBuild && (j[a] = b);
                e(b)
            },
            load: function(a, c, b, e) {
                if (e.isBuild && !e.inlineText) b();
                else {
                    var d = g.parseName(a),
                        f = d.moduleName + "." + d.ext,
                        m = c.toUrl(f),
                        h = e && e.text && e.text.useXhr ||
                        g.useXhr;
                    !i || h(m, p, q, r) ? g.get(m, function(
                        c) {
                        g.finishLoad(a, d.strip, c,
                            b, e)
                    }) : c([f], function(a) {
                        g.finishLoad(d.moduleName +
                            "." + d.ext, d.strip,
                            a, b, e)
                    })
                }
            },
            write: function(a, c, b) {
                if (c in j) {
                    var e = g.jsEscape(j[c]);
                    b.asModule(a + "!" + c,
                        "define(function () { return '" +
                        e + "';});\n")
                }
            },
            writeFile: function(a, c, b, e, d) {
                var c = g.parseName(c),
                    f = c.moduleName + "." + c.ext,
                    h = b.toUrl(c.moduleName + "." + c.ext) +
                    ".js";
                g.load(f, b, function() {
                    var b = function(a) {
                        return e(h, a)
                    };
                    b.asModule = function(a, b) {
                        return e.asModule(a, h,
                            b)
                    };
                    g.write(a, f, b, d)
                }, d)
            }
        }
    })
})();
/**
 * @module theme
 * @class theme
 */
define(['knockout', 'jquery', 'config/config'], function(ko, $, config) {
    /**
     * ThemeViewModel
     * @class ThemeViewModel
     */
    function ThemeViewModel() {
        var self = this;
        self.currentTheme = ko.observable(config.THEME);
        self.themeHref = ko.computed(function() {
            $('#loadingImg').attr('src', 'theme/' + self.currentTheme() + '/loading.gif');
            return "theme/" + self.currentTheme() + "/css.css";
        });

        /**
         * ä¸»é¢åæ¢äºä»¶å¤ç
         * @event themeClickHandler
         */
        self.themeClickHandler = function(data, event, theme) {
            this.currentTheme(theme);
        };
    }

    /**
     * åå§åThemeViewModelå¹¶ç»å®
     * @method init
     */
    function init() {
        ko.applyBindings(new ThemeViewModel(), $('#themeSection')[0]);
    }

    return {
        init: init
    };
});
/**
 * @module StatusTooltip
 * @class StatusTooltip
 */
define(
		[ 'jquery' ],
		function($) {

			/**
			 * åå§åç¶ææ tooltip
			 * 
			 * @method init
			 */
			function init() {

				$("#statusBar .statusItem").each(function(i, n){
					var $this = $(this);
					$this.attr("tipTitle", $this.attr("title")).removeAttr("title");
				}).hover(
						function() {
							var $this = $(this);
							var title = $this.attr("tipTitle");
							var tip = $("<div>").addClass("tooltip").appendTo(document.body).hide()
									.append($this.attr("i18n") ? $.i18n.prop(title) : title);
							if ($this.attr("i18n")) {
								tip.attr("trans", title).attr("id", "tooltip_" + $this.attr("id"));
							}
							var pos = getPosition($this, tip, {
								position : [ 'bottom', 'center' ],
								offset : [ 0, 0 ]
							});
							tip.css({
								position : 'absolute',
								top : pos.top,
								left : pos.left
							}).show();
						}, function() {
							$(".tooltip").hide().remove();
						});
			}
			
			/**
			 * è·ååç´ ä½ç½®
			 * @method getPosition
			 * @param trigger ååç´ 
			 * @param tip çæçtooltip
			 * @param {JSON} conf ä½ç½®éç½®
			 */
			function getPosition(trigger, tip, conf) {
				var top = trigger.offset().top, 
					left = trigger.offset().left, 
					pos = conf.position[0];

				top -= tip.outerHeight() - conf.offset[0];
				left += trigger.outerWidth() + conf.offset[1];

				if (/iPad/i.test(navigator.userAgent)) {
					top -= $(window).scrollTop();
				}

				var height = tip.outerHeight() + trigger.outerHeight();
				if (pos == 'center') {
					top += height / 2;
				}
				if (pos == 'bottom') {
					top += height;
				}

				pos = conf.position[1];
				var width = tip.outerWidth() + trigger.outerWidth();
				if (pos == 'center') {
					left -= width / 2;
				}
				if (pos == 'left') {
					left -= width;
				}

				return {
					top : top,
					left : left
				};
			}
			
			return {
				init : init
			};
		});
<div id="traffic_statistics" class="form-body">
	<div class="form-title" trans='traffic_statistics' data-bind="visible:loggedIn()"></div>
    <div class="content">
	<div id="speedTable" class="fileListTable hide">
		<table>
			<thead>
				<tr>
					<th></th>
					<th trans="upload"></th>
					<th trans="download"></th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td trans="speed"></td>
					<td data-bind="text: up_Speed"></td>
					<td data-bind="text: down_Speed"></td>
				</tr>
			</tbody>
		</table>
	</div>
	<div id="dataTable" class="fileListTable">
		<table>
			<thead>
				<tr>
					<th>&nbsp;</th>
					<th trans="connected_time"></th>
					<th trans="downloaded"></th>
					<th trans="uploaded"></th>
					<th trans="traffic_total_traffic"></th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td trans="traffic_current_connection"></td>
					<td data-bind="text: currentConnectedTime"></td>
					<td data-bind="text: currentReceived"></td>
					<td data-bind="text: currentSent"></td>
					<td data-bind="text: currentTraffic"></td>
				</tr>
				<tr class="hide">
					<td trans="traffic_current_month_data"></td>
					<td data-bind="text: monthlyConnectedTime"></td>
					<td data-bind="text: monthlyReceived"></td>
					<td data-bind="text: monthlySent"></td>
					<td data-bind="text: monthlyTraffic"></td>
				</tr>
                <tr>
                    <td trans="traffic_current_month_data"></td>
                    <td data-bind="text: totalConnectedTime"></td>
                    <td data-bind="text: totalReceived"></td>
                    <td data-bind="text: totalSent"></td>
                    <td data-bind="text: totalTraffic"></td>
                </tr>
			</tbody>
		</table>
	</div>
    </div>
	 <div class="form-note">
        <ul>
            <li style="background-image: none;">
                <span trans="traffic_record_note"></span>
            </li>
        </ul>
    </div>
    <div class="form-buttons">
        <input type="button" class="btn-1 btn-primary" trans="clear" data-bind="click: clearVolume,visible:loggedIn()"/>
        <input type="button" class="btn-1 btn-primary" trans="back" data-bind="click: back,visible:!loggedIn()"/>
    </div>
    <div class="form-note" id="traffic_info_note" data-bind="visible: limitVolumeEnable()">
        <ul>
            <li data-bind="visible: limitVolumeEnable() && dataLimitTypeChecked() == '1'">
                <span trans="traffic_used_data_month"></span>
                <span trans="traffic_total_month" class="colorRed"></span> <span data-bind="text: dataMonthly"></span>
                <span trans="traffic_used_month" class="colorRed"></span> <span data-bind="text: dataUsed"></span>
                <span class="colorRed" data-bind="attr:{trans: leftMonthTrans}"></span> <span data-bind="text: dataLeft"></span>
            </li>
            <li data-bind="visible: limitVolumeEnable() && dataLimitTypeChecked() == '0'">
                <span trans="traffic_used_time_month"></span>
                <span trans="traffic_total_month" class="colorRed"></span> <span data-bind="text: timeMonthly"></span> <span trans="hours"></span>
                <span trans="traffic_used_month" class="colorRed"></span> <span data-bind="text: timeUsed"></span>
                <span class="colorRed" data-bind="attr:{trans: leftMonthTrans}"></span> <span data-bind="text: timeLeft"></span>
            </li>
        </ul>
    </div>
	<div class="form-note hide">
        <div class="notes-title">&nbsp;</div>
        <ul class="notes-content">
            <li trans="traffic_data_approximated"></li>
        </ul>
	</div>
</div>
/**
 * æµéç»è®¡æ¨¡å
 * @module TrafficStatistics
 * @class TrafficStatistics
 */
define(['jquery', 'knockout', 'service'], function($, ko, service) {
	/**
	 * å®æ¶æ´æ°æµéç»è®¡view model, æ¶é´é´é1ç§é
	 * @method timerUpdate
	 * @param {Object} trafficVM
	 */
	function timerUpdate(trafficVM){
		addInterval(function(){
			var info = getDataInfo();
			trafficVM.currentSent(transUnit(info.data_counter.currentSent, false));
			trafficVM.currentReceived(transUnit(info.data_counter.currentReceived, false));
			trafficVM.currentConnectedTime(transSecond2Time(info.data_counter.currentConnectedTime));
			trafficVM.currentTraffic(transUnit(parseInt(info.data_counter.currentReceived, 10) + parseInt(info.data_counter.currentSent, 10)));
			trafficVM.monthlySent(transUnit(info.data_counter.monthlySent, false));
			trafficVM.monthlyReceived(transUnit(info.data_counter.monthlyReceived, false));
			trafficVM.monthlyConnectedTime(transSecond2Time(info.data_counter.monthlyConnectedTime));
			var monthlyTraffic = parseInt(info.data_counter.monthlySent, 10) + parseInt(info.data_counter.monthlyReceived, 10);
			trafficVM.monthlyTraffic(transUnit(monthlyTraffic));
            trafficVM.totalSent(transUnit(info.data_counter.totalSent, false));
            trafficVM.totalReceived(transUnit(info.data_counter.totalReceived, false));
            trafficVM.totalConnectedTime(transSecond2Time(info.data_counter.totalConnectedTime));
            var totalTraffic = parseInt(info.data_counter.totalSent, 10) + parseInt(info.data_counter.totalReceived, 10);
            trafficVM.totalTraffic(transUnit(totalTraffic));
			trafficVM.up_Speed(transUnit(info.data_counter.uploadRate, true));
			trafficVM.down_Speed(transUnit(info.data_counter.downloadRate, true));

			trafficVM.limitVolumeEnable(info.limitVolumeEnable);
			trafficVM.dataLimitTypeChecked(info.limitVolumeType);
			trafficVM.dataUsed(trafficVM.monthlyTraffic() + getPercentWithBracket(monthlyTraffic, info.limitDataMonth));
			trafficVM.dataLeft(transUnit(info.limitDataMonth - monthlyTraffic, false) + getPercentWithBracket(info.limitDataMonth - monthlyTraffic, info.limitDataMonth));
			trafficVM.dataMonthly(transUnit(info.limitDataMonth, false));
			trafficVM.timeUsed(trafficVM.monthlyConnectedTime() + getPercentWithBracket(info.data_counter.monthlyConnectedTime, info.limitTimeMonth));
			trafficVM.timeLeft(transSecond2Time(info.limitTimeMonth - info.data_counter.monthlyConnectedTime) + getPercentWithBracket(info.limitTimeMonth - info.data_counter.monthlyConnectedTime, info.limitTimeMonth));
			trafficVM.timeMonthly(info.limitTimeMonth / 60 / 60);

            if(trafficVM.dataLimitTypeChecked() == '1'){
                if(trafficVM.dataLeft().indexOf('-') != -1){
                    trafficVM.leftMonthTrans('traffic_exceeded_month');
                    trafficVM.dataLeft(trafficVM.dataLeft().replace(/\-/g, ''));
                } else {
                    trafficVM.leftMonthTrans('traffic_left_month');
                }
            }
            if(trafficVM.dataLimitTypeChecked() == '0'){
                if(trafficVM.timeLeft().indexOf('-') != -1){
                    trafficVM.leftMonthTrans('traffic_exceeded_month');
                    trafficVM.timeLeft(trafficVM.timeLeft().replace(/\-/g, ''));
                } else {
                    trafficVM.leftMonthTrans('traffic_left_month');
                }
            }
            $("#traffic_info_note").translate();
		}, 1000);
	} 
	
	/**
	 * è·åä¸¤ä½ç²¾åº¦çç¾åæ¯
	 * @method getPercentWithBracket
	 */
	function getPercentWithBracket(numerator, denominator){
		return "(" + getPercent(numerator, denominator) + ")";
	}
	/**
	 * è·åæµéæ°æ®
	 * @method getDataInfo
	 */
	function getDataInfo(){
		return service.getConnectionInfo();
	}
	/**
	 * æµéç»è®¡ViewModel
	 * @class TrafficVM
	 */
	function TrafficVM(){
		var self = this;
		var info = getDataInfo();
        var loginStatus = service.getLoginStatus();
        self.loggedIn = ko.observable(loginStatus.status == "loggedIn");
		self.currentSent = ko.observable(transUnit(info.data_counter.currentSent, false));
		self.currentReceived = ko.observable(transUnit(info.data_counter.currentReceived, false));
		self.currentConnectedTime = ko.observable(transSecond2Time(info.data_counter.currentConnectedTime));
		self.currentTraffic = ko.observable(transUnit(parseInt(info.data_counter.currentReceived, 10) + parseInt(info.data_counter.currentSent, 10)));
		self.monthlySent = ko.observable(transUnit(info.data_counter.monthlySent, false));
		self.monthlyReceived = ko.observable(transUnit(info.data_counter.monthlyReceived, false));
		self.monthlyConnectedTime = ko.observable(transSecond2Time(info.data_counter.monthlyConnectedTime));
		self.monthlyTraffic = ko.observable(transUnit(parseInt(info.data_counter.monthlySent, 10) + parseInt(info.data_counter.monthlyReceived, 10)));
        self.totalSent = ko.observable(transUnit(info.data_counter.totalSent, false));
        self.totalReceived = ko.observable(transUnit(info.data_counter.totalReceived, false));
        self.totalConnectedTime = ko.observable(transSecond2Time(info.data_counter.totalConnectedTime));
        self.totalTraffic = ko.observable(transUnit(parseInt(info.data_counter.totalSent, 10) + parseInt(info.data_counter.totalReceived, 10)));
		self.up_Speed = ko.observable(transUnit(info.data_counter.uploadRate, true));
		self.down_Speed = ko.observable(transUnit(info.data_counter.downloadRate, true));

		self.dataUsed = ko.observable(self.monthlyTraffic() + "(0%)");
		self.dataLeft = ko.observable(transUnit(info.data_counter.downloadRate, false) + "(100%)");
		self.dataMonthly = ko.observable('0B');
		self.timeUsed = ko.observable(self.monthlyConnectedTime() + "(0%)");
		self.timeLeft = ko.observable(transSecond2Time(info.data_counter.downloadRate) + "(100%)");
		self.timeMonthly = ko.observable('0');
		self.limitVolumeEnable = ko.observable(info.limitVolumeEnable);
		self.dataLimitTypeChecked = ko.observable(info.limitVolumeType);
        self.leftMonthTrans = ko.observable('traffic_left_month');

        self.clearVolume = function () {
            showLoading();
            service.clearTrafficData({}, function (data) {
                if (data.result) {
                    successOverlay();
                } else {
                    errorOverlay();
                }
            }, function (err) {
                errorOverlay();
            });
        };
        self.back = function(){
            window.location.href="#login";
        };
	}
	/**
	 * æµéç»è®¡åå§åå½æ°
	 * @method init
	 */
	function init(){
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new TrafficVM();
		ko.applyBindings(vm, container[0]);
		timerUpdate(vm);
	}
	
	return {
		init: init
	};
});(function ($) {
    $.fn.translate = function () {
    	var $this = $(this);
    	$this.each(function(){
    		var item = $(this);
    		var trans = item.attr("trans");
    		if(!!trans){
            	translateElement(this, trans);
    		};
    	});
    	
    	$this.find("*[trans]").each(function () {
    		if($(this).attr("id") == 'chosen-search-field-input'){
    			var val = $("#chosenUserSelect").val();
    			if(val && val.length > 0){
    				return;
    			}
    		}
            var trans = $(this).attr("trans");
            if (trans != "") {
            	translateElement(this, trans);
            }
        });

    	//ç¿»è¯å½å®¶ç 
        $('#container *[transid]').each(function () {
        	var ele = $(this);
            var transid = ele.attr('transid');
            if(ele.attr("name") == "channel"){
            	ele.find('option').each(function () {
            		var item = $(this);
            		if (item.val() != 0) {
            			var val = item.val().split("_");
            			item.html( val[1] + "MHz " + $.i18n.prop(transid + '_' + val[0]) );
            		} else {
            			item.html( $.i18n.prop(transid + '_0') );
            		}
            	});
            }else{
            	ele.find('option').each(function () {
            		$(this).html($.i18n.prop(transid + '_' + $(this).attr('value')));
            	});
            }
        });

        function translateElement(ele, trans){
        	var word = $.i18n.prop(trans);
            var nodeName = ele.nodeName.toUpperCase();
            if (nodeName == 'INPUT' || nodeName == 'SELECT' || nodeName == 'TEXTAREA') {
                $(ele).val(word);
            } else if (nodeName == 'BUTTON') {
                $(ele).text(word);
            } else {
                $(ele).html(word);
            }
        };

        $('.content div.row-fluid', $this).each(function () {
            if ($(this).has('.required').length > 0) {
                $("label:first-child", $(this)).append("<i class='colorRed'>&nbsp;*</i>");
            } else {
                $("label:first-child", $(this)).append("<i class='colorRed' style='visibility: hidden;'>&nbsp;*</i>");
            }
        });

        return $this;
    };
})(jQuery);
//underscore wrapper
define(['lib/underscore/underscore-min'], function() {
    return window._;
});
// Underscore.js 1.3.1
// (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
// Underscore is freely distributable under the MIT license.
// Portions of Underscore are inspired or borrowed from Prototype,
// Oliver Steele's Functional, and John Resig's Micro-Templating.
// For all details and documentation:
// http://documentcloud.github.com/underscore
(function(){function q(a,c,d){if(a===c)return a!==0||1/a==1/c;if(a==null||c==null)return a===c;if(a._chain)a=a._wrapped;if(c._chain)c=c._wrapped;if(a.isEqual&&b.isFunction(a.isEqual))return a.isEqual(c);if(c.isEqual&&b.isFunction(c.isEqual))return c.isEqual(a);var e=l.call(a);if(e!=l.call(c))return false;switch(e){case "[object String]":return a==String(c);case "[object Number]":return a!=+a?c!=+c:a==0?1/a==1/c:a==+c;case "[object Date]":case "[object Boolean]":return+a==+c;case "[object RegExp]":return a.source==
c.source&&a.global==c.global&&a.multiline==c.multiline&&a.ignoreCase==c.ignoreCase}if(typeof a!="object"||typeof c!="object")return false;for(var f=d.length;f--;)if(d[f]==a)return true;d.push(a);var f=0,g=true;if(e=="[object Array]"){if(f=a.length,g=f==c.length)for(;f--;)if(!(g=f in a==f in c&&q(a[f],c[f],d)))break}else{if("constructor"in a!="constructor"in c||a.constructor!=c.constructor)return false;for(var h in a)if(b.has(a,h)&&(f++,!(g=b.has(c,h)&&q(a[h],c[h],d))))break;if(g){for(h in c)if(b.has(c,
h)&&!f--)break;g=!f}}d.pop();return g}var r=this,G=r._,n={},k=Array.prototype,o=Object.prototype,i=k.slice,H=k.unshift,l=o.toString,I=o.hasOwnProperty,w=k.forEach,x=k.map,y=k.reduce,z=k.reduceRight,A=k.filter,B=k.every,C=k.some,p=k.indexOf,D=k.lastIndexOf,o=Array.isArray,J=Object.keys,s=Function.prototype.bind,b=function(a){return new m(a)};if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports)exports=module.exports=b;exports._=b}else r._=b;b.VERSION="1.3.1";var j=b.each=
b.forEach=function(a,c,d){if(a!=null)if(w&&a.forEach===w)a.forEach(c,d);else if(a.length===+a.length)for(var e=0,f=a.length;e<f;e++){if(e in a&&c.call(d,a[e],e,a)===n)break}else for(e in a)if(b.has(a,e)&&c.call(d,a[e],e,a)===n)break};b.map=b.collect=function(a,c,b){var e=[];if(a==null)return e;if(x&&a.map===x)return a.map(c,b);j(a,function(a,g,h){e[e.length]=c.call(b,a,g,h)});if(a.length===+a.length)e.length=a.length;return e};b.reduce=b.foldl=b.inject=function(a,c,d,e){var f=arguments.length>2;a==
null&&(a=[]);if(y&&a.reduce===y)return e&&(c=b.bind(c,e)),f?a.reduce(c,d):a.reduce(c);j(a,function(a,b,i){f?d=c.call(e,d,a,b,i):(d=a,f=true)});if(!f)throw new TypeError("Reduce of empty array with no initial value");return d};b.reduceRight=b.foldr=function(a,c,d,e){var f=arguments.length>2;a==null&&(a=[]);if(z&&a.reduceRight===z)return e&&(c=b.bind(c,e)),f?a.reduceRight(c,d):a.reduceRight(c);var g=b.toArray(a).reverse();e&&!f&&(c=b.bind(c,e));return f?b.reduce(g,c,d,e):b.reduce(g,c)};b.find=b.detect=
function(a,c,b){var e;E(a,function(a,g,h){if(c.call(b,a,g,h))return e=a,true});return e};b.filter=b.select=function(a,c,b){var e=[];if(a==null)return e;if(A&&a.filter===A)return a.filter(c,b);j(a,function(a,g,h){c.call(b,a,g,h)&&(e[e.length]=a)});return e};b.reject=function(a,c,b){var e=[];if(a==null)return e;j(a,function(a,g,h){c.call(b,a,g,h)||(e[e.length]=a)});return e};b.every=b.all=function(a,c,b){var e=true;if(a==null)return e;if(B&&a.every===B)return a.every(c,b);j(a,function(a,g,h){if(!(e=
e&&c.call(b,a,g,h)))return n});return e};var E=b.some=b.any=function(a,c,d){c||(c=b.identity);var e=false;if(a==null)return e;if(C&&a.some===C)return a.some(c,d);j(a,function(a,b,h){if(e||(e=c.call(d,a,b,h)))return n});return!!e};b.include=b.contains=function(a,c){var b=false;if(a==null)return b;return p&&a.indexOf===p?a.indexOf(c)!=-1:b=E(a,function(a){return a===c})};b.invoke=function(a,c){var d=i.call(arguments,2);return b.map(a,function(a){return(b.isFunction(c)?c||a:a[c]).apply(a,d)})};b.pluck=
function(a,c){return b.map(a,function(a){return a[c]})};b.max=function(a,c,d){if(!c&&b.isArray(a))return Math.max.apply(Math,a);if(!c&&b.isEmpty(a))return-Infinity;var e={computed:-Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b>=e.computed&&(e={value:a,computed:b})});return e.value};b.min=function(a,c,d){if(!c&&b.isArray(a))return Math.min.apply(Math,a);if(!c&&b.isEmpty(a))return Infinity;var e={computed:Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b<e.computed&&(e={value:a,computed:b})});
return e.value};b.shuffle=function(a){var b=[],d;j(a,function(a,f){f==0?b[0]=a:(d=Math.floor(Math.random()*(f+1)),b[f]=b[d],b[d]=a)});return b};b.sortBy=function(a,c,d){return b.pluck(b.map(a,function(a,b,g){return{value:a,criteria:c.call(d,a,b,g)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;return c<d?-1:c>d?1:0}),"value")};b.groupBy=function(a,c){var d={},e=b.isFunction(c)?c:function(a){return a[c]};j(a,function(a,b){var c=e(a,b);(d[c]||(d[c]=[])).push(a)});return d};b.sortedIndex=function(a,
c,d){d||(d=b.identity);for(var e=0,f=a.length;e<f;){var g=e+f>>1;d(a[g])<d(c)?e=g+1:f=g}return e};b.toArray=function(a){return!a?[]:a.toArray?a.toArray():b.isArray(a)?i.call(a):b.isArguments(a)?i.call(a):b.values(a)};b.size=function(a){return b.toArray(a).length};b.first=b.head=function(a,b,d){return b!=null&&!d?i.call(a,0,b):a[0]};b.initial=function(a,b,d){return i.call(a,0,a.length-(b==null||d?1:b))};b.last=function(a,b,d){return b!=null&&!d?i.call(a,Math.max(a.length-b,0)):a[a.length-1]};b.rest=
b.tail=function(a,b,d){return i.call(a,b==null||d?1:b)};b.compact=function(a){return b.filter(a,function(a){return!!a})};b.flatten=function(a,c){return b.reduce(a,function(a,e){if(b.isArray(e))return a.concat(c?e:b.flatten(e));a[a.length]=e;return a},[])};b.without=function(a){return b.difference(a,i.call(arguments,1))};b.uniq=b.unique=function(a,c,d){var d=d?b.map(a,d):a,e=[];b.reduce(d,function(d,g,h){if(0==h||(c===true?b.last(d)!=g:!b.include(d,g)))d[d.length]=g,e[e.length]=a[h];return d},[]);
return e};b.union=function(){return b.uniq(b.flatten(arguments,true))};b.intersection=b.intersect=function(a){var c=i.call(arguments,1);return b.filter(b.uniq(a),function(a){return b.every(c,function(c){return b.indexOf(c,a)>=0})})};b.difference=function(a){var c=b.flatten(i.call(arguments,1));return b.filter(a,function(a){return!b.include(c,a)})};b.zip=function(){for(var a=i.call(arguments),c=b.max(b.pluck(a,"length")),d=Array(c),e=0;e<c;e++)d[e]=b.pluck(a,""+e);return d};b.indexOf=function(a,c,
d){if(a==null)return-1;var e;if(d)return d=b.sortedIndex(a,c),a[d]===c?d:-1;if(p&&a.indexOf===p)return a.indexOf(c);for(d=0,e=a.length;d<e;d++)if(d in a&&a[d]===c)return d;return-1};b.lastIndexOf=function(a,b){if(a==null)return-1;if(D&&a.lastIndexOf===D)return a.lastIndexOf(b);for(var d=a.length;d--;)if(d in a&&a[d]===b)return d;return-1};b.range=function(a,b,d){arguments.length<=1&&(b=a||0,a=0);for(var d=arguments[2]||1,e=Math.max(Math.ceil((b-a)/d),0),f=0,g=Array(e);f<e;)g[f++]=a,a+=d;return g};
var F=function(){};b.bind=function(a,c){var d,e;if(a.bind===s&&s)return s.apply(a,i.call(arguments,1));if(!b.isFunction(a))throw new TypeError;e=i.call(arguments,2);return d=function(){if(!(this instanceof d))return a.apply(c,e.concat(i.call(arguments)));F.prototype=a.prototype;var b=new F,g=a.apply(b,e.concat(i.call(arguments)));return Object(g)===g?g:b}};b.bindAll=function(a){var c=i.call(arguments,1);c.length==0&&(c=b.functions(a));j(c,function(c){a[c]=b.bind(a[c],a)});return a};b.memoize=function(a,
c){var d={};c||(c=b.identity);return function(){var e=c.apply(this,arguments);return b.has(d,e)?d[e]:d[e]=a.apply(this,arguments)}};b.delay=function(a,b){var d=i.call(arguments,2);return setTimeout(function(){return a.apply(a,d)},b)};b.defer=function(a){return b.delay.apply(b,[a,1].concat(i.call(arguments,1)))};b.throttle=function(a,c){var d,e,f,g,h,i=b.debounce(function(){h=g=false},c);return function(){d=this;e=arguments;var b;f||(f=setTimeout(function(){f=null;h&&a.apply(d,e);i()},c));g?h=true:
a.apply(d,e);i();g=true}};b.debounce=function(a,b){var d;return function(){var e=this,f=arguments;clearTimeout(d);d=setTimeout(function(){d=null;a.apply(e,f)},b)}};b.once=function(a){var b=false,d;return function(){if(b)return d;b=true;return d=a.apply(this,arguments)}};b.wrap=function(a,b){return function(){var d=[a].concat(i.call(arguments,0));return b.apply(this,d)}};b.compose=function(){var a=arguments;return function(){for(var b=arguments,d=a.length-1;d>=0;d--)b=[a[d].apply(this,b)];return b[0]}};
b.after=function(a,b){return a<=0?b():function(){if(--a<1)return b.apply(this,arguments)}};b.keys=J||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var c=[],d;for(d in a)b.has(a,d)&&(c[c.length]=d);return c};b.values=function(a){return b.map(a,b.identity)};b.functions=b.methods=function(a){var c=[],d;for(d in a)b.isFunction(a[d])&&c.push(d);return c.sort()};b.extend=function(a){j(i.call(arguments,1),function(b){for(var d in b)a[d]=b[d]});return a};b.defaults=function(a){j(i.call(arguments,
1),function(b){for(var d in b)a[d]==null&&(a[d]=b[d])});return a};b.clone=function(a){return!b.isObject(a)?a:b.isArray(a)?a.slice():b.extend({},a)};b.tap=function(a,b){b(a);return a};b.isEqual=function(a,b){return q(a,b,[])};b.isEmpty=function(a){if(b.isArray(a)||b.isString(a))return a.length===0;for(var c in a)if(b.has(a,c))return false;return true};b.isElement=function(a){return!!(a&&a.nodeType==1)};b.isArray=o||function(a){return l.call(a)=="[object Array]"};b.isObject=function(a){return a===Object(a)};
b.isArguments=function(a){return l.call(a)=="[object Arguments]"};if(!b.isArguments(arguments))b.isArguments=function(a){return!(!a||!b.has(a,"callee"))};b.isFunction=function(a){return l.call(a)=="[object Function]"};b.isString=function(a){return l.call(a)=="[object String]"};b.isNumber=function(a){return l.call(a)=="[object Number]"};b.isNaN=function(a){return a!==a};b.isBoolean=function(a){return a===true||a===false||l.call(a)=="[object Boolean]"};b.isDate=function(a){return l.call(a)=="[object Date]"};
b.isRegExp=function(a){return l.call(a)=="[object RegExp]"};b.isNull=function(a){return a===null};b.isUndefined=function(a){return a===void 0};b.has=function(a,b){return I.call(a,b)};b.noConflict=function(){r._=G;return this};b.identity=function(a){return a};b.times=function(a,b,d){for(var e=0;e<a;e++)b.call(d,e)};b.escape=function(a){return(""+a).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;")};b.mixin=function(a){j(b.functions(a),
function(c){K(c,b[c]=a[c])})};var L=0;b.uniqueId=function(a){var b=L++;return a?a+b:b};b.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var t=/.^/,u=function(a){return a.replace(/\\\\/g,"\\").replace(/\\'/g,"'")};b.template=function(a,c){var d=b.templateSettings,d="var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('"+a.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(d.escape||t,function(a,b){return"',_.escape("+
u(b)+"),'"}).replace(d.interpolate||t,function(a,b){return"',"+u(b)+",'"}).replace(d.evaluate||t,function(a,b){return"');"+u(b).replace(/[\r\n\t]/g," ")+";__p.push('"}).replace(/\r/g,"\\r").replace(/\n/g,"\\n").replace(/\t/g,"\\t")+"');}return __p.join('');",e=new Function("obj","_",d);return c?e(c,b):function(a){return e.call(this,a,b)}};b.chain=function(a){return b(a).chain()};var m=function(a){this._wrapped=a};b.prototype=m.prototype;var v=function(a,c){return c?b(a).chain():a},K=function(a,c){m.prototype[a]=
function(){var a=i.call(arguments);H.call(a,this._wrapped);return v(c.apply(b,a),this._chain)}};b.mixin(b);j("pop,push,reverse,shift,sort,splice,unshift".split(","),function(a){var b=k[a];m.prototype[a]=function(){var d=this._wrapped;b.apply(d,arguments);var e=d.length;(a=="shift"||a=="splice")&&e===0&&delete d[0];return v(d,this._chain)}});j(["concat","join","slice"],function(a){var b=k[a];m.prototype[a]=function(){return v(b.apply(this._wrapped,arguments),this._chain)}});m.prototype.chain=function(){this._chain=
true;return this};m.prototype.value=function(){return this._wrapped}}).call(this);
ï»¿<div class="form-body">
	<div class="form-title" trans='update_info'></div>
	<div class="content">
        <div data-bind="visible: updateInfo()==0">
            <div class="note paddingleft15" trans="update_check_new_version_desc"></div>
            <div class="form-buttons">
                <input id="btnCheckNewVersion" type="button" class="btn-1 " trans="update_check_new_version"
                       data-bind="click:checkRoamStatus,enable:!enableFlag()"/>
            </div>
        </div>
		<div data-bind="visible: updateInfo()==1">
			<div class="row-fluid" >
				<label class="span4 side-right" trans="update_new_version_found"></label>
			</div>
			
			<div class="row-fluid">
				<label class="span4 side-right" trans="update_current_version"></label>
				<div class="span8" data-bind="text:currentVersion" />
			</div>
			<div class="row-fluid">
				<label class="span4 side-right" trans="update_new_version"></label>
				<div class="span8" data-bind="text:newVersion" />
			</div>
			<div class="row-fluid">
				<label class="span4 side-right" trans="update_log"></label>
				<div class="span8" data-bind="html:updateLog" />
			</div>
			<div class="row-fluid">
				<label class="span4 side-right" trans="update_note"></label>
				<div class="span8" trans="update_link_prompt" />
			</div>
			<div class="row-fluid">
				<div data-bind="html:linkString" class="update_info_link" ></div>
			</div>
			<div class="row-fluid">
                <p class="checkbox" data-bind="css:{'checkbox_selected': isSkipedWarning()==1}, click: setIsSkipedWarning" manualControl="true">
				    <input type="checkbox" id="isSkipedWarning" value="1" data-bind="checked:isSkipedWarning()==1"/>
                </p>
				<div trans="update_remind" class="update_inline"/>
			</div>
			<div class="form-buttons">
				<input type="button" trans="update_skip_btn" data-bind="click:setUpdateInfoWarning" class="btn-1 marginright10" />
			</div>
            <div class="form-note">
                <div class="notes-title">&nbsp;</div>
                <ul class="notes-content">
                    <li trans="update_note_linux"></li>
                    <li trans="update_note_info"></li>
                    <li trans="update_note_install"></li>
                </ul>
            </div>
		</div>
	</div>	   
</div>
ï»¿define([ 'jquery', 'service', 'knockout', 'config/config' ], function($, service, ko, config) {
	
	var currentVersion = "";//å½åçæ¬
	var newVersion="";//æ°çæ¬
	
	var updateLog = "";	//æ´æ°æ¥å¿
	
	var updateFileList = [];//æ´æ°æä»¶å
	var updateFileLinkList = [];//æ´æ°è¶é¾æ¥
	
	var fileRoute="description.xml";
	
	function UpdateInformationViewModel(){
	
		var self = this;
		self.updateInfo=ko.observable();
		self.updateNoInfo=ko.observable();				
		self.currentVersion=ko.observable();
		self.newVersion=ko.observable();
		self.updateLog=ko.observable();
		self.linkString=ko.observable();
		self.isSkipedWarning=ko.observable(0);
        self.enableFlag = ko.observable(true);
        self.checkRoamStatus = function(){
            var roamingStatus = service.getStatusInfo().roamingStatus;
            if(roamingStatus){
                showConfirm("update_manual_check_roaming_confirm", function () {
                    self.checkNewVersion();
                });
            }else{
                self.checkNewVersion();
            }
        }
        self.checkNewVersion = function(){
            showLoading("update_new_version_checking");
            service.scanForUpdateInfo(function(result){
                hideLoading();
                if(result){
                    $.ajax({
                        url: fileRoute + "?rd=" + new Date(),
                        dataType: 'xml',
                        success: function(xml){
                            $(xml).find("PackageDescription").each(function(index, ele) {
                                //currentVersion = $(ele).find("SoftwareVersion").text();
                                updateLog = fixLog($(ele).find("Log").text());
                                newVersion = $(ele).find("FirmwareVersion").text();
                            });

                            $(xml).find("UpdateFile").each(function(index, ele) {
                                var field = $(ele);
                                updateFileList[index]=field.text();
                                updateFileLinkList[index]=field.attr("URL");
                            });

                            currentVersion=service.getDeviceInfo().fw_version;
                            if(newVersion == currentVersion){
                                showUpdateAlert("update_no_info");
                            }else{
                                initUpdateInfo();
                            }
                        },error:function(){
                            showUpdateAlert("update_no_info");
                        }
                    });
                }else{
                    showUpdateAlert("update_no_info");
                }
            });
        }
        self.checkEnable = function() {
            var status = service.getStatusInfo();
            if (checkConnectedStatus(status.connectStatus) || status.connectStatus == "ppp_connecting") {
                self.enableFlag(false);
            }
            else {
                self.enableFlag(true);
            }
        };

        //init data
        self.checkEnable();
		var dealURL = function(url){
			if(url.length==0){
				return url;
			}
			var returnValue="http://";
			var temp=url.split("@");
			
			if(temp.length==1){
				return url;
			}
			returnValue+=(temp[1].split("/")[0]).split(":")[0]+"/";
			var server=temp[0].split("//")[1];
			returnValue+=server.split(":")[0]+"/";
			var tempValue=temp[1].split("/");
			for(var i=1;i<tempValue.length;i++){
				if(i==tempValue.length-1){
					returnValue+=tempValue[i];
				}else{
					returnValue+=tempValue[i]+"/";
				}
			}
			return returnValue;
		}

		setUpdateInfoWarning = function(){			
			showLoading();
			
			var upgrade_notice_flag=self.isSkipedWarning();
			var params = {};
                params.upgrade_notice_flag = upgrade_notice_flag;
			
			service.setUpdateInfoWarning(params, function(result){
				hideLoading();				
				if(result){
					successOverlay();
				}else{					
					errorOverlay();
				}
				initSkipedWarning();
			});
		}

		setIsSkipedWarning = function(){
			var checkbox = $("#isSkipedWarning:checked");
			if(checkbox && checkbox.length == 0){
				self.isSkipedWarning(1);
			}else{
				self.isSkipedWarning(0);
			}
		}
		
		var fixLog = function(updateLogIn){
			if(updateLogIn.length > 0)
			{
				var iCheckIfOldFormat=-1;
				iCheckIfOldFormat=updateLogIn.indexOf("\\n\\r");
				if(-1 == iCheckIfOldFormat)
				{
					return updateLogIn;
				}
				var strAdd = ["<p>", "</p><p>", "</p>"];
				var strForWrite="";
				var iAddPos=0;
				var iLastFoundPos=-1;
				
				while(1)
				{
					iLastFoundPos=updateLogIn.indexOf("\\n\\r");
					if(-1 == iLastFoundPos)
					{
						if( 1 == iAddPos){
							strForWrite=strForWrite+strAdd[0];
						}else{
							strForWrite=strForWrite+strAdd[1];
						}							
						strForWrite=strForWrite+updateLogIn;
						strForWrite=strForWrite+strAdd[2];
						break;
					}
					if(0 == iAddPos)
					{
						continue;
					}else if(1 == iAddPos){
						strForWrite=strForWrite+strAdd[0];
					}
					else{
						strForWrite=strForWrite+strAdd[1];
					}
					
					strForWrite=strForWrite+updateLogIn.substr(0, iLastFoundPos);
					iAddPos++;
					updateLogIn=updateLogIn.substr(iLastFoundPos+4);
				}
				return strForWrite;
			}
			return "";
		}
		
		var initUpdateInfo = function(){		
			if(currentVersion==newVersion){
				self.updateInfo(0);
			}else{
				self.updateInfo(1);
				
				self.currentVersion(currentVersion);
				self.newVersion(newVersion);
				self.updateLog(updateLog);
				
				var linkString="";
				for(var tmp=0;tmp<updateFileList.length;tmp++)
				{
					if(0 == tmp)
					{
						linkString += "<p>";
					}
					linkString += "<a target='_blank' href=\"";
					//linkString += dealURL(updateFileLinkList[tmp]);
					linkString += updateFileLinkList[tmp];
					linkString += "\" >";
					linkString += updateFileList[tmp];
					if("" == updateFileList[tmp])
					{
						linkString += "</a></p>";
						break;
					}
					else
					{
						linkString += "</a></p><p>";
					}
				}
				self.linkString(linkString);
			}
		}
		
		var loadDescription = function(){
			var info=service.getStatusInfo();			
			if(checkConnectedStatus(info.connectStatus)){//åªæå¨èç½ä¸­ææ¾ç¤ºåçº§ä¿¡æ¯
				$.ajax({
					url: fileRoute + "?rd=" + new Date(),
					dataType: 'xml',
					success: function(xml){
						$(xml).find("PackageDescription").each(function(index, ele) {
							//currentVersion = $(ele).find("SoftwareVersion").text();
							updateLog = fixLog($(ele).find("Log").text());
							newVersion = $(ele).find("FirmwareVersion").text();
						});
						
						$(xml).find("UpdateFile").each(function(index, ele) {
							var field = $(ele);
							updateFileList[index]=field.text();
							updateFileLinkList[index]=field.attr("URL");
						});
						
						currentVersion=service.getDeviceInfo().fw_version;
						
						initUpdateInfo();
					},error:function(){
						self.updateInfo(0);
					}
				});	
			}else{
				self.updateInfo(0);
			}
		};
		
		var initSkipedWarning = function(){			
			var notice=service.getUpdateInfoWarning();
			if(notice.upgrade_notice_flag){
				self.isSkipedWarning(notice.upgrade_notice_flag==2?1:notice.upgrade_notice_flag);
			}
		};
		
		loadDescription();
		initSkipedWarning();
	}
	
	function init()
	{		
		var container = $('#container')[0];
		ko.cleanNode(container);
		var vm = new UpdateInformationViewModel();
		ko.applyBindings(vm, container);
        addInterval( vm.checkEnable, 1000);
	}
	
	return {
		init : init
	};
});<form id="upnpSettingForm">
    <div class="form-body">
        <div class="form-title" trans="upnp_setting"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="upnp_setting"></label>
                <div class="span8">
                <input type="radio" name="upnpGrp" id="upnpEnable" data-bind="checked: upnpSetting" value="1"/>
                    <label for="upnpEnable" trans="enable"></label>
                <input type="radio" name="upnpGrp" id="upnpDisable" data-bind="checked: upnpSetting" value="0"/>
                    <label for="upnpDisable" trans="disable"></label>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" class="btn-1 " trans="apply"/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="upnp_note_info"></li>
                <li trans="upnp_note_info_mf65" data-bind='visible:upnp_mf65_notes == "ufi/mf65"'></li>
                <!--<li trans="lan_note"></li>-->
            </ul>
        </div>
    </div>
</form>/**
 * @module upnp setting
 * @class upnp setting
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

    /**
     * system upnp setting VM
     * @class UpnpSettingVM
     */
	function UpnpSettingVM() {
        var self = this;
        var info = getUpnpSetting();

        self.upnpSetting = ko.observable(info.upnpSetting);
        self.upnp_mf65_notes = config.DEVICE;
        self.save = function() {
            showConfirm("upnp_info",{ok: function(){
                showLoading();
                var params = {};
                params.upnpSetting = self.upnpSetting();
                service.setUpnpSetting(params, function(result) {
                    if (result.result == "success") {
                        successOverlay();
                    } else {
                        errorOverlay();
                    }
                });
            }, no: function(){
                init();
            }},"","restart","cancel");
        };
    }

    /**
     * è·åupnp ä¿¡æ¯
     * @method getUpnpSetting
     */
    function getUpnpSetting() {
        return service.getUpnpSetting();
    }

    /**
     * åå§åUpnpSettingVM model
     * @method init
     */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new UpnpSettingVM();
		ko.applyBindings(vm, container[0]);
        $('#upnpSettingForm').validate({
            submitHandler : function() {
                vm.save();
            }
        });
	}

	return {
		init : init
	};
});//common function
/**
 * 
 *@class util
 */
var lastLoginStatus = 'UNREAL';
var manualLogout = false;

/**
* print the logging information to the console
*
* @method log
* @param {String} what log information
* @param {Object} param åæ°æ°ç»
*/
function log(what, param) {
	_printLog("log", what, param);
}

/**
* print the debuging information to the console
*
* @method debug
* @param {String} what log information
* @param {Object} param åæ°æ°ç»
*/
function debug(what, param) {
	_printLog("debug", what, param);
}

/**
* print the information to the console
*
* @method _printLog
* @param {String} level è°è¯æ¥å¿ç­çº§ï¼debug or info
* @param {String} what log information
* @param {Object} param åæ°æ°ç»
*/
function _printLog(level, what, param){
	if ($.browser.msie)
		return;
	if (window.console) {
		if (param && typeof what === 'object' && typeof param === 'object') {
			var clone = what;
			$.extend(clone, param);
		}
		if(level == "debug"){
			window.console.debug(what);
		}else{
			window.console.info(what);
		}
	}
}

/**
* å¤æ­å¯¹è±¡æ¯ä¸æ¯ä¸ä¸ªéè¯¯å¯¹è±¡ï¼åå«errorTypeå±æ§åä¸ºéè¯¯å¯¹è±¡
*
* @method isErrorObject
* @param {Object} param åæ°æ°ç»
* @return {Boolean} æ¯å¦ä¸ºéè¯¯å¯¹è±¡
*/
function isErrorObject(object) {
	return typeof object.errorType === 'string';
}

/**
 * åæ¢è¯­è¨æ¶,æ¸é¤ä¹åé¡µé¢ä¸çæ£æ ¸ä¿¡æ¯
 * @method clearValidateMsg
 */
function clearValidateMsg(areaId) {
    areaId = areaId || '*';
	$(areaId + ' label.error').remove();
}

/**
 * ç¿»è¯ä¸æåè¡¨ä¸­çéé¡¹
 * @method transOption
 * @param {String} transid ä¸æåè¡¨ä¸­éè¦ç¿»è¯çid
 * @param {String} isChannel å¤æ­éè¦ç¿»è¯çåç´ æ¯å¦æ¯channel
 * @return {Function}
 */
function transOption(transid, isChannel) {
	if (isChannel) {
		return function(item) {
			if (item.value != 0) {
				var val = item.value.split("_");
				return val[1] + "MHz " + $.i18n.prop(transid + '_' + val[0]);
			} else {
				return $.i18n.prop(transid + '_0');
			}
		};
	}
	return function(item) {
		return $.i18n.prop(transid + '_' + item.value);
	};
}

/**
 * æç¤ºæåä¿¡æ¯
 * @method successOverlay
 * @param {String} msg
 */
function successOverlay(msg, isContinueLoading) {
	showOverLay(msg ? msg : 'success_info', 'overlay-success', !isContinueLoading);
}

/**
 * æç¤ºå¤±è´¥ä¿¡æ¯
 * @method errorOverlay
 * @param {String} msg
 */
function errorOverlay(msg, isContinueLoading) {
    showOverLay(msg ? msg : 'error_info', 'overlay-error', !isContinueLoading);
}

/**
 * æ¾ç¤ºæç¤ºä¿¡æ¯
 * @method showOverLay
 * @param {String} msg æç¤ºä¿¡æ¯å¯¹åºçkey
 * @param {String} className æç¤ºä¿¡æ¯æ ·å¼å
 */
function showOverLay(msg, className,isHideLoading) {
    if(isHideLoading){
        hideLoading();
    }
	$('#msgDiv').html($.i18n.prop(msg)).removeClass().addClass(className);
	window.scroll(0, 0);
	$('#msgOverlay').slideDown();
	setTimeout(function() {
		$('#msgOverlay').slideUp();
	}, 2000);
}

/**
 * æ¾ç¤ºè¿åº¦æ¡
 * @method showProgressBar
 * @param {String} msg
 * @param {String} content loading ææ¬
 */
function showProgressBar(msg, content){
    if (msg) {
        $('#barMsg').html($.i18n.prop(msg));
    }
    $('#progress').modal({
        position : [ '30%' ],
        overlayId : 'confirm-overlay',
        containerId : 'confirm-container',
        minHeight : 140,
        persist : true,
        focus: false,
        escClose: false
    });

    if(content){
        $("#progress #progress_container").html(content);
    } else {
        $("#progress #progress_container").html("");
    }
}

/**
 * æ¾ç¤ºè¿åº¦æ¡ç¾åæ¯
 * @method setProgressBar
 * @param {int} percents ç¾åæ¯
 */
function setProgressBar(percents)
{
    jQuery("#bar").width(400*percents/100);
    jQuery("#barValue").text(percents + "%");
}

/**
 * éèè¿åº¦æ¡
 * @method hideProgressBar
 */
function hideProgressBar() {
    $.modal.close();
    $('#barMsg').html('');
}

/**
 * æ¾ç¤ºç­å¾é®ç½©
 * @method showLoading
 * @param {String} msg
 * @param {String} content loading ææ¬
 */
function showLoading(msg, content) {
	if (msg) {
		$('#loadMsg').html($.i18n.prop(msg));
	}/* else {
		$('#loadMsg').html($.i18n.prop('processing'));
	}*/
	$('#loading').modal({
		position : [ '30%' ],
		overlayId : 'confirm-overlay',
		containerId : 'confirm-container',
		minHeight : 140,
		persist : true,
        focus: false,
        escClose: false
	});
	if(content){
		$("#loading #loading_container").html(content);
	} else {
		$("#loading #loading_container").html("");
	}
}

/**
 * ä¿®æ¹ç­å¾é®ç½©çä¿¡æ¯
 * @method loadingMsgChange
 * @param {String} msg
 */
function loadingMsgChange(msg) {
	$('#loadMsg').html($.i18n.prop(msg));
}

/**
 * éèç­å¾é®ç½©
 * @method hideLoading
 */
function hideLoading() {
	$('#confirm-overlay').css("cursor","default");
	$.modal.close();
	$('#loadMsg').html('');
}

/**
 * è·åéæºæ°
 * @method getRandomInt
 * @param n
 * @return {Number}
 */
function getRandomInt(n) {
	return Math.round(Math.random() * n);
}

/**
 * è·åå½åæ¶é´.æ ¼å¼å¦ï¼2012-1-2 12:33:44
 * @method getCurrentDatetime
 * @return {String}
 */
function getCurrentDatetime() {
	var d = new Date();
	return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate() + " " + d.getHours() + ":" + d.getMinutes()
			+ ":" + d.getSeconds();
}

/**
 * è·åå½åéæºæ¶é´.æ ¼å¼å¦ï¼2012-1-2 12:33:44
 * @method getRandomDatetime
 * @return {String}
 */
function getRandomDatetime() {
	var d = new Date();
	return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate() + " " + getRandomInt(24) + ":" + getRandomInt(60)
			+ ":" + getRandomInt(60);
}

/**
 * è·åéå·åå²çå½å¤©æ¶é´.æ ¼å¼å¦ï¼2012ï¼1ï¼2ï¼12ï¼33ï¼44
 * @method getRandomDatetimeSep
 * @return {String}
 */
function getRandomDatetimeSep() {
	var d = new Date();
	return d.getFullYear() + "," + (d.getMonth() + 1) + "," + d.getDate() + "," + getRandomInt(24) + "," + getRandomInt(60)
			+ "," + getRandomInt(60);
}

/**
 * è·åå½åæ¶é´.æ ¼å¼å¦ï¼2012ï¼01ï¼02ï¼12ï¼33ï¼44+800
 * @method getCurrentTimeString
 * @param {Date} theTime
 * @return {String}
 */
function getCurrentTimeString(theTime) {
	var time = "";
	var d = theTime ? theTime : new Date();
	time += (d.getFullYear() + "").substring(2) + ";";
	time += getTwoDigit((d.getMonth() + 1)) + ";" + getTwoDigit(d.getDate()) + ";" + getTwoDigit(d.getHours()) + ";"
			+ getTwoDigit(d.getMinutes()) + ";" + getTwoDigit(d.getSeconds()) + ";";

	if (d.getTimezoneOffset() < 0) {
		time += "+" + (0 - d.getTimezoneOffset() / 60);
	} else {
		time += (0 - d.getTimezoneOffset() / 60);
	}
	return time;
}

/**
 * å­ç¬¦ä¸²é¿åº¦ä¸è¶³ä¸¤ä½ï¼åé¢è¡¥é¶
 * @method getTwoDigit
 * @return {String}
 */
function getTwoDigit(num) {
	num += "";
	while (num.length < 2) {
		num = "0" + num;
	}
	return num;
}

/**
 * å¼¹åºconfirmæç¤ºæ¡
 * @method showConfirm
 * @param {Object|String} msgObj
 * @param {Function} callback confirmç¡®è®¤åçåè°å½æ°
 * 		å¦æéè¦ç»å®Yes,Noä¸¤ä¸ªåè°äºä»¶ï¼ä¼ å¯¹è±¡{ok: function(){}, no: function(){}}
 * @param {Number} minHeight
 */
function showConfirm(msgObj, callback, minHeight,yesTrans,noTrans) {
    if (yesTrans) {
        $('#yesbtn').attr("trans", yesTrans);
    } else {
        $('#yesbtn').attr("trans", "yes");
    }
    if (noTrans) {
        $('#nobtn').attr("trans", noTrans);
    } else {
        $('#nobtn').attr("trans", "no");
    }
    $('#yesbtn, #nobtn').translate();
	var option = {
		title : 'confirm',
		img : 'img/confirm.png',
		msg : msgObj,
		minHeight : minHeight
	};

	popup(option);
	
	$('#yesbtn, #nobtn').show();
	$('#okbtn').hide();
	
	var callbackIsFunction = $.isFunction(callback);
	var callbackIsPojo = $.isPlainObject(callback);
	$('#yesbtn').unbind('click').click(function() {
		$.modal.close();
		if (callbackIsFunction) {
			callback();
		} else if(callbackIsPojo && $.isFunction(callback.ok)){
			callback.ok();
		}
	});

	$('#nobtn').unbind('click').click(function() {
		$.modal.close();
		if(callbackIsPojo && $.isFunction(callback.no)){
			callback.no();
		}
	});
}

/**
 * å¼¹åºPromptæç¤ºæ¡,ä¾ç¨æ·è¾å¥ä¿¡æ¯
 * @method showPrompt
 * @param {Object|String} msgObj
 * @param {Function} callback Promptç¡®è®¤åçåè°å½æ°
 * @param {Number} minHeight
 * @param {String} defaultValue è¾å¥æ¡åé»è®¤å¼
 */
function showPrompt(msgObj, callback, minHeight, defaultValue) {
	var option = {
		title : 'prompt',
		img : 'img/confirm.png',
		msg : msgObj,
		minHeight : minHeight,
		showInput : true,
		defaultValue : defaultValue
	};

	popup(option);
	
	$('#yesbtn, #nobtn').unbind('click').show();
	$('#okbtn').hide();
	
	$('#yesbtn').click(function() {
		if ($.isFunction(callback)) {
			if(callback()){
				$.modal.close();
			}
		}
	});
	
	$('#nobtn').click(function() {
		$.modal.close();
	});

    $("#promptInput", "#confirm").unbind('keypress').bind('keypress', function(event){
        if(event.keyCode == 13){
            $('#yesbtn').trigger("click");
        }
    });
}

/**
 * å¼¹åºalertæç¤ºæ¡
 * @method showAlert
 * @param {Object|String} msgObj
 * @param {Function} callback alertç¡®è®¤åçåè°å½æ°
 * @param {Number} minHeight
 */
function showAlert(msgObj, callback, minHeight) {
	var option = {
		title : 'alert',
		img : 'img/alert.png',
		msg : msgObj,
		minHeight : minHeight
	};
	popup(option);
	
	$('#yesbtn, #nobtn').hide();
	$('#okbtn').unbind('click').click(function() {
        $.modal.close();
        if ($.isFunction(callback)) {
            callback();
        }
    }).show();

}
/**
 * å¼¹åºåçº§alertæç¤ºæ¡
 * @method showUpdateAlert
 * @param {Object|String} msgObj
 * @param {Function} callback alertç¡®è®¤åçåè°å½æ°
 * @param {Number} minHeight
 */
function showUpdateAlert(msgObj, callback, minHeight) {
    var option = {
        title : 'update_alert',
        img : '',
        msg : msgObj,
        minHeight : minHeight
    };
    popup(option);

    $('#yesbtn, #nobtn').hide();
    $('#okbtn').unbind('click').click(function() {
        $.modal.close();
        if ($.isFunction(callback)) {
            callback();
        }
    }).show();

}
/**
 * å¼¹åºinfoæç¤ºæ¡
 * @method showInfo
 * @param {Object|String} msgObj
 * @param {Number} minHeight
 */
function showInfo(msgObj, minHeight) {
	var option = {
		title : 'info',
		img : 'img/info.png',
		msg : msgObj,
		minHeight : minHeight
	};
	popup(option);
	
	$('#yesbtn, #nobtn').hide();
	$('#okbtn').unbind('click').click(function() {
        $.modal.close();
    }).show();
}

/**
 * èªå®ä¹å¼¹åºæ¡
 * @method popup
 * @param option
 */
function popup(option) {
    $.modal.close();
	var minHeight = option.minHeight || 140;
	if(option.img==""){
        $('#confirmImg').addClass("hide");
        $(".message").css("margin-left","0px");
    }else{
        $('#confirmImg').removeClass("hide");
        $('#confirmImg').attr('src', option.img);
        $(".message").css("margin-left","60px");
    }
	$('#popTitle').html($.i18n.prop(option.title));
	if (typeof option.msg == 'string') {
		$('.message', 'div#confirm').html($.i18n.prop(option.msg));
	} else {
        var params = [option.msg.msg];
        params.push(option.msg.params);
		$('.message', 'div#confirm').html($.i18n.prop.apply(null, _.flatten(params)));
	}
	if (option.showInput === true){
		$("div#confirm div.promptDiv").removeClass("hide");
		$("div#confirm div.promptDiv input#promptInput").val(option.defaultValue ? option.defaultValue : "");
	} else {
		$("div#confirm div.promptDiv").addClass("hide");
	}

	$('#confirm').modal({
		position : [ "30%" ],
		overlayId : 'confirm-overlay',
		containerId : 'confirm-container',
        escClose: false,
		minHeight : minHeight
	});
}

var _timeoutStack = [];
var _intervalStack = [];
function addTimeout(code, delay) {
	var time = window.setTimeout(code, delay);
	_timeoutStack.push(time);
	return time;
}

function addInterval(code, delay) {
	var time = window.setInterval(code, delay);
	_intervalStack.push(time);
	return time;
}

function clearTimer() {
	clearTimeoutTimer();
	clearIntervalTimer();
}

function clearTimeoutTimer() {
	for ( var i = 0; i < _timeoutStack.length; i++) {
		window.clearTimeout(_timeoutStack[i]);
	}
    _timeoutStack = [];
}

function clearIntervalTimer() {
	for ( var i = 0; i < _intervalStack.length; i++) {
		window.clearInterval(_intervalStack[i]);
	}
	_intervalStack = [];
}
// checkbox start
$(document).ready(function() {
	// checkbox ç»å®æclickäºä»¶ï¼éè¦æå¨å¤çæ¶ï¼éè¦å¢å  manualControl=âtrue"
	$("[manualControl!=true].checkbox").live("click", function(event) {
        var $this = $(this);
        if($this.hasClass('disable')){
            return false;
        }
		var checkbox = $this.find("input:checkbox");
		if (checkbox.attr("checked")) {
			checkbox.removeAttr("checked");
		} else {
			checkbox.attr("checked", "checked");
		}
		checkCheckbox(checkbox);
		event.stopPropagation();
		return true;
	});
	$('input[type="text"][noAction!="true"],input[type="password"][noAction!="true"]').live("focusin", function(event) {
		$(this).addClass("focusIn");
	}).live("focusout", function(event) {
		$(this).removeClass("focusIn");
	});
	
	$('table.colorHoverTable tr').live('mouseover', function(){
		$(this).addClass('trMouseover');
	}).live('mouseout', function(){
		$(this).removeClass('trMouseover');
	});

	$(".form-note .notes-title").live('click', function(){
		var $this = $(this);
		$this.siblings("ul.notes-content:first").slideToggle();
		$this.toggleClass("notes-dot");
	});
});

/**
 * æ£æ¥checkboxç¶æï¼éç»checkbox
 * @method renderCheckbox
 */
function renderCheckbox() {
    var checkboxToggle = $(".checkboxToggle");

    checkboxToggle.each(function() {
		checkBoxesSize($(this));
	});

    var checkboxes = $(".checkbox").not("[class*='checkboxToggle']").find("input:checkbox");
    if(checkboxes.length == 0){
        disableCheckbox(checkboxToggle);
    } else {
        enableCheckbox(checkboxToggle);
    }
    checkboxes.each(function() {
		checkCheckbox($(this));
	});
}

function checkBoxesSize(selectAll) {
	var target = selectAll.attr("target");
	var boxSize = $("#" + target + " .checkbox input:checkbox").length;
	var checkedBoxSize = $("#" + target + " .checkbox input:checkbox:checked").length;
	var checkbox = selectAll.find("input:checkbox");
	if (boxSize != 0 && boxSize == checkedBoxSize) {
		checkbox.attr("checked", "checked");
	} else {
		checkbox.removeAttr("checked");
	}
	checkP(checkbox);
}

function checkSelectAll(selectAll, target) {
    var theCheckbox = $("#" + target + " .checkbox input:checkbox");
	if (selectAll.attr("checked")) {
        theCheckbox.attr("checked", "checked");
	} else {
        theCheckbox.removeAttr("checked");
	}
    theCheckbox.each(function() {
		checkCheckbox($(this));
	});
}

function checkCheckbox(checkbox) {
	if (checkbox.closest("p.checkbox").hasClass("checkboxToggle")) {
		checkSelectAll(checkbox, checkbox.closest("p.checkbox").attr("target"));
	}
	checkP(checkbox);
	checkBoxesSize($("#" + checkbox.attr("target")));
}

function checkP(checkbox) {
	if (checkbox.attr("checked")) {
		checkbox.closest("p.checkbox").addClass("checkbox_selected");
	} else {
		checkbox.closest("p.checkbox").removeClass("checkbox_selected");
	}
}

function removeChecked(id) {
	$("#" + id).removeClass("checkbox_selected").find("input:checkbox").removeAttr("checked");
}

/**
 * ç¦ç¨checkbox
 * @method disableCheckbox
 * @param checkbox
 */
function disableCheckbox(checkbox){
    var chk = checkbox.find("input:checkbox");
    if (chk.attr("checked")) {
        checkbox.addClass('checked_disable');
    } else {
        checkbox.addClass('disable');
    }
}

/**
 * å¯ç¨checkbox
 * @method enableCheckbox
 * @param checkbox
 */
function enableCheckbox(checkbox){
    checkbox.removeClass('disable').removeClass("checked_disable");
}

/**
 * å°è¯disableæcheckboxï¼å¦ælen > 0å°±enable
 * @method tryToDisableCheckAll
 * @param checkbox
 * @param len
 */
function tryToDisableCheckAll(checkbox, len){
    if(len == 0){
        disableCheckbox(checkbox);
    } else {
        enableCheckbox(checkbox);
    }
}
// checkbox end
// encode start
/**
 * GSM7ç¼ç è¡¨
 * @attribute {Array} GSM7_Table
 */
var GSM7_Table = ["000A", "000C", "000D", "0020", "0021", "0022", "0023", "0024", "0025", "0026", "0027", "0028",
    "0029", "002A", "002B", "002C", "002D", "002E", "002F", "0030", "0031", "0032", "0033", "0034", "0035", "0036",
    "0037", "0038", "0039", "003A", "003A", "003B", "003C", "003D", "003E", "003F", "0040", "0041", "0042", "0043",
    "0044", "0045", "0046", "0047", "0048", "0049", "004A", "004B", "004C", "004D", "004E", "004F", "0050", "0051",
    "0052", "0053", "0054", "0055", "0056", "0057", "0058", "0059", "005A", "005B", "005C", "005D", "005E", "005F",
    "0061", "0062", "0063", "0064", "0065", "0066", "0067", "0068", "0069", "006A", "006B", "006C", "006D", "006E",
    "006F", "0070", "0071", "0072", "0073", "0074", "0075", "0076", "0077", "0078", "0079", "007A", "007B", "007C",
    "007D", "007E", "00A0", "00A1", "00A3", "00A4", "00A5", "00A7", "00BF", "00C4", "00C5", "00C6", "00C7", "00C9",
    "00D1", "00D6", "00D8", "00DC", "00DF", "00E0", "00E4", "00E5", "00E6", "00E8", "00E9", "00EC", "00F1", "00F2",
    "00F6", "00F8", "00F9", "00FC", "0393", "0394", "0398", "039B", "039E", "03A0", "03A3", "03A6", "03A8", "03A9",
    "20AC"];

/**
 * GSM7æ©å±ç¼ç è¡¨
    * @attribute {Array} GSM7_Table_Extend
    */
var GSM7_Table_Extend = ["007B", "007D", "005B", "005D", "007E", "005C", "005E", "20AC", "007C"];
    /**
     * è·åç¼ç ç±»å
     * @method getEncodeType
     * @param {String} strMessage å¾ç¼ç å­ç¬¦ä¸²
     * @return {String}
     */
    function getEncodeType(strMessage) {
        var encodeType = "GSM7_default";
        var gsm7_extend_char_len = 0;
        if (!strMessage){
            return {encodeType: encodeType, extendLen: gsm7_extend_char_len};
        }
        for (var i = 0; i < strMessage.length; i++) {
            var charCode = strMessage.charCodeAt(i).toString(16).toUpperCase();
            while (charCode.length != 4) {
                charCode = "0" + charCode;
            }
            if ($.inArray(charCode, GSM7_Table_Extend) != -1) {
                gsm7_extend_char_len++;
            }
            if ($.inArray(charCode, GSM7_Table) == -1) {
                encodeType = "UNICODE";
                gsm7_extend_char_len = 0;
                break;
            }
        }
        return {encodeType: encodeType, extendLen: gsm7_extend_char_len};
}

/**
 * unicodeç¼ç 
 * @method encodeMessage
 * @param textString {String}
 * @return {String} 
 */
function encodeMessage(textString) {
	var haut = 0;
	var result = '';
    if (!textString) return result;
	for ( var i = 0; i < textString.length; i++) {
		var b = textString.charCodeAt(i);
		if (haut != 0) {
			if (0xDC00 <= b && b <= 0xDFFF) {
				result += dec2hex(0x10000 + ((haut - 0xD800) << 10) + (b - 0xDC00));
				haut = 0;
				continue;
			} else {
				haut = 0;
			}
		}
		if (0xD800 <= b && b <= 0xDBFF) {
			haut = b;
		} else {
			cp = dec2hex(b);
			while (cp.length < 4) {
				cp = '0' + cp;
			}
			result += cp;
		}
	}
	return result;
}
var specialChars = ['000D','000A','0009','0000'];
var specialCharsIgnoreWrap = ['0009','0000'];
/**
 * unicodeè§£ç 
 * @method decodeMessage
 * @param str
 * @param ignoreWrap {Boolean} å¿½ç¥åè½¦æ¢è¡
 * @return any 
 */
function decodeMessage(str, ignoreWrap) {
    if (!str) return "";
    var specials = specialCharsIgnoreWrap;//ignoreWrap ? specialCharsIgnoreWrap : specialChars;
    return str.replace(/([A-Fa-f0-9]{1,4})/g, function (matchstr, parens) {
        if($.inArray(parens, specials) == -1){
            return hex2char(parens);
        } else {
            return '';
        }
    });
}
function dec2hex(textString) {
	return (textString + 0).toString(16).toUpperCase();
}
function hex2char(hex) {
	var result = '';
	var n = parseInt(hex, 16);
	if (n <= 0xFFFF) {
		result += String.fromCharCode(n);
	} else if (n <= 0x10FFFF) {
		n -= 0x10000;
		result += String.fromCharCode(0xD800 | (n >> 10)) + String.fromCharCode(0xDC00 | (n & 0x3FF));
	}
	return result;
}

/**
 * å»é¤ç¼ç ä¸­çåè½¦æ¢è¡ç­ç¹æ®å­ç¬¦
 * @method escapeMessage
 * @param msg
 * @return any 
 */
function escapeMessage(msg) {
	//msg = msg.toUpperCase().replace(/000D|000A|0009|0000/g, "");
	return msg;
}
/**
 * è§£ææ¶é´å­ç¬¦ä¸²
 * @method parseTime
 * @param date {String} æ¶é´å­ç¬¦ä¸²
 * @return String
 * @example
 * "12;05;22;14;40;08"
 * OR
 * "12,05,22,14,40,08"
 * OR
 * "12;05;22;14;40;08;+8"
 * OR
 * "12,05,22,14,40,08;+8"
 */
function parseTime(date) {
	if(date.indexOf("+") > -1){
		date = date.substring(0, date.lastIndexOf("+"));
	}
	var dateArr;
	if(date.indexOf(",") > -1){
		dateArr = date.split(",");
	}else{
		dateArr = date.split(";");
	}
	if (dateArr.length == 0) {
		return "";
	} else {
		var time = dateArr[0] + "-" + dateArr[1] + "-" + dateArr[2] + " " + leftInsert(dateArr[3], 2, '0') + ":" + leftInsert(dateArr[4], 2, '0') + ":"
				+ leftInsert(dateArr[5], 2, '0');
		return time;
	}
}

function transTime(data){
    var dateArr = data.split(",");
    if (dateArr.length == 0 || ("," + data + ",").indexOf(",,") != -1) {
        return "";
    } else {
        var time = dateArr[0] + "-" + dateArr[1] + "-" + dateArr[2] + " " + leftInsert(dateArr[3], 2, '0') + ":" + leftInsert(dateArr[4], 2, '0') + ":"
            + leftInsert(dateArr[5], 2, '0');
        return time;
    }

}
// encode end

function getSmsCount(str){
    var encodeType = getEncodeType(str);
    var len = str.length,
        gsm7 = encodeType.encodeType != "UNICODE",
        needChunking = false,
        chunkSize = 0;
    if(gsm7){
        needChunking = (len + encodeType.extendLen) > 160;
        chunkSize = 153;
    }else{
        needChunking = len > 70;
        chunkSize = 67;
    }
    if (needChunking){
        return Math.ceil((len + encodeType.extendLen) / chunkSize);
    } else {
        return 1;
    }
}

function getInsertPos(textbox) {
    var iPos = 0;
    if (textbox.selectionStart || textbox.selectionStart == "0") {
        iPos = textbox.selectionStart;
    } else if (document.selection) {
        textbox.focus();
        var range = document.selection.createRange();
        var rangeCopy = range.duplicate();
        rangeCopy.moveToElementText(textbox);
        while (range.compareEndPoints("StartToStart", rangeCopy) > 0) {
            range.moveStart("character", -1);
            iPos++;
        }
    }
    return iPos;
}
function setInsertPos(textbox, iPos) {
    textbox.focus();
    if (textbox.selectionStart || textbox.selectionStart == "0") {
        textbox.selectionStart = iPos;
        textbox.selectionEnd = iPos;
    } else if (document.selection) {
        var range = textbox.createTextRange();
        range.moveStart("character", iPos);
        range.collapse(true);
        range.select();
    }
}

function isIntNum(input, num) {
	for (var i = 1; i < 6; i++) {
		if (input == i * num) {
			return true;
		}
	}
	return false;
}
/**
 * è®¡ç®é¿åº¦
 * 
 * @method updateLength
 * @param {String} sms_content ç­ä¿¡åå®¹
 */
function updateLength(sms_content) {
    var length = 0;
    var tmpchr;
    var index = 0;
    for (var i = 0; i < sms_content.length; i++) {
        tmpchr = sms_content.charAt(i);
        length = length + 1;
        if ((tmpchr == "[") || (tmpchr == "]") || (tmpchr == "{") || (tmpchr == "}") || (tmpchr == "|")
            || (tmpchr == "\\") || (tmpchr == "^") || (tmpchr == "~") || (tmpchr == "â¬")) {
            length = length + 1;
        }
        index = i;
        if (length == 765) {
            break;
        }
        if (length > 765) {
            index = i - 1;
            length = length - 2;
            break;
        }
    }
    return {index:index, length:length};
}

/**
 * è½¬ååè®®
 * //from 4.0
 * @method transProtocol
 * @return {*}
 */
function transProtocol(proto) {
    var type = "NONE";
    if ("1" == proto)
        type = "TCP";
    else if ("2" == proto)
        type = "UDP";
    else if ("3" == proto)
        type = "TCP+UDP";
    else if ("4" == proto)
        type = "ICMP";
    else if ("5" == proto)
        type = "NONE";
    return type;
}

function transProtocolValue(proto) {
    switch(proto) {
        case "TCP":
        case "UDP":
        case "ICMP":
            return proto;
        case "TCP&UDP":
            return "TCP+UDP";
        case "None":
        default:
            return "NONE";
    }
}

/**
 * æ£æ¥æ°å¼èå´
 * @method checkRange
 */
function checkRange(str, min, max) {
    var intVal = parseInt(str, 10);
    return !(intVal > max || intVal < min);
}

/**
 * æä»¶ç±»åæ å°ï¼ç°å¨æ¯æï¼é³é¢ï¼è§é¢ï¼å¾çï¼æ®éæä»¶
 * @attribute {JSON} extMap
 */
var extMap = {
	mp3 : [ "mp3", "wma", "wav" ],
	film : [ "mp4", "avi", "rm", "rmvb", "3gp", "mpeg" ],
	picture : [ "jpeg", "jpg", "gif", "bmp", "png" ],
	pdf : ['pdf'],
	rar : ['rar', '7z', 'zip', 'gzip', 'gz', 'tar'],
	doc : ['doc', 'docx'],
	ppt : ['ppt', 'pptx'],
	xls : ['xls', 'xlsx'],
	xml : ['xml']
};

/**
 * è·åæä»¶ç±»å
 * @method getFileType
 * @param {String} fileName å¸¦æ©å±åçæä»¶å
 */
function getFileType(fileName) {
	var ext = fileName.split('.').pop().toLowerCase();
	for (type in extMap) {
		if ($.inArray(ext, extMap[type]) != -1) {
			return type;
		}
	}
	return "file";
}

function transUnixTime(millisecond) {
    var time = new Date(parseInt(millisecond, 10));
    var year = time.getFullYear();
    var month = leftPad(time.getMonth() + 1, 2, "0");
    var date = leftPad(time.getDate(), 2, "0");
    var hour = leftPad(time.getHours(), 2, "0");
    var minute = leftPad(time.getMinutes(), 2, "0");
    var second = leftPad(time.getSeconds(), 2, "0");

    //2012-08-08 08:08:08
    return  year + "-" + month + "-" + date + " " + hour + ":" + minute + ":" + second;
}

function leftPad(value, length, placeholder) {
    var len = value.toString().length;
    for (; len < length; len++) {
        value = placeholder + value;
    }
    return value;
};

/**
 * å°çµè¯å·ç ä¸­ç+å·è½¬æ¢æ_.jqueryéæ©å¨ä¸­ä¸è½æ+å·
 * @method convertNumberToId
 * @param number {String} çµè¯å·ç 
 * @return {String}
 */
function convertNumberToId(number){
	return number.replace(/[\+\*#]/g, '_');
}

/**
 * è·åå·ç æ«8ä½
 * @method getLast8Number
 * @param number {String} çµè¯å·ç 
 * @return
 */
function getLast8Number(number){
	if(number.length > 8){
		return convertNumberToId(number.substring(number.length - 8, number.length));
	}
	return convertNumberToId(number);
}

/**
 * è°æ´ie8ä»¥ä¸çtableé«åº¦
 * @method fixTableHeight
 */
function fixTableHeight() {
    if($.browser.msie) {
        var heightTimer = setInterval(function() {
            var $table = $(".fixTableScroll")[0];
            if($table) {
                var scrollHeight = $table.scrollHeight;
                if(scrollHeight != 0) {
                    $table.style.height = scrollHeight + 20;
					window.clearInterval(heightTimer);
                }
            }
            else {
                //å¿«éåæ¢èåéè¦æ¸é¤å®æ¶å¨
				window.clearInterval(heightTimer);
            }
        }, 300);
    }
}

function refreshTableHeight() {
    if($.browser.msie) {
        $(".fixTableScroll")[0].style.height = $(".fixTableScroll .ko-grid-container")[0].scrollHeight + 35;
    }
}

/**
 * éåº¦åæµéç¿»è¯
 * 
 * @method transUnit
 * @param {Number}
 *            data éåº¦å¼
 * @param {Boolean}
 *            isSpeed æ¯å¦æ¯ç¿»è¯éåº¦
 */
function transUnit(data, isSpeed) {
	var result = getDisplayVolume(data);
	if (result == ""){
		result = "0Bytes";
	}
	if (isSpeed){
		result += "/s";
	}
	return result;
}

/**
 * ç¿»è¯èç½æ¶é¿
 * 
 * @method transSecond2Time
 * @param {Number}
 *            secs èç½æ¶é´ï¼ç§ï¼
 */
function transSecond2Time(secs) {
	var isNegative = false;
	if(secs < 0){
		isNegative = true;
		secs = 0 - secs;
	}
	var hour = Math.floor(secs / 3600);
	secs = secs % 3600;
	var minu = Math.floor(secs / 60);
	secs = secs % 60;
	return (isNegative ? '-' : '') + leftInsert(hour, 2, '0') + ":" + leftInsert(minu, 2, '0') + ":" + leftInsert(secs, 2, '0');
}

/**
 * é¿åº¦ä¸è¶³æ¶ï¼å·¦ä¾§æå¥ç¹å®å­ç¬¦
 * @param {String} value
 * @param {Integer} length
 * @param {String} placeholder
 * @return {String}
 */
function leftInsert(value, length, placeholder){
    var len = value.toString().length;
    for (; len < length; len++) {
        value = placeholder + value;
    }
    return value;
}

/**
 * æä»¶å¤§å°æ°å¼æ¢ç®ï¼å¹¶çææ¾ç¤ºæå­éå¸¦åä½
 * @method getDisplayVolume
 * @param {Integer} volume å®¹éæ°å¼ï¼åä½B
 */
function getDisplayVolume(volume) {
	volume = parseInt(volume, 10);
	if (volume == "" || volume == "0") {
		return "";
	}
	var needReverse = false;
	if(volume < 0){
		needReverse = true;
		volume = 0 - volume;
	}
	var numberOfBytesInOneB = 1;
	var numberOfBytesInOneKB = numberOfBytesInOneB * 1024;
	var numberOfBytesInOneMB = numberOfBytesInOneKB * 1024;
	var numberOfBytesInOneGB = numberOfBytesInOneMB * 1024;
	var numberOfBytesInOneTB = numberOfBytesInOneGB * 1024;

	var labelForOneB = 'Bytes';
	var labelForOneKB = 'KB';
	var labelForOneMB = 'MB';
	var labelForOneGB = 'GB';
	var labelForOneTB = 'TB';

	var vol = volume / numberOfBytesInOneTB;
	var displayString = roundToTwoDecimalNumber(vol) + labelForOneTB;
	if (vol < 0.5) {
		vol = volume / numberOfBytesInOneGB;
		displayString = roundToTwoDecimalNumber(vol) + labelForOneGB;
	
		if (vol < 0.5) {
			vol = volume / numberOfBytesInOneMB;
			displayString = roundToTwoDecimalNumber(vol) + labelForOneMB;
	
			if (vol < 0.5) {
				vol = volume / numberOfBytesInOneKB;
				displayString = roundToTwoDecimalNumber(vol) + labelForOneKB;
	
				if (vol < 0.5) {
					vol = volume;
					displayString = roundToTwoDecimalNumber(vol) + labelForOneB;
				}
			}
		}
	}
	if(needReverse){
		displayString = "-" + displayString;
	}
	return displayString;
}

/**
 * å°æ°å­ä¿çä¸¤ä½å°æ°
 * @method roundToTwoDecimalNumber
 * @param {Integer} num æµ®ç¹æ°å¼
 */
function roundToTwoDecimalNumber(num) {
	return Math.round(num * 100) / 100;
}

/**
 * HTMLç¼ç è½¬æ¢
 * @method HTMLEncode
 * @param {String} html å¾ç¼ç åå®¹
 */
function HTMLEncode(html) {
    var temp = document.createElement("div");
    (temp.textContent != null) ? (temp.textContent = html) : (temp.innerText = html);
    var output = temp.innerHTML;
    output = output.replace(new RegExp(" ", "gm"), "&nbsp;");
    temp = null;
    return output;
}

/**
 * HTMLè§£ç è½¬æ¢
 * @method HTMLDecode
 * @param {String} text å¾è§£ç åå®¹
 */
function HTMLDecode(text) {
    var temp = document.createElement("div");
    temp.innerHTML = text;
    var output = temp.innerText || temp.textContent;
    output = output.replace(new RegExp("&nbsp;", "gm"), " ");
    temp = null;
    return output;
}

/**
 * è·åä¸¤ä½ç²¾åº¦çç¾åæ¯ï¼é»è®¤ä¸¤ä½ç²¾åº¦
 * @method getPercent
 * @param {Number} numerator åå­
 * @param {Number} denominator åæ¯
 * @param {Integer} accuracy ç²¾åº¦
 */
function getPercent(numerator, denominator, accuracy){
	
	if(accuracy){
		accuracy = accuracy * 10;
	} else {
		accuracy = 100;
	}
	return roundToTwoDecimalNumber(numerator / denominator * accuracy) + "%";
}

/**
 * æ£æ¥æ¯å¦èç½
 * "ppp_connected" || "ipv6_connected" || "ipv4_ipv6_connected"
 * @method checkConnectedStatus
 */
function checkConnectedStatus(currentConnStatus) {
    return currentConnStatus == "ppp_connected" || currentConnStatus == "ipv6_connected" || currentConnStatus == "ipv4_ipv6_connected";
}

function checkConnectingStatus(currentConnStatus) {
    return currentConnStatus == "ppp_connecting" || currentConnStatus == "ipv6_connecting" || currentConnStatus == "ipv4_ipv6_connecting";
}

function checkDisconnectingStatus(currentConnStatus) {
    return currentConnStatus == "ppp_disconnecting" || currentConnStatus == "ipv6_disconnecting" || currentConnStatus == "ipv4_ipv6_disconnecting";
}

function checkDisconnectedStatus(currentConnStatus) {
    return currentConnStatus == "ppp_disconnected" || currentConnStatus == "ipv6_disconnected" || currentConnStatus == "ipv4_ipv6_disconnected";
}
/**
 * ç¦ç¨æé®
 * @method disableBtn
 */
function disableBtn(ele){
	ele.attr("disabled", "disabled").removeClass("focusIn").addClass("disabled");
};

/**
 * æé®å¯ç¨
 * @method enableBtn
 */
function enableBtn(ele){
	ele.removeAttr("disabled").removeClass("disabled");
};

function replaceSpaceWithNbsp(str){
    return str.replace(/ /g,'&nbsp;');
}
function syncSelectAndChosen(select, choices){
    var choicesNums = getSelectValFromChosen(choices);
    select.val(choicesNums);
    return choicesNums;
}
function getSelectValFromChosen(choices){
    var choicesNums = [];
    $.each(choices, function(i,n){
        var arr = $(n).text().split('/');
        choicesNums.push(arr[arr.length - 1]);
    });
    return choicesNums;
}<form id="wifi_advance_form">
<div class="form-body">
	<div class="form-title" trans="wifi_advance"></div>
	<div class="content">
		<div class="row-fluid" data-bind="visible: hasWifiBand()">
			<label class="span4 side-right" for="band_select" trans="network_band_selection"></label>
            <div class="span8">
                <select name="band_select" id="band_select" data-bind="options: bands, value: selectedBand, optionsText: 'text', optionsValue: 'value', event:{ change: bandChangeHandler}" required="true"></select>
            </div>
		</div>
		<div class="row-fluid">
			<label class="span4 side-right" for="mode" trans="network_mode"></label>
            <div class="span8">
                <select name="mode" transid="network_mode_select" id="mode" data-bind="options: modes, value: selectedMode, optionsText: transOption('network_mode_select'), optionsValue: 'value', event:{ change: modeChangeHandler}" required="true" style="display:none"></select>
				<select name="mode" transid="network_modes_band_select" id="modeFor5HZ" data-bind="options: modes, value: selectedMode, optionsText: transOption('network_modes_band_select'), optionsValue: 'value', event:{ change: modeChangeHandler}" required="true" style="display:none"></select>
            </div>
		</div>
		<div class="row-fluid" data-bind="visible: hasBandwidth()">
			<label class="span4 side-right" for="wifi_channel_bandwidth" trans="wifi_channel_bandwidth"></label>
            <div class="span8">
                <select name="channelBandwidth" id="wifi_channel_bandwidth" data-bind="options: channelBandwidths, value: selectedChannelBandwidth, optionsText: 'text', optionsValue: 'value'" required="true"></select>
            </div>
		</div>
		<div class="row-fluid">
			<label class="span4 side-right" for="country" trans="country_region_code"></label>
            <div class="span8">
                <select name="country" id="country" data-bind="options: countries, value: selectedCountry, optionsText: 'text', optionsValue: 'value', event:{ change: countryChangeHandler}"></select>
             </div>
		</div>
		<div class="row-fluid">
			<label class="span4 side-right" for="channel" trans="frequency_channel"></label>
            <div class="span8">
                <select name="channel" id="channel" transid="frequency_channel" data-bind="options: channels, value: selectedChannel, optionsText: transOption('frequency_channel', true), optionsValue: 'value'"></select>
            </div>
		</div>
		<div class="row-fluid" data-bind="visible: hasWifiBand() == false">
			<label class="span4 side-right" for="rate" trans="rate"></label>
            <div class="span8">
                <select name="rate" id="rate" transid="rate" data-bind="options: rates, value: selectedRate, optionsText: transOption('rate'), optionsValue: 'value'"></select>
            </div>
		</div>
	</div>
	<div class="form-buttons">
		<input type="submit" class="btn-1 " trans="apply"/>
	</div>
	<div class="form-note">
        <div class="notes-title">&nbsp;</div>
        <ul class="notes-content">
            <li trans="wifi_advanced_note_whole_page"></li>
            <li trans="wifi_advanced_note_band_selection" data-bind="visible: hasWifiBand()"></li>
            <li trans="wifi_advanced_note_network_mode"></li>
            <li trans="wifi_advanced_note_country_code"></li>
            <li trans="wifi_advanced_note_frequency"></li>
            <li trans="wifi_advanced_note_apply"></li>
         </ul>
	</div>
</div>
</form>/**
 * wifi advance æ¨¡å
 * @module wifi advance
 * @class wifi advance
 */
define([ 'underscore', 'jquery', 'knockout', 'config/config', 'service' ], function(_, $, ko, config, service) {

	/**
	 * éçè¡¨
	 * @attribute {Array} modeRate 
	 */
	var modeRate = [0, 
	                1, 2, 5.5, 6, 6.5, 
	                9, 11, 12, 13, 18, 
	                19.5, 24, 26, 36, 39, 
	                48, 52, 54, 58.5, 65
	                ];

	/**
	 * å é¤éå¤çéç
	 * @method unionArr
	 * @param {Array} arr éç
	 */
	function unionArr(arr) {
		var rates = [], result = [];
		for ( var i = 0; i < arr.length; i++) {
			for ( var j = 0; j < arr[i].length; j++) {
				if (ko.utils.arrayIndexOf(rates, arr[i][j]) == -1) {
					rates.push(arr[i][j]);
					result.push({index: arr[i][j], rate: modeRate[arr[i][j]]});
				}
			}
		}
		result.sort(function(a, b) {
			return a.rate - b.rate;
		});
		return result;

	}

	/**
	 * æ ¹æ®æ¨¡å¼çæOptions
	 * @method rateOption
	 * @param {String} mode æ¨¡å¼ mode in 0, 1, 2, 3, 4
	 */
	function rateOption(mode) {
		var rates = [];
		var modeB = [ 0, 1, 2, 3, 7 ];
		var modeG = [ 0, 4, 6, 8, 10, 12, 14, 16, 18 ];
		var modeN = [ 0, 5, 9, 11, 13, 15, 17, 19, 20 ];

		switch (mode) {
		case '0':
			rates.push(modeB);
			break;
		case '1':
			rates.push(modeG);
			break;
		case '2':
			rates.push(modeN);
			break;
		case '3':
			rates.push(modeB);
			rates.push(modeG);
			break;
		case '4':
			rates.push(modeB);
			rates.push(modeG);
			rates.push(modeN);
			break;
		default:
			rates.push(modeN);
			break;
		}
		var result = unionArr(rates);
		return drawRateOption(result);
	}

	function drawRateOption(data) {
		var opts = [];
		for ( var i = 0; i < data.length; i++) {
			var rate = data[i].rate == 0 ? "Auto" : data[i].rate + " Mbps";
			opts.push(new Option(rate, data[i].index));
		}
		return opts;
	}

	/**
	 * æ ¹æ®å½å®¶çæç¸åºçé¢é
	 * @method channelOption
	 * @param {String} country å½å®¶ç 
	 */
	function channelOption(country) {
		var options = [ new Option('Auto', '0') ];
		var type = getCountryType(country) + '';
		switch (type) {
		case '1':
			addChannelOption(options, 2407, 11);
			break;
		case '3':
			addChannelOption(options, 2407, 11);
			addChannelOption(options, 2462, 2);
			break;
		case '7':
			addChannelOption(options, 2307, 13);
			addChannelOption(options, 2407, 11);
			addChannelOption(options, 2462, 2);
			break;
		default:
			addChannelOption(options, 2407, 11);
		}
		return options;
	}

    function channelOption5g(country){
        for(key in config.countryCode_5g){
            var item = config.countryCode_5g[key];
            if($.inArray(country, item.codes) != -1){
                return addChannelOption5g(item.channels);
            }
        }
        return [new Option('Auto', '0')];
    }

    function addChannelOption(options, start, count) {
        for ( var i = 1; i <= count; i++) {
            var txt = start + i * 5 + "MHz (Channel " + options.length + ")";
            options.push(new Option(txt, options.length + "_" + (start + i * 5)));
        }
    }

    function addChannelOption5g(channels) {
        var options = [new Option('Auto', '0')];
        for ( var i = 0; i < channels.length; i++) {
            var channel = channels[i];
            var mhz = 5000 + channel * 5;
            var txt = mhz + "MHz (Channel " + channel + ")";
            options.push(new Option(txt, channel + "_" + (mhz)));
        }
        return options;
    }
	
	function getBandOptions(){
		var options = [];
		options.push(new Option('2.4GHz', 'b'));
		options.push(new Option('5GHz', 'a'));
		return options;
	}
	
	function getChannelBandwidthsOptions(isSupport40){
		var options = [];
		if(isSupport40){
			options.push(new Option('20MHz', '0'));
			options.push(new Option('20MHz/40MHz', '1'));
		}else{
			options.push(new Option('20MHz', '0'));
		}
		return options;
	}
	
	/**
	 * è·åå½å®¶ç±»å
	 * @method getCountryType
	 * @param {String} country å½å®¶ç 
	 * @return {String} ç±»å
	 */
	function getCountryType(country) {
		var countryCode = config.countryCode;
		var type = '';
		for (key in countryCode) {
			var codes = countryCode[key];
			if ($.inArray(country, codes) != -1) {
				type = key;
				break;
			}
		}
		var typeCode = config.countryCodeType[type];
		return typeCode ? typeCode : "0";
	}

	function countryOption(is5G) {
		var countries = is5G ? config.countries_5g:config.countries;
		var options = [];
        for(key in countries){
            options.push(new Option(countries[key], key));
        }
        options = _.sortBy(options, function(opt){
            return opt.text;
        });
		return options;
	}

	function getWifiAdvance() {
		return service.getWifiAdvance();
	}

    function getWpsInfo() {
        return service.getWpsInfo();
    }
    
    function getModeOption(wifiBand){
    	var modes = config.NETWORK_MODES;
		 $("#mode").show();
		 $("#modeFor5HZ").hide();
    	if(wifiBand == 'a'){
    		modes = config.NETWORK_MODES_BAND;
		$("#modeFor5HZ").show();
		$("#mode").hide();
    	}
		var modeArr = [];
		for ( var i = 0; i < modes.length; i++) {
			modeArr.push(new Option(modes[i].name, modes[i].value));
		}
		return modeArr;
    }
    
    function getRateSelectedVal(rate, rates){
    	for(var i = 0; i < rates.length; i++){
    		var opt = rates[i];
    		if(opt.text == rate + " Mbps"){
    			return opt.value;
    		}
    	}
		return '0';
    }

	function getChannelSelectedVal(channel, channels){
		for(var i = 0; i < channels.length; i++){
			var opt = $(channels[i]);
			if(opt.val().split("_")[0] == channel){
				return opt.val();
			}
		}
		return '0';
	}

	/**
	 * WifiAdvanceViewModel
	 * @class WifiBasicViewModel
	 */
	function WifiAdvanceViewModel() {
		// Data
		var self = this;
		var wifiInfo = getWifiAdvance();
		self.modes = ko.observableArray(getModeOption(wifiInfo.wifiBand));
		self.bands = ko.observableArray(getBandOptions());
		
		var countryOpts = countryOption(wifiInfo.wifiBand == 'a');
		self.countries = ko.observableArray(countryOpts);
		self.channels = ko.observableArray(wifiInfo.wifiBand == 'a' ? channelOption5g(wifiInfo.countryCode) : channelOption(wifiInfo.countryCode));
		self.rates = ko.observableArray(rateOption(wifiInfo.mode));
		self.hasWifiBand = ko.observable(config.WIFI_BAND_SUPPORT);
		self.hasBandwidth = ko.observable(config.WIFI_BANDWIDTH_SUPPORT);
		
		// Init data
		self.selectedBand = ko.observable(wifiInfo.wifiBand);//5:a, 2.5:b
		self.selectedChannelBandwidth = ko.observable(wifiInfo.bandwidth);//5:a, 2.5:b
		self.selectedMode = ko.observable(wifiInfo.mode);
		self.selectedCountry = ko.observable(wifiInfo.countryCode.toUpperCase());
		self.selectedChannel = ko.observable(getChannelSelectedVal(wifiInfo.channel, self.channels()));
		self.selectedRate = ko.observable(getRateSelectedVal(wifiInfo.rate, self.rates()));
		
		self.channelBandwidths = ko.computed(function(){
			if(self.selectedMode() == '2' || self.selectedMode() == '4'){
				return getChannelBandwidthsOptions(true);
			} else {
				return getChannelBandwidthsOptions(false);
			}
		});
		
		wifiInfo = $.extend(wifiInfo, self);

		// //////////////////////Event Handler
		
		self.bandChangeHandler = function(){
			if(self.selectedBand() == 'a'){ //5g
				//802.11a onlyï¼802.11n onlyï¼802.11a/n 
				self.modes(getModeOption(self.selectedBand()));
                self.countries(countryOption(true));
			} else { // 2.4g
				//802.11 n onlyï¼802.11 b/g/n
				self.modes(getModeOption(self.selectedBand()));
                self.countries(countryOption(false));
			}
            self.selectedCountry('0');
            self.channels(self.generateChannelOption());
            self.selectedChannel('0');
		};
		
		/**
		 * æ¨¡å¼åæ¢äºä»¶å¤ç
		 * @event modeChangeHandler
		 */
		self.modeChangeHandler = function(data, event) {
			var opts = rateOption(self.selectedMode());
			self.rates(opts);
			self.selectedRate('0');
		};

		/**
		 * å½å®¶åæ¢äºä»¶å¤ç
		 * @event countryChangeHandler
		 */
		self.countryChangeHandler = function(data, event) {
			var opts = self.generateChannelOption();//channelOption(self.selectedCountry());
			self.channels(opts);
			self.selectedChannel('0');
		};

        self.generateChannelOption = function(){
            if(self.selectedBand() == 'a'){
                return channelOption5g(self.selectedCountry());
            } else {
                return channelOption(self.selectedCountry());
            }
        };

		/**
		 * ä¿å­ä¿®æ¹
		 * @event save
		 */
		self.save = function() {
            var status = getWpsInfo();
            if(status.wpsFlag == '1') {
                showAlert('wps_on_info');
                return;
            }
            if(status.radioFlag == '0') {
                showAlert('wps_wifi_off');
                return;
            }
            var selectedRateTxt = $("#rate option:selected").text();
            var rateVal = null;
            if(selectedRateTxt == $.i18n.prop('rate_0')){
            	rateVal = 0;
            }else{
            	rateVal = $.trim(selectedRateTxt.replace('Mbps', ''));
            }
			showLoading();
			var params = {};
			params.mode = self.selectedMode();
			params.countryCode = self.selectedCountry();
			var selectedChannel = self.selectedChannel();
			params.channel = selectedChannel == '0' ? '0' : selectedChannel.split("_")[0];
			params.rate = rateVal;//self.selectedRate();
			params.wifiBand = self.selectedBand();
			if(config.WIFI_BANDWIDTH_SUPPORT){
				params.bandwidth = self.selectedChannelBandwidth();
			}
			service.setWifiAdvance(params, function(result) {
				if (result.result == "success") {
					successOverlay();
				} else {
					errorOverlay();
				}
			});
			
		};
	}

	/**
	 * view modelåå§å
	 * @method init
	 */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new WifiAdvanceViewModel();
		ko.applyBindings(vm, container[0]);

        function checkWifiStatus() {
            var info = service.getAPStationBasic();
            if (info.ap_station_enable == "1") {
                $('#wifi_advance_form :input').each(function () {
                    $(this).attr("disabled", true);
                });
            } else {
                $('#wifi_advance_form :input').each(function () {
                    $(this).attr("disabled", false);
                });
            }
        }
        if(config.AP_STATION_SUPPORT){
            checkWifiStatus();
        }
        //clearTimer();
        //addInterval(checkWifiStatus, 1000);

		$('#wifi_advance_form').validate({
			submitHandler : function() {
				vm.save();
			}
		});
	}

	return {
		init : init
	};
});<div class="form-body">
    <div class="form-title" trans='wifi_basic'></div>
    <form id="frmMultiSSID" data-bind="visible:hasMultiSSID">
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" trans="multi_ssid_enable"></label>
                <div class="span8">
                    <input type="radio" name="multi_ssid_switch" id="multi_ssid_switch_enable" data-bind="checked: multi_ssid_enable" value="1"/>
                    <label for="multi_ssid_switch_enable" trans="enable"></label>
                    <input type="radio" name="multi_ssid_switch" id="multi_ssid_switch_disable" data-bind="checked: multi_ssid_enable" value="0"/>
                    <label for="multi_ssid_switch_disable" trans="disable"></label>
                </div>
            </div>
            <div class="form-buttons">
                <input id="mutissid_apply" type="submit" class="btn-1 " trans='apply'/>
                <input id="multissid_cancel" type="button" class="btn-1 " data-bind='click: function(){clear("switch");}' trans='cancel'/>
            </div>
        </div>
    </form>
	<form id="frmWifiSwitch" data-bind="visible: hasWifiSwitch">
		<div class="row-fluid">
            <label class="span4 side-right" trans="wifi_switch"></label>
            <div class="span8">
                <input type="radio" name="wifi_switch" id="wifi_switch_enable"
                        data-bind="checked: wifi_enable" value="1"/>
                <label for="wifi_switch_enable" trans="enable"></label>
                <input type="radio" name="wifi_switch" id="wifi_switch_disable"
                    data-bind="checked: wifi_enable" value="0"/>
                <label for="wifi_switch_disable" trans="disable"></label>
            </div>
	    </div>
		<div class="form-buttons">
            <input id="wifiswitch_apply" type="submit" class="btn-1 " trans='apply'/>
            <input id="wifiswitch_cancel" type="button" class="btn-1 " data-bind='click: function(){clear("wifiswitch");}' trans='cancel'/>
        </div>
	</form>
    <form id="frmSSID1">
        <div class="form-title" trans="multi_ssid_1" data-bind="visible:hasMultiSSID"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" for="ssid" trans="network_name"></label>
                <div class="span8">
                    <input type="text" name="ssid" data-bind="value: ssid" id="ssid" class="required" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="broadcast_network_name"></label>
                <div class="span8">
                    <input type="radio" name="broadcast" id="broadcastEnable" data-bind="checked: broadcast" value="0"/>
                    <label for="broadcastEnable" trans="enable"></label>
                    <input type="radio" name="broadcast" id="broadcastDisable" data-bind="checked: broadcast" value="1"/>
                    <label for="broadcastDisable" trans="disable"></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" for='mode' trans='security_mode'></label>
                <div class="span8">
                    <select transid='security_mode' id="mode" data-bind="options: modes, value: selectedMode, optionsText: transOption('security_mode'), optionsValue: 'value'"></select>
                </div>
            </div>
            <div class="row-fluid" data-bind='visible: selectedMode() != "OPEN"'>
                <label class="span4 side-right" for='pass' trans='pass_phrase'></label>
                <div class="span8">
                    <input id='pass' name="pass" type="password" data-bind="value: passPhrase,visible:!showPassword()" class="required margintop5" minlength='8' maxlength='63'/>
                    <input id='passShow' name="passShow" type="text" data-bind="value: passPhrase,visible:showPassword()" class="required margintop5" minlength='8' maxlength='63'/>
                </div>
            </div>
            <div class="row-fluid" data-bind='visible: selectedMode() != "OPEN"'>
                <label class="span4 side-right"></label>
                <div class="span8">
                    <p class="checkbox floatleft margintop10 marginright5" data-bind="css:{'checkbox_selected': showPassword()}, click: showPasswordHandler" manualControl="true">
                        <input id="showPassword" type="checkbox" data-bind="checked:showPassword"/>
                    </p>
                    <label class="floatleft lineheight25 margintop5" trans="display_password"/>
                    <div  id="lblShowPassword" class="clear"></div>
                </div>
            </div>
            <div class="row-fluid" data-bind="visible: supportQrCode">
                <label class="span4 side-right"></label>
                <div class="span8">
                    <img id="qrcode_ssid1" src="" data-bind="attr: {src: qrcode_ssid1}" width="128" alt=""/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" for="maxStation" trans="max_station_number"></label>
                <div class="span8">
                    <select name="maxStation" id="maxStation" data-bind="options: maxStations, value: selectedStation, optionsText: 'text', optionsValue: 'value'"></select>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input id="ssid1_apply" type="submit" class="btn-1 " trans='apply'/>
            <input id="ssid1_cancel" type="button" class="btn-1 " data-bind='click: function(){clear("ssid1");}' trans='cancel'/>
        </div>
    </form>
    <form id="frmSSID2" data-bind="visible:origin_multi_ssid_enable=='1'&& hasMultiSSID">
        <div class="form-title" trans="multi_ssid_2"></div>
        <div class="content">
            <div class="row-fluid">
                <label class="span4 side-right" for="m_ssid" trans="network_name"></label>
                <div class="span8">
                    <input type="text" name="m_ssid" data-bind="value: m_ssid" id="m_ssid" class="required" maxlength="32"/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" trans="broadcast_network_name"></label>
                <div class="span8">
                    <input type="radio" name="m_broadcast" id="m_broadcastEnable" data-bind="checked: m_broadcast" value="0"/>
                    <label for="m_broadcastEnable" trans="enable"></label>
                    <input type="radio" name="m_broadcast" id="m_broadcastDisable" data-bind="checked: m_broadcast" value="1"/>
                    <label for="m_broadcastDisable" trans="disable"></label>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" for='m_mode' trans='security_mode'></label>
                <div class="span8">
                    <select transid='security_mode' id="m_mode" data-bind="options: m_modes, value: m_selectedMode, optionsText: transOption('security_mode'), optionsValue: 'value'"></select>
                </div>
            </div>
            <div class="row-fluid" data-bind='visible: m_selectedMode() != "OPEN"'>
                <label class="span4 side-right" for='m_pass' trans='pass_phrase'></label>
                <div class="span8">
                    <input id='m_pass' name="m_pass" type="password" data-bind="value: m_passPhrase,visible:!m_showPassword()" class="required margintop5" minlength='8' maxlength='63'/>
                    <input id='m_passShow' name="m_passShow" type="text" data-bind="value: m_passPhrase,visible:m_showPassword()" class="required margintop5" minlength='8' maxlength='63'/>
                </div>
            </div>
            <div class="row-fluid" data-bind='visible: m_selectedMode() != "OPEN"'>
                <label class="span4 side-right"></label>
                <div class="span8">
                    <p class="checkbox floatleft margintop10 marginright5" data-bind="css:{'checkbox_selected': m_showPassword()}, click: m_showPasswordHandler" manualControl="true">
                        <input id="m_showPassword" type="checkbox" data-bind="checked:m_showPassword"/>
                    </p>
                    <label class="floatleft margintop5 lineheight25" trans="display_password"/>
                    <div id="m_lblShowPassword" class="clear"></div>
                </div>
            </div>
            <div class="row-fluid" data-bind="visible: supportQrCode">
                <label class="span4 side-right"></label>
                <div class="span8">
                    <img src="" data-bind="attr: {src: qrcode_ssid2}" width="128" alt=""/>
                </div>
            </div>
            <div class="row-fluid">
                <label class="span4 side-right" for="m_maxStation" trans="max_station_number"></label>
                <div class="span8">
                    <select name="m_maxStation" id="m_maxStation" data-bind="options: m_maxStations, value: m_selectedStation, optionsText: 'text', optionsValue: 'value'"></select>
                </div>
            </div>
        </div>
        <div class="form-buttons">
            <input id="ssid2_apply" type="submit" class="btn-1 " trans='apply'/>
            <input id="ssid2_cancel" type="button" class="btn-1 " data-bind='click: function(){clear("ssid2");}' trans='cancel'/>
        </div>
    </form>
    <div class="form-note">
        <div class="notes-title">&nbsp;</div>
        <ul class="notes-content">
            <li trans="wifi_basic_note_whole_page"></li>
            <li trans="wifi_basic_note_multi_ssid_switch" data-bind="visible:hasMultiSSID"></li>
            <li trans="wifi_basic_note_network_name"></li>
            <li trans="wifi_basic_note_network_name_input"></li>
            <li trans="wifi_basic_note_broadcast"></li>
            <li trans="wifi_basic_note_security_mode"></li>
            <li class="no-style">
                <ul>
                    <li trans="wifi_basic_note_no_encryption"></li>
                    <li trans="wifi_basic_note_wpa_psk_aes"></li>
                    <li trans="wifi_basic_note_wpa_psk"></li>
                </ul>
            </li>
            <li trans="wifi_basic_note_pass_phrase"></li>
            <li trans="wifi_basic_note_max_station_number"></li>
            <li trans="wifi_basic_note"></li>
        </ul>
    </div>
</div>/**
 * @module wifi basic
 * @class wifi basic
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

    function ($, ko, config, service, _) {

        var securityModes = _.map(config.AUTH_MODES, function (item) {
            return new Option(item.name, item.value);
        });

        function maxStationOption(max) {
            var options = [];
            for (var i = 1; i <= max; i++) {
                options.push(new Option(i, i));
            }
            return options;
        }

        /**
         * wifi basic view model
         * @class WifiBasicVM
         */
        function WifiBasicVM() {
            var self = this;
            var info = getWifiBasic();
			self.hasWifiSwitch = config.WIFI_SWITCH_SUPPORT;
            self.hasMultiSSID = config.HAS_MULTI_SSID;
			self.wifi_enable = ko.observable(info.wifi_enable);
            self.multi_ssid_enable = ko.observable(info.multi_ssid_enable);
            self.origin_multi_ssid_enable = info.multi_ssid_enable;
            self.supportQrCode = ko.observable(config.WIFI_SUPPORT_QR_CODE);

            self.maxStationNumber = ko.computed(function () {
                return config.MAX_STATION_NUMBER;
//            if (self.hasMultiSSID && self.origin_multi_ssid_enable == "1") {
//                return config.MAX_STATION_NUMBER - 1;
//            } else {
//                return config.MAX_STATION_NUMBER;
//            }
            });

            self.modes = ko.observableArray(securityModes);
            self.selectedMode = ko.observable(info.AuthMode);
            self.passPhrase = ko.observable(info.passPhrase);
            self.showPassword = ko.observable(false);
            self.ssid = ko.observable(info.SSID);
            self.broadcast = ko.observable(info.broadcast == '1' ? '1' : '0');
            self.cipher = info.cipher;
            self.selectedStation = ko.observable(info.MAX_Access_num);
            self.maxStations = ko.observableArray(maxStationOption(self.maxStationNumber()));

            self.m_modes = ko.observableArray(securityModes);
            self.m_selectedMode = ko.observable(info.m_AuthMode);
            self.m_passPhrase = ko.observable(info.m_passPhrase);
            self.m_showPassword = ko.observable(false);
            self.m_ssid = ko.observable(info.m_SSID);
            self.m_broadcast = ko.observable(info.m_broadcast == '1' ? '1' : '0');
            self.m_cipher = info.m_cipher;
            self.m_selectedStation = ko.observable(info.m_MAX_Access_num);
            self.m_maxStations = ko.observableArray(maxStationOption(self.maxStationNumber()));
            self.qrcode_ssid1 = ko.observable('./img/qrcode_ssid_wifikey.png?_=' + new Date().getTime());
            self.qrcode_ssid2 = ko.observable('./img/qrcode_multi_ssid_wifikey.png?_=' + new Date().getTime());

            self.clear = function (option) {
                if (option == "switch") {
                    self.multi_ssid_enable(info.multi_ssid_enable);
                } else if (option == "ssid1") {
                    self.selectedMode(info.AuthMode);
                    self.passPhrase(info.passPhrase);
                    self.ssid(info.SSID);
                    self.broadcast(info.broadcast == '1' ? '1' : '0');
                    self.cipher = info.cipher;
                    self.selectedStation(info.MAX_Access_num);
                } else if (option == "ssid2") {
                    self.m_selectedMode(info.m_AuthMode);
                    self.m_passPhrase(info.m_passPhrase);
                    self.m_ssid(info.m_SSID);
                    self.m_broadcast(info.m_broadcast == '1' ? '1' : '0');
                    self.m_cipher = info.m_cipher;
                    self.m_selectedStation(info.m_MAX_Access_num);
                }else if(option == "wifiswitch"){
                    self.wifi_enable(info.wifi_enable);
                } else {
                    clearTimer();
                    clearValidateMsg();
                    init();
                }
            };

            /**
             * æ£æµwpsæ¯å¦å¼å¯ï¼æå¤§æ¥å¥æ°æ¯å¦è¶è¿æå¤§å¼ã
             *
             * @event checkSettings
             */
            self.checkSettings = function (ssid) {
                var status = getWpsInfo();
                if (status.radioFlag == "0") {
                    showAlert('wps_wifi_off');
                    return true;
                }
                if (status.wpsFlag == '1') {
                    showAlert('wps_on_info');
                    return true;
                }
                if (config.HAS_MULTI_SSID && info.multi_ssid_enable == "1") {
                    if ((ssid == "ssid1" && parseInt(self.selectedStation()) + parseInt(info.m_MAX_Access_num) > config.MAX_STATION_NUMBER)
                        || (ssid == "ssid2" && parseInt(self.m_selectedStation()) + parseInt(info.MAX_Access_num) > config.MAX_STATION_NUMBER)) {
                        showAlert({msg:'multi_ssid_max_access_number_alert', params: config.MAX_STATION_NUMBER});
                        return true;
                    }
                }
                if (ssid == "switch") {
                    var result = service.getStatusInfo();
                    if (result.connectWifiSSID && (result.connectWifiStatus == "connecting" || result.connectWifiStatus == "connect")) {
                        showAlert('cannot_operate_when_wifi_connected');
                        return true;
                    }
                }
                return false;
            };

            /**
             * ä¿å­SSID1çè®¾ç½®
             *
             * @event saveSSID1
             */
            self.saveSSID1 = function () {
                if (self.checkSettings("ssid1")) {
                    return;
                }

                showLoading();
                var params = {};
                params.AuthMode = self.selectedMode();
                params.passPhrase = self.passPhrase();
                params.SSID = self.ssid();
                params.broadcast = self.broadcast();
                params.station = self.selectedStation();
                params.cipher = self.selectedMode() == "WPA2PSK" ? 1: 2;
                service.setWifiBasic(params, function (result) {
                    if (result.result == "success") {
                        successOverlay();
                        self.clear();
                    } else {
                        errorOverlay();
                    }
                    self.qrcode_ssid1(self.getRQCodeImage(true));
                });
            };

            /**
             * ä¿å­SSID2çè®¾ç½®
             *
             * @event saveSSID2
             */
            self.saveSSID2 = function () {
                if (self.checkSettings("ssid2")) {
                    return;
                }

                showLoading();
                var params = {};
                params.m_AuthMode = self.m_selectedMode();
                params.m_passPhrase = self.m_passPhrase();
                params.m_SSID = self.m_ssid();
                params.m_broadcast = self.m_broadcast();
                params.m_station = self.m_selectedStation();
                params.m_cipher = self.m_selectedMode() == "WPA2PSK" ? 1: 2;
                service.setWifiBasic4SSID2(params, function (result) {
                    if (result.result == "success") {
                        successOverlay();
                        self.clear();
                    } else {
                        errorOverlay();
                    }
                    self.qrcode_ssid2(self.getRQCodeImage(false));
                });
            };

            /**
             * è®¾ç½®å¤SSIDå¼å³
             *
             * @event setMultiSSIDSwitch
             */
            self.setMultiSSIDSwitch = function () {
                if (self.checkSettings("switch")) {
                    return;
                }

                var setSwitch = function () {
                    showLoading();
                    var params = {};
                    params.multi_ssid_enable = self.multi_ssid_enable();
                    service.setWifiBasicMultiSSIDSwitch(params, function (result) {
                        if (result.result == "success") {
                            successOverlay();
                            self.clear();
                        } else {
                            errorOverlay();
                        }
                        self.qrcode_ssid1(self.getRQCodeImage(true));
                        self.qrcode_ssid2(self.getRQCodeImage(false));
                    });
                };

                if (self.multi_ssid_enable() == "1") {
                    if (config.AP_STATION_SUPPORT) {
                        showConfirm("multi_ssid_enable_confirm", function () {
                            setSwitch();
                        })
                    } else {
                        setSwitch();
                    }
                } else {
                    setSwitch();
                }
            };

            /**
             * SSID1å¯ç æ¾ç¤ºäºä»¶
             *
             * @event showPasswordHandler
             */
            self.showPasswordHandler = function () {
                $("#passShow").parent().find(".error").hide();
                var checkbox = $("#showPassword:checked");
                if (checkbox && checkbox.length == 0) {
                    self.showPassword(true);
                } else {
                    self.showPassword(false);
                }
            };
            /**
             * SSID2å¯ç æ¾ç¤ºäºä»¶
             *
             * @event m_showPasswordHandler
             */
            self.m_showPasswordHandler = function () {
                $("#m_passShow").parent().find(".error").hide();
                var checkbox = $("#m_showPassword:checked");
                if (checkbox && checkbox.length == 0) {
                    self.m_showPassword(true);
                } else {
                    self.m_showPassword(false);
                }
            };

            self.getRQCodeImage = function(isSSID1){
                if(self.supportQrCode()){
                    var timestamp = new Date().getTime();
                    if(isSSID1){
                        return './img/qrcode_ssid_wifikey.png?_=' + timestamp;
                    } else {
                        return './img/qrcode_multi_ssid_wifikey.png?_=' + timestamp;
                    }
                } else {
                    return 'menu_normal1.png';
                }
            };

            /**
             * ä¿å­Wi-Fiå¼å³çè®¾ç½®
             *
             * @event saveWiFiSwitch
             */
            self.saveWiFiSwitch = function () {
                var status = getWpsInfo();
                if (status.wpsFlag == '1') {
                    showAlert('wps_on_info');
                    return true;
                }

                showLoading();
                var params = {};
                if(config.WIFI_SWITCH_SUPPORT) {
                    params.wifi_switch_option = self.wifi_enable();
                }

                service.setWifiSwitch(params, function (result) {
                    if (result.result == "success") {
                        successOverlay();
                        self.clear();
                    } else {
                        errorOverlay();
                    }
                });
            };
        }
        /**
         * å¢å ssidä¸è½éåçå¤æ­
         * @method checkSameSSID
         * @return {Object}
         */
        function checkSameSSID(ssid1,ssid2) {
            var vm = new WifiBasicVM();
            if (config.HAS_MULTI_SSID && vm.multi_ssid_enable() == "1") {
                if(ssid1 == ssid2) {
                    showAlert("multi_ssid_same");
                    return false;
                }
            }
            return true;
        }

        /**
         * è·åwifiåºæ¬ä¿¡æ¯
         * @method getWifiBasic
         * @return {Object}
         */
        function getWifiBasic() {
            return service.getWifiBasic();
        }

        /**
         * è·åwpsä¿¡æ¯
         * @method getWpsInfo
         */
        function getWpsInfo() {
            return service.getWpsInfo();
        }

        /**
         * åå§åwifiåºæ¬view model
         * @method init
         */
        function init() {
            var container = $('#container');
            ko.cleanNode(container[0]);
            var vm = new WifiBasicVM();
            ko.applyBindings(vm, container[0]);

            function checkWifiStatus() {
                var info = service.getAPStationBasic();
                if (info.ap_station_enable == "1") {
                    $('#frmMultiSSID :input').each(function () {
                        $(this).attr("disabled", true);
                    });
                } else {
                    $('#frmMultiSSID :input').each(function () {
                        $(this).attr("disabled", false);
                    });
                }
            }

            if (config.AP_STATION_SUPPORT) {
                checkWifiStatus();
            }
            //clearTimer();
            //addInterval(checkWifiStatus, 1000);

            $('#frmMultiSSID').validate({
                submitHandler:function () {
                    vm.setMultiSSIDSwitch();
                }
            });
            $('#frmSSID1').validate({
                submitHandler:function () {
                    if(!checkSameSSID($("#ssid").val(),$("#m_ssid").val())) {
                        return false;
                    };
                    vm.saveSSID1();
                },
                rules:{
                    ssid:'ssid',
                    pass:'wifi_password_check',
                    passShow:'wifi_password_check'
                },
                errorPlacement:function (error, element) {
                    var id = element.attr("id");
                    if (id == "pass" || id == "passShow") {
                        error.insertAfter("#passShow");
                    } else {
                        error.insertAfter(element);
                    }
                }
            });
            $('#frmSSID2').validate({
                submitHandler:function () {
                    if(!checkSameSSID($("#ssid").val(),$("#m_ssid").val())) {
                        return false;
                    };
                    vm.saveSSID2();
                },
                rules:{
                    m_ssid:'ssid',
                    m_pass:'wifi_password_check',
                    m_passShow:'wifi_password_check'
                },
                errorPlacement:function (error, element) {
                    var id = element.attr("id");
                    if (id == "m_pass" || id == "m_passShow") {
                        error.insertAfter("#m_passShow");
                    } else {
                        error.insertAfter(element);
                    }
                }
            });

            $('#frmWifiSwitch').validate({
                submitHandler:function () {
                    vm.saveWiFiSwitch();
                }
            });
        }

        return {
            init:init
        };
    });ï»¿<form id='wpsForm'>
<div class="form-body">
    <div class="form-title" trans='wps'></div>
    <div class="content">
        <div class="row-fluid" data-bind="visible: hasMultiSSID">
            <label class="span4 side-right" trans='ssid_title' for="multiSSID"></label>
            <div class="span8">
                <select id="multiSSID" class="valid" style="width:auto;" data-bind="options: mulOption, value: wpsSSID, optionsValue: 'value', optionsText: 'text'">
				</select>
            </div>
        </div>
		<div class="row-fluid">
            <label class="span4 side-right" trans='wps'></label>
            <div class="span8">
                <input type="radio" name="wpsMode" id="pinMode" data-bind="checked: wpsType" value="PIN"/>
                <label for="pinMode" trans="wps_pin"></label>
                <input type="text" name="txtPin" id="txtPin" data-bind="value: wpsPin, enable: wpsType() == 'PIN'" class="required marginleft5" maxlength="8"/>
            </div>
        </div>
        <div class="row-fluid">
            <label class="span4 side-right"></label>
            <div class="span8">
                <input type="radio" name="wpsMode" id="pbcMode" data-bind="checked: wpsType" value="PBC"/>
                <label for="pbcMode" trans="wps_pbc"></label>
            </div>
        </div>
        <div class="form-buttons">
            <input type="submit" data-bind="enable: wpsType() != '', css:{disabled: wpsType() == ''}" class="btn-1 " trans='apply'/>
        </div>
        <div class="form-note">
            <div class="notes-title">&nbsp;</div>
            <ul class="notes-content">
                <li trans="wps_note_all"></li>
                <li trans="wps_note_pin"></li>
                <li trans="wps_note_pbc"></li>
                <li trans="wps_note_wait"></li>
            </ul>
        </div>
    </div>
</div>
</form>ï»¿/**
 * @module wps
 * @class wps
 */
define([ 'jquery', 'knockout', 'config/config', 'service', 'underscore' ],

function($, ko, config, service, _) {

	/**
	 * WPS View Model
	 * @class WpsVM
	 */
	function WpsVM() {
        var self = this;
        var info = getWpsInfo();
        self.wpsType = ko.observable('');
        self.wpsPin = ko.observable('');
        //wps on/off
        self.wpsFlag = ko.observable(info.wpsFlag);
        self.authMode = ko.observable(info.authMode);
        //radio on/off
        self.radioFlag = ko.observable(info.radioFlag);
        self.encrypType = ko.observable(info.encrypType);
		self.hasMultiSSID=ko.observable(config.HAS_MULTI_SSID);
		
		
		self.mulOption = ko.observable(drawMulSSIDOption(info));
		
		self.wpsSSID = ko.observable(info.wpsSSID == info.multiSSID ? "SSID2" : "SSID1");

        self.save = function() {
            var info = getWpsInfo();

            if(info.radioFlag == '0') {
                showAlert('wps_wifi_off');
                return;
            }

            if(info.wpsFlag == '1') {
                showAlert('wps_on_info');
                return true;
            }
            //Add MF65 no support open mode to enable wps
            if(info.authMode == "OPEN" && config.DEVICE =="ufi/mf65"){
                showAlert('wps_auth_open_mode');
                return;
            }

//            if(self.wpsSSID() == "SSID1") {
//                if(info.encrypType != "NONE" && info.encrypType != "AES" &&  info.encrypType != "CCMP"){
//                    showAlert('wps_auth_open');
//                    return ;
//                }
//            } else {
//                if(info.m_encrypType != "NONE" && info.m_encrypType != "AES" &&  info.m_encrypType != "CCMP"){
//                    showAlert('wps_auth_open');
//                    return ;
//                }
//            }
			
			var wpsSSID;
			if(self.wpsSSID() == "SSID1") {
                wpsSSID = info.ssid;
            } else {
                wpsSSID = info.multiSSID;
            }
			
			var basic=service.getWifiBasic();
			if(wpsSSID==basic.SSID){
				if(basic.broadcast=='1'){
					showAlert('wps_ssid_broadcast_disable');
                    return ;
				}
			}else if(wpsSSID==basic.m_SSID){
				if(basic.m_broadcast=='1'){
					showAlert('wps_ssid_broadcast_disable');
                    return ;
				}
			}

            showLoading();
            var params = {};
            params.wpsType = self.wpsType();
            params.wpsPin = self.wpsPin();           
            params.wpsSSID = wpsSSID;
			
            service.openWps(params, function(result) {
                if (result.result == "success") {
                    self.wpsPin('');
                    clearValidateMsg();
                    successOverlay();
                } else {
                    errorOverlay();
                }
            });

        };
        
        if(info.wpsFlag != '0') {
           self.wpsType(info.wpsType == 'PIN' ? 'PIN' : 'PBC');
        }
        else {
            self.wpsType('');
        }
    }

    /**
     * è·åwpsç¸å³ä¿¡æ¯
     * @method getWpsInfo
     */
    function getWpsInfo() {
        return service.getWpsInfo();
    }
	
	/**
     * è·åwpsç¸å³ä¿¡æ¯
     * @method getWpsInfo
     */
	function drawMulSSIDOption(info) {
		var opts = [];
		opts.push(new Option(info.ssid, "SSID1"));
		if(info.ssidEnable == "1"){
			opts.push(new Option(info.multiSSID, "SSID2"));
		}			
		return opts;
	}

    /**
     * åå§åwps view model
     * @method init
     */
	function init() {
		var container = $('#container');
		ko.cleanNode(container[0]);
		var vm = new WpsVM();
		ko.applyBindings(vm, container[0]);
		$('#wpsForm').validate({
			submitHandler : function() {
				vm.save();
			},
            rules: {
                txtPin: "wps_pin_check"
            }
		});

	}

	return {
		init : init
	};
});